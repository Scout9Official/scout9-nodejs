"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Scout9 API
 * APIs for managing Scout9 users and conversations
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scout9Api = exports.Scout9ApiFactory = exports.Scout9ApiFp = exports.Scout9ApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * Scout9Api - axios parameter creator
 * @export
 */
const Scout9ApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create a new agent
         * @param {CreateAgentRequest} createAgentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgent: async (createAgentRequest, options = {}) => {
            // verify required parameter 'createAgentRequest' is not null or undefined
            (0, common_1.assertParamExists)('createAgent', 'createAgentRequest', createAgentRequest);
            const localVarPath = `/v1-agent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createAgentRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Creates new agents
         * @param {CreateAgentsRequest} createAgentsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgents: async (createAgentsRequest, options = {}) => {
            // verify required parameter 'createAgentsRequest' is not null or undefined
            (0, common_1.assertParamExists)('createAgents', 'createAgentsRequest', createAgentsRequest);
            const localVarPath = `/v1-agents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createAgentsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a new context
         * @param {CreateContextRequest} createContextRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContext: async (createContextRequest, options = {}) => {
            // verify required parameter 'createContextRequest' is not null or undefined
            (0, common_1.assertParamExists)('createContext', 'createContextRequest', createContextRequest);
            const localVarPath = `/v1-context`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createContextRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Creates new contexts
         * @param {CreateContextsRequest} createContextsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContexts: async (createContextsRequest, options = {}) => {
            // verify required parameter 'createContextsRequest' is not null or undefined
            (0, common_1.assertParamExists)('createContexts', 'createContextsRequest', createContextsRequest);
            const localVarPath = `/v1-contexts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createContextsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a new conversation
         * @param {ConversationCreateRequest} conversationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConversation: async (conversationCreateRequest, options = {}) => {
            // verify required parameter 'conversationCreateRequest' is not null or undefined
            (0, common_1.assertParamExists)('createConversation', 'conversationCreateRequest', conversationCreateRequest);
            const localVarPath = `/v1-conversation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(conversationCreateRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Creates a new customer
         * @param {CreateCustomerRequest} createCustomerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer: async (createCustomerRequest, options = {}) => {
            // verify required parameter 'createCustomerRequest' is not null or undefined
            (0, common_1.assertParamExists)('createCustomer', 'createCustomerRequest', createCustomerRequest);
            const localVarPath = `/v1-customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createCustomerRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Creates new customers
         * @param {CreateCustomersRequest} createCustomersRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomers: async (createCustomersRequest, options = {}) => {
            // verify required parameter 'createCustomersRequest' is not null or undefined
            (0, common_1.assertParamExists)('createCustomers', 'createCustomersRequest', createCustomersRequest);
            const localVarPath = `/v1-customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createCustomersRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create and send message
         * @param {MessageCreateRequest} messageCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessage: async (messageCreateRequest, options = {}) => {
            // verify required parameter 'messageCreateRequest' is not null or undefined
            (0, common_1.assertParamExists)('createMessage', 'messageCreateRequest', messageCreateRequest);
            const localVarPath = `/v1-messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(messageCreateRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Creates a new scheduled conversation
         * @param {ScheduleCreateRequest} scheduleCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSchedule: async (scheduleCreateRequest, options = {}) => {
            // verify required parameter 'scheduleCreateRequest' is not null or undefined
            (0, common_1.assertParamExists)('createSchedule', 'scheduleCreateRequest', scheduleCreateRequest);
            const localVarPath = `/v1-schedule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(scheduleCreateRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Creates a new schedule group
         * @param {ScheduleGroupCreateRequest} scheduleGroupCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScheduleGroup: async (scheduleGroupCreateRequest, options = {}) => {
            // verify required parameter 'scheduleGroupCreateRequest' is not null or undefined
            (0, common_1.assertParamExists)('createScheduleGroup', 'scheduleGroupCreateRequest', scheduleGroupCreateRequest);
            const localVarPath = `/v1-scheduleGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(scheduleGroupCreateRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a new workflow
         * @param {CreateWorkflowRequest} createWorkflowRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflow: async (createWorkflowRequest, options = {}) => {
            // verify required parameter 'createWorkflowRequest' is not null or undefined
            (0, common_1.assertParamExists)('createWorkflow', 'createWorkflowRequest', createWorkflowRequest);
            const localVarPath = `/v1-workflow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createWorkflowRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Creates new workflows
         * @param {CreateWorkflowsRequest} createWorkflowsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflows: async (createWorkflowsRequest, options = {}) => {
            // verify required parameter 'createWorkflowsRequest' is not null or undefined
            (0, common_1.assertParamExists)('createWorkflows', 'createWorkflowsRequest', createWorkflowsRequest);
            const localVarPath = `/v1-workflows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createWorkflowsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a agent
         * @param {string} id Agent ID to delete agent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgent: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteAgent', 'id', id);
            const localVarPath = `/v1-agent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes multiple agents
         * @param {string} id Agent IDs to delete multiple agents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgents: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteAgents', 'id', id);
            const localVarPath = `/v1-agents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a schedule
         * @param {string} id Context ID to delete context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContext: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteContext', 'id', id);
            const localVarPath = `/v1-context`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes multiple contexts
         * @param {string} id Context IDs to delete multiple context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContexts: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteContexts', 'id', id);
            const localVarPath = `/v1-contexts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a schedule
         * @param {string} id Schedule ID to delete schedule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConversation: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteConversation', 'id', id);
            const localVarPath = `/v1-conversation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a customer
         * @param {string} id Customer ID to delete customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteCustomer', 'id', id);
            const localVarPath = `/v1-customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes multiple customers
         * @param {string} id Customer IDs to delete multiple customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomers: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteCustomers', 'id', id);
            const localVarPath = `/v1-customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a schedule
         * @param {string} id Schedule ID to delete schedule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSchedule: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteSchedule', 'id', id);
            const localVarPath = `/v1-schedule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a schedule group
         * @param {string} id Schedule group ID to delete schedule group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduleGroup: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteScheduleGroup', 'id', id);
            const localVarPath = `/v1-scheduleGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a workflow
         * @param {string} id workflow ID to delete workflow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflow: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteWorkflow', 'id', id);
            const localVarPath = `/v1-workflow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes multiple workflows
         * @param {string} id Workflow IDs to delete multiple workflow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflows: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteWorkflows', 'id', id);
            const localVarPath = `/v1-workflows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Generate a message from conversation
         * @param {GenerateRequest} generateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generate: async (generateRequest, options = {}) => {
            // verify required parameter 'generateRequest' is not null or undefined
            (0, common_1.assertParamExists)('generate', 'generateRequest', generateRequest);
            const localVarPath = `/v1-generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(generateRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets a agent
         * @param {string} id Agent ID to get agent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgent: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getAgent', 'id', id);
            const localVarPath = `/v1-agent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets all or specific set of agents
         * @param {string} [id] Optional get specific agents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgents: async (id, options = {}) => {
            const localVarPath = `/v1-agents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets a context
         * @param {string} id Context ID to get context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContext: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getContext', 'id', id);
            const localVarPath = `/v1-context`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets all or specific set of contexts
         * @param {string} [id] Optional get specific contexts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContexts: async (id, options = {}) => {
            const localVarPath = `/v1-contexts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets a conversation
         * @param {string} id Conversation ID to get conversation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversation: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getConversation', 'id', id);
            const localVarPath = `/v1-conversation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets a customer
         * @param {string} id Customer ID to get customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getCustomer', 'id', id);
            const localVarPath = `/v1-customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets all or specific set of customers
         * @param {string} [id] Optional get specific customers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomers: async (id, options = {}) => {
            const localVarPath = `/v1-customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all messages from a conversation
         * @param {string} id Conversation ID to get messages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessage: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getMessage', 'id', id);
            const localVarPath = `/v1-messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets a schedule
         * @param {string} id Schedule ID to get schedule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchedule: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getSchedule', 'id', id);
            const localVarPath = `/v1-schedule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets a schedule group
         * @param {string} id Schedule group ID to get schedule group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduleGroup: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getScheduleGroup', 'id', id);
            const localVarPath = `/v1-scheduleGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets a workflow
         * @param {string} id Workflow ID to get workflow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflow: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getWorkflow', 'id', id);
            const localVarPath = `/v1-workflow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets all or specific set of workflows
         * @param {string} [id] Optional get specific workflows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflows: async (id, options = {}) => {
            const localVarPath = `/v1-workflows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a agent
         * @param {UpdateAgentRequest} updateAgentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgent: async (updateAgentRequest, options = {}) => {
            // verify required parameter 'updateAgentRequest' is not null or undefined
            (0, common_1.assertParamExists)('updateAgent', 'updateAgentRequest', updateAgentRequest);
            const localVarPath = `/v1-agent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateAgentRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Updates multiple agents
         * @param {UpdateAgentsRequest} updateAgentsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgents: async (updateAgentsRequest, options = {}) => {
            // verify required parameter 'updateAgentsRequest' is not null or undefined
            (0, common_1.assertParamExists)('updateAgents', 'updateAgentsRequest', updateAgentsRequest);
            const localVarPath = `/v1-agents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateAgentsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a context
         * @param {UpdateContextRequest} updateContextRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContext: async (updateContextRequest, options = {}) => {
            // verify required parameter 'updateContextRequest' is not null or undefined
            (0, common_1.assertParamExists)('updateContext', 'updateContextRequest', updateContextRequest);
            const localVarPath = `/v1-context`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateContextRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Updates multiple contexts
         * @param {UpdateContextRequest} updateContextRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContexts: async (updateContextRequest, options = {}) => {
            // verify required parameter 'updateContextRequest' is not null or undefined
            (0, common_1.assertParamExists)('updateContexts', 'updateContextRequest', updateContextRequest);
            const localVarPath = `/v1-contexts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateContextRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a conversation
         * @param {ConversationUpdateRequest} conversationUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConversation: async (conversationUpdateRequest, options = {}) => {
            // verify required parameter 'conversationUpdateRequest' is not null or undefined
            (0, common_1.assertParamExists)('updateConversation', 'conversationUpdateRequest', conversationUpdateRequest);
            const localVarPath = `/v1-conversation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(conversationUpdateRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Updates a customer
         * @param {UpdateCustomerRequest} updateCustomerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer: async (updateCustomerRequest, options = {}) => {
            // verify required parameter 'updateCustomerRequest' is not null or undefined
            (0, common_1.assertParamExists)('updateCustomer', 'updateCustomerRequest', updateCustomerRequest);
            const localVarPath = `/v1-customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateCustomerRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Updates multiple customers
         * @param {UpdateCustomerRequest} updateCustomerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomers: async (updateCustomerRequest, options = {}) => {
            // verify required parameter 'updateCustomerRequest' is not null or undefined
            (0, common_1.assertParamExists)('updateCustomers', 'updateCustomerRequest', updateCustomerRequest);
            const localVarPath = `/v1-customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateCustomerRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Updates a schedule
         * @param {ScheduleUpdateRequest} scheduleUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchedule: async (scheduleUpdateRequest, options = {}) => {
            // verify required parameter 'scheduleUpdateRequest' is not null or undefined
            (0, common_1.assertParamExists)('updateSchedule', 'scheduleUpdateRequest', scheduleUpdateRequest);
            const localVarPath = `/v1-schedule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(scheduleUpdateRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Updates a schedule group
         * @param {ScheduleGroupUpdateRequest} scheduleGroupUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScheduleGroup: async (scheduleGroupUpdateRequest, options = {}) => {
            // verify required parameter 'scheduleGroupUpdateRequest' is not null or undefined
            (0, common_1.assertParamExists)('updateScheduleGroup', 'scheduleGroupUpdateRequest', scheduleGroupUpdateRequest);
            const localVarPath = `/v1-scheduleGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(scheduleGroupUpdateRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a workflow
         * @param {UpdateWorkflowRequest} updateWorkflowRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflow: async (updateWorkflowRequest, options = {}) => {
            // verify required parameter 'updateWorkflowRequest' is not null or undefined
            (0, common_1.assertParamExists)('updateWorkflow', 'updateWorkflowRequest', updateWorkflowRequest);
            const localVarPath = `/v1-workflow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateWorkflowRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Updates multiple workflows
         * @param {UpdateWorkflowRequest} updateWorkflowRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflows: async (updateWorkflowRequest, options = {}) => {
            // verify required parameter 'updateWorkflowRequest' is not null or undefined
            (0, common_1.assertParamExists)('updateWorkflows', 'updateWorkflowRequest', updateWorkflowRequest);
            const localVarPath = `/v1-workflows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateWorkflowRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.Scout9ApiAxiosParamCreator = Scout9ApiAxiosParamCreator;
/**
 * Scout9Api - functional programming interface
 * @export
 */
const Scout9ApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.Scout9ApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create a new agent
         * @param {CreateAgentRequest} createAgentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAgent(createAgentRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAgent(createAgentRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Creates new agents
         * @param {CreateAgentsRequest} createAgentsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAgents(createAgentsRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAgents(createAgentsRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Create a new context
         * @param {CreateContextRequest} createContextRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContext(createContextRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createContext(createContextRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Creates new contexts
         * @param {CreateContextsRequest} createContextsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContexts(createContextsRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createContexts(createContextsRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Create a new conversation
         * @param {ConversationCreateRequest} conversationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConversation(conversationCreateRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConversation(conversationCreateRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Creates a new customer
         * @param {CreateCustomerRequest} createCustomerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCustomer(createCustomerRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCustomer(createCustomerRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Creates new customers
         * @param {CreateCustomersRequest} createCustomersRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCustomers(createCustomersRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCustomers(createCustomersRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Create and send message
         * @param {MessageCreateRequest} messageCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMessage(messageCreateRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMessage(messageCreateRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Creates a new scheduled conversation
         * @param {ScheduleCreateRequest} scheduleCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSchedule(scheduleCreateRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSchedule(scheduleCreateRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Creates a new schedule group
         * @param {ScheduleGroupCreateRequest} scheduleGroupCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createScheduleGroup(scheduleGroupCreateRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createScheduleGroup(scheduleGroupCreateRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Create a new workflow
         * @param {CreateWorkflowRequest} createWorkflowRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkflow(createWorkflowRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkflow(createWorkflowRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Creates new workflows
         * @param {CreateWorkflowsRequest} createWorkflowsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkflows(createWorkflowsRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkflows(createWorkflowsRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deletes a agent
         * @param {string} id Agent ID to delete agent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAgent(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAgent(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deletes multiple agents
         * @param {string} id Agent IDs to delete multiple agents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAgents(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAgents(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deletes a schedule
         * @param {string} id Context ID to delete context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContext(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteContext(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deletes multiple contexts
         * @param {string} id Context IDs to delete multiple context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContexts(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteContexts(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deletes a schedule
         * @param {string} id Schedule ID to delete schedule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteConversation(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConversation(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deletes a customer
         * @param {string} id Customer ID to delete customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomer(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustomer(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deletes multiple customers
         * @param {string} id Customer IDs to delete multiple customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomers(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustomers(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deletes a schedule
         * @param {string} id Schedule ID to delete schedule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSchedule(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSchedule(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deletes a schedule group
         * @param {string} id Schedule group ID to delete schedule group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScheduleGroup(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteScheduleGroup(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deletes a workflow
         * @param {string} id workflow ID to delete workflow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkflow(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkflow(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deletes multiple workflows
         * @param {string} id Workflow IDs to delete multiple workflow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkflows(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkflows(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Generate a message from conversation
         * @param {GenerateRequest} generateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generate(generateRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generate(generateRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Gets a agent
         * @param {string} id Agent ID to get agent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAgent(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAgent(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Gets all or specific set of agents
         * @param {string} [id] Optional get specific agents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAgents(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAgents(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Gets a context
         * @param {string} id Context ID to get context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContext(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContext(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Gets all or specific set of contexts
         * @param {string} [id] Optional get specific contexts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContexts(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContexts(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Gets a conversation
         * @param {string} id Conversation ID to get conversation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConversation(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversation(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Gets a customer
         * @param {string} id Customer ID to get customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomer(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomer(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Gets all or specific set of customers
         * @param {string} [id] Optional get specific customers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomers(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomers(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get all messages from a conversation
         * @param {string} id Conversation ID to get messages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessage(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessage(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Gets a schedule
         * @param {string} id Schedule ID to get schedule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchedule(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSchedule(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Gets a schedule group
         * @param {string} id Schedule group ID to get schedule group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScheduleGroup(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScheduleGroup(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Gets a workflow
         * @param {string} id Workflow ID to get workflow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkflow(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflow(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Gets all or specific set of workflows
         * @param {string} [id] Optional get specific workflows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkflows(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflows(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update a agent
         * @param {UpdateAgentRequest} updateAgentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAgent(updateAgentRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAgent(updateAgentRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Updates multiple agents
         * @param {UpdateAgentsRequest} updateAgentsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAgents(updateAgentsRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAgents(updateAgentsRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update a context
         * @param {UpdateContextRequest} updateContextRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContext(updateContextRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateContext(updateContextRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Updates multiple contexts
         * @param {UpdateContextRequest} updateContextRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContexts(updateContextRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateContexts(updateContextRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update a conversation
         * @param {ConversationUpdateRequest} conversationUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateConversation(conversationUpdateRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateConversation(conversationUpdateRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Updates a customer
         * @param {UpdateCustomerRequest} updateCustomerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomer(updateCustomerRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomer(updateCustomerRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Updates multiple customers
         * @param {UpdateCustomerRequest} updateCustomerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomers(updateCustomerRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomers(updateCustomerRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Updates a schedule
         * @param {ScheduleUpdateRequest} scheduleUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSchedule(scheduleUpdateRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSchedule(scheduleUpdateRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Updates a schedule group
         * @param {ScheduleGroupUpdateRequest} scheduleGroupUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateScheduleGroup(scheduleGroupUpdateRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateScheduleGroup(scheduleGroupUpdateRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update a workflow
         * @param {UpdateWorkflowRequest} updateWorkflowRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkflow(updateWorkflowRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkflow(updateWorkflowRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Updates multiple workflows
         * @param {UpdateWorkflowRequest} updateWorkflowRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkflows(updateWorkflowRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkflows(updateWorkflowRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.Scout9ApiFp = Scout9ApiFp;
/**
 * Scout9Api - factory interface
 * @export
 */
const Scout9ApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.Scout9ApiFp)(configuration);
    return {
        /**
         *
         * @summary Create a new agent
         * @param {CreateAgentRequest} createAgentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgent(createAgentRequest, options) {
            return localVarFp.createAgent(createAgentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates new agents
         * @param {CreateAgentsRequest} createAgentsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgents(createAgentsRequest, options) {
            return localVarFp.createAgents(createAgentsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a new context
         * @param {CreateContextRequest} createContextRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContext(createContextRequest, options) {
            return localVarFp.createContext(createContextRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates new contexts
         * @param {CreateContextsRequest} createContextsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContexts(createContextsRequest, options) {
            return localVarFp.createContexts(createContextsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a new conversation
         * @param {ConversationCreateRequest} conversationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConversation(conversationCreateRequest, options) {
            return localVarFp.createConversation(conversationCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a new customer
         * @param {CreateCustomerRequest} createCustomerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer(createCustomerRequest, options) {
            return localVarFp.createCustomer(createCustomerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates new customers
         * @param {CreateCustomersRequest} createCustomersRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomers(createCustomersRequest, options) {
            return localVarFp.createCustomers(createCustomersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create and send message
         * @param {MessageCreateRequest} messageCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessage(messageCreateRequest, options) {
            return localVarFp.createMessage(messageCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a new scheduled conversation
         * @param {ScheduleCreateRequest} scheduleCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSchedule(scheduleCreateRequest, options) {
            return localVarFp.createSchedule(scheduleCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a new schedule group
         * @param {ScheduleGroupCreateRequest} scheduleGroupCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScheduleGroup(scheduleGroupCreateRequest, options) {
            return localVarFp.createScheduleGroup(scheduleGroupCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a new workflow
         * @param {CreateWorkflowRequest} createWorkflowRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflow(createWorkflowRequest, options) {
            return localVarFp.createWorkflow(createWorkflowRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates new workflows
         * @param {CreateWorkflowsRequest} createWorkflowsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflows(createWorkflowsRequest, options) {
            return localVarFp.createWorkflows(createWorkflowsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a agent
         * @param {string} id Agent ID to delete agent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgent(id, options) {
            return localVarFp.deleteAgent(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes multiple agents
         * @param {string} id Agent IDs to delete multiple agents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgents(id, options) {
            return localVarFp.deleteAgents(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a schedule
         * @param {string} id Context ID to delete context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContext(id, options) {
            return localVarFp.deleteContext(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes multiple contexts
         * @param {string} id Context IDs to delete multiple context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContexts(id, options) {
            return localVarFp.deleteContexts(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a schedule
         * @param {string} id Schedule ID to delete schedule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConversation(id, options) {
            return localVarFp.deleteConversation(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a customer
         * @param {string} id Customer ID to delete customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer(id, options) {
            return localVarFp.deleteCustomer(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes multiple customers
         * @param {string} id Customer IDs to delete multiple customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomers(id, options) {
            return localVarFp.deleteCustomers(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a schedule
         * @param {string} id Schedule ID to delete schedule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSchedule(id, options) {
            return localVarFp.deleteSchedule(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a schedule group
         * @param {string} id Schedule group ID to delete schedule group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduleGroup(id, options) {
            return localVarFp.deleteScheduleGroup(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a workflow
         * @param {string} id workflow ID to delete workflow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflow(id, options) {
            return localVarFp.deleteWorkflow(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes multiple workflows
         * @param {string} id Workflow IDs to delete multiple workflow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflows(id, options) {
            return localVarFp.deleteWorkflows(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Generate a message from conversation
         * @param {GenerateRequest} generateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generate(generateRequest, options) {
            return localVarFp.generate(generateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets a agent
         * @param {string} id Agent ID to get agent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgent(id, options) {
            return localVarFp.getAgent(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets all or specific set of agents
         * @param {string} [id] Optional get specific agents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgents(id, options) {
            return localVarFp.getAgents(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets a context
         * @param {string} id Context ID to get context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContext(id, options) {
            return localVarFp.getContext(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets all or specific set of contexts
         * @param {string} [id] Optional get specific contexts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContexts(id, options) {
            return localVarFp.getContexts(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets a conversation
         * @param {string} id Conversation ID to get conversation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversation(id, options) {
            return localVarFp.getConversation(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets a customer
         * @param {string} id Customer ID to get customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer(id, options) {
            return localVarFp.getCustomer(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets all or specific set of customers
         * @param {string} [id] Optional get specific customers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomers(id, options) {
            return localVarFp.getCustomers(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all messages from a conversation
         * @param {string} id Conversation ID to get messages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessage(id, options) {
            return localVarFp.getMessage(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets a schedule
         * @param {string} id Schedule ID to get schedule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchedule(id, options) {
            return localVarFp.getSchedule(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets a schedule group
         * @param {string} id Schedule group ID to get schedule group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduleGroup(id, options) {
            return localVarFp.getScheduleGroup(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets a workflow
         * @param {string} id Workflow ID to get workflow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflow(id, options) {
            return localVarFp.getWorkflow(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets all or specific set of workflows
         * @param {string} [id] Optional get specific workflows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflows(id, options) {
            return localVarFp.getWorkflows(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a agent
         * @param {UpdateAgentRequest} updateAgentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgent(updateAgentRequest, options) {
            return localVarFp.updateAgent(updateAgentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates multiple agents
         * @param {UpdateAgentsRequest} updateAgentsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgents(updateAgentsRequest, options) {
            return localVarFp.updateAgents(updateAgentsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a context
         * @param {UpdateContextRequest} updateContextRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContext(updateContextRequest, options) {
            return localVarFp.updateContext(updateContextRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates multiple contexts
         * @param {UpdateContextRequest} updateContextRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContexts(updateContextRequest, options) {
            return localVarFp.updateContexts(updateContextRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a conversation
         * @param {ConversationUpdateRequest} conversationUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConversation(conversationUpdateRequest, options) {
            return localVarFp.updateConversation(conversationUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates a customer
         * @param {UpdateCustomerRequest} updateCustomerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer(updateCustomerRequest, options) {
            return localVarFp.updateCustomer(updateCustomerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates multiple customers
         * @param {UpdateCustomerRequest} updateCustomerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomers(updateCustomerRequest, options) {
            return localVarFp.updateCustomers(updateCustomerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates a schedule
         * @param {ScheduleUpdateRequest} scheduleUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchedule(scheduleUpdateRequest, options) {
            return localVarFp.updateSchedule(scheduleUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates a schedule group
         * @param {ScheduleGroupUpdateRequest} scheduleGroupUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScheduleGroup(scheduleGroupUpdateRequest, options) {
            return localVarFp.updateScheduleGroup(scheduleGroupUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a workflow
         * @param {UpdateWorkflowRequest} updateWorkflowRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflow(updateWorkflowRequest, options) {
            return localVarFp.updateWorkflow(updateWorkflowRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates multiple workflows
         * @param {UpdateWorkflowRequest} updateWorkflowRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflows(updateWorkflowRequest, options) {
            return localVarFp.updateWorkflows(updateWorkflowRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.Scout9ApiFactory = Scout9ApiFactory;
/**
 * Scout9Api - object-oriented interface
 * @export
 * @class Scout9Api
 * @extends {BaseAPI}
 */
class Scout9Api extends base_1.BaseAPI {
    /**
     *
     * @summary Create a new agent
     * @param {CreateAgentRequest} createAgentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createAgent(createAgentRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).createAgent(createAgentRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates new agents
     * @param {CreateAgentsRequest} createAgentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createAgents(createAgentsRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).createAgents(createAgentsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create a new context
     * @param {CreateContextRequest} createContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createContext(createContextRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).createContext(createContextRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates new contexts
     * @param {CreateContextsRequest} createContextsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createContexts(createContextsRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).createContexts(createContextsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create a new conversation
     * @param {ConversationCreateRequest} conversationCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createConversation(conversationCreateRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).createConversation(conversationCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates a new customer
     * @param {CreateCustomerRequest} createCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createCustomer(createCustomerRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).createCustomer(createCustomerRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates new customers
     * @param {CreateCustomersRequest} createCustomersRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createCustomers(createCustomersRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).createCustomers(createCustomersRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create and send message
     * @param {MessageCreateRequest} messageCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createMessage(messageCreateRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).createMessage(messageCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates a new scheduled conversation
     * @param {ScheduleCreateRequest} scheduleCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createSchedule(scheduleCreateRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).createSchedule(scheduleCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates a new schedule group
     * @param {ScheduleGroupCreateRequest} scheduleGroupCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createScheduleGroup(scheduleGroupCreateRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).createScheduleGroup(scheduleGroupCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create a new workflow
     * @param {CreateWorkflowRequest} createWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createWorkflow(createWorkflowRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).createWorkflow(createWorkflowRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates new workflows
     * @param {CreateWorkflowsRequest} createWorkflowsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createWorkflows(createWorkflowsRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).createWorkflows(createWorkflowsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a agent
     * @param {string} id Agent ID to delete agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteAgent(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).deleteAgent(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes multiple agents
     * @param {string} id Agent IDs to delete multiple agents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteAgents(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).deleteAgents(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id Context ID to delete context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteContext(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).deleteContext(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes multiple contexts
     * @param {string} id Context IDs to delete multiple context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteContexts(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).deleteContexts(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id Schedule ID to delete schedule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteConversation(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).deleteConversation(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a customer
     * @param {string} id Customer ID to delete customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteCustomer(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).deleteCustomer(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes multiple customers
     * @param {string} id Customer IDs to delete multiple customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteCustomers(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).deleteCustomers(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id Schedule ID to delete schedule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteSchedule(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).deleteSchedule(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a schedule group
     * @param {string} id Schedule group ID to delete schedule group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteScheduleGroup(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).deleteScheduleGroup(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a workflow
     * @param {string} id workflow ID to delete workflow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteWorkflow(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).deleteWorkflow(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes multiple workflows
     * @param {string} id Workflow IDs to delete multiple workflow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteWorkflows(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).deleteWorkflows(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Generate a message from conversation
     * @param {GenerateRequest} generateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    generate(generateRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).generate(generateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets a agent
     * @param {string} id Agent ID to get agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getAgent(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).getAgent(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets all or specific set of agents
     * @param {string} [id] Optional get specific agents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getAgents(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).getAgents(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets a context
     * @param {string} id Context ID to get context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getContext(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).getContext(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets all or specific set of contexts
     * @param {string} [id] Optional get specific contexts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getContexts(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).getContexts(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets a conversation
     * @param {string} id Conversation ID to get conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getConversation(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).getConversation(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets a customer
     * @param {string} id Customer ID to get customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getCustomer(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).getCustomer(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets all or specific set of customers
     * @param {string} [id] Optional get specific customers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getCustomers(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).getCustomers(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all messages from a conversation
     * @param {string} id Conversation ID to get messages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getMessage(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).getMessage(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets a schedule
     * @param {string} id Schedule ID to get schedule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getSchedule(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).getSchedule(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets a schedule group
     * @param {string} id Schedule group ID to get schedule group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getScheduleGroup(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).getScheduleGroup(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets a workflow
     * @param {string} id Workflow ID to get workflow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getWorkflow(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).getWorkflow(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets all or specific set of workflows
     * @param {string} [id] Optional get specific workflows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getWorkflows(id, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).getWorkflows(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a agent
     * @param {UpdateAgentRequest} updateAgentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateAgent(updateAgentRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).updateAgent(updateAgentRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates multiple agents
     * @param {UpdateAgentsRequest} updateAgentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateAgents(updateAgentsRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).updateAgents(updateAgentsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a context
     * @param {UpdateContextRequest} updateContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateContext(updateContextRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).updateContext(updateContextRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates multiple contexts
     * @param {UpdateContextRequest} updateContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateContexts(updateContextRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).updateContexts(updateContextRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a conversation
     * @param {ConversationUpdateRequest} conversationUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateConversation(conversationUpdateRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).updateConversation(conversationUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates a customer
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateCustomer(updateCustomerRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).updateCustomer(updateCustomerRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates multiple customers
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateCustomers(updateCustomerRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).updateCustomers(updateCustomerRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates a schedule
     * @param {ScheduleUpdateRequest} scheduleUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateSchedule(scheduleUpdateRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).updateSchedule(scheduleUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates a schedule group
     * @param {ScheduleGroupUpdateRequest} scheduleGroupUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateScheduleGroup(scheduleGroupUpdateRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).updateScheduleGroup(scheduleGroupUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a workflow
     * @param {UpdateWorkflowRequest} updateWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateWorkflow(updateWorkflowRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).updateWorkflow(updateWorkflowRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates multiple workflows
     * @param {UpdateWorkflowRequest} updateWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateWorkflows(updateWorkflowRequest, options) {
        return (0, exports.Scout9ApiFp)(this.configuration).updateWorkflows(updateWorkflowRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.Scout9Api = Scout9Api;
