/**
 * Scout9 API
 * APIs for managing Scout9 users and conversations
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface BlockInfo
 */
export interface BlockInfo {
    /**
     *
     * @type {string}
     * @memberof BlockInfo
     */
    'message'?: string;
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof BlockInfo
     */
    'time'?: string;
}
/**
 *
 * @export
 * @interface CreateCustomerRequest
 */
export interface CreateCustomerRequest {
    /**
     * The customers first name
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'firstName': string;
    /**
     * The customers last name
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'lastName': string;
    /**
     * The customers full name
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'name'?: string;
    /**
     * The customers email address
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'email'?: string | null;
    /**
     * The customers phone number
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'phone'?: string | null;
    /**
     * The customers profile image
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'img'?: string | null;
    /**
     * The customers neighborhood
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'neighborhood'?: string | null;
    /**
     * The customers city
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'city'?: string | null;
    /**
     * The customers 2-letter country code
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'country'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'line1'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'line2'?: string | null;
    /**
     * The customers postal code
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'postal_code'?: string | null;
    /**
     * The customers state, county, province, or region
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'state'?: string | null;
    /**
     * The customers town (only used in Japan)
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'town'?: string | null;
    /**
     *
     * @type {BlockInfo}
     * @memberof CreateCustomerRequest
     */
    'blocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof CreateCustomerRequest
     */
    'phoneBlocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof CreateCustomerRequest
     */
    'emailBlocked'?: BlockInfo;
    /**
     * The date the customer joined the business
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'joined'?: string | null;
    /**
     * The customers stripe ID
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'stripe'?: string | null;
    /**
     * The customers stripe ID in the dev environment
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'stripeDev'?: string | null;
}
/**
 *
 * @export
 * @interface CreateCustomerResponse
 */
export interface CreateCustomerResponse {
    /**
     *
     * @type {boolean}
     * @memberof CreateCustomerResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof CreateCustomerResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface CreateCustomersRequest
 */
export interface CreateCustomersRequest {
    /**
     *
     * @type {Array<CreateCustomersRequestCustomersInner>}
     * @memberof CreateCustomersRequest
     */
    'customers'?: Array<CreateCustomersRequestCustomersInner>;
}
/**
 *
 * @export
 * @interface CreateCustomersRequestCustomersInner
 */
export interface CreateCustomersRequestCustomersInner {
    /**
     * The customers first name
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'firstName': string;
    /**
     * The customers last name
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'lastName': string;
    /**
     * The customers full name
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'name'?: string;
    /**
     * The customers email address
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'email'?: string | null;
    /**
     * The customers phone number
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'phone'?: string | null;
    /**
     * The customers profile image
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'img'?: string | null;
    /**
     * The customers neighborhood
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'neighborhood'?: string | null;
    /**
     * The customers city
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'city'?: string | null;
    /**
     * The customers 2-letter country code
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'country'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'line1'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'line2'?: string | null;
    /**
     * The customers postal code
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'postal_code'?: string | null;
    /**
     * The customers state, county, province, or region
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'state'?: string | null;
    /**
     * The customers town (only used in Japan)
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'town'?: string | null;
    /**
     *
     * @type {BlockInfo}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'blocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'phoneBlocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'emailBlocked'?: BlockInfo;
    /**
     * The date the customer joined the business
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'joined'?: string | null;
    /**
     * The customers stripe ID
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'stripe'?: string | null;
    /**
     * The customers stripe ID in the dev environment
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'stripeDev'?: string | null;
}
/**
 *
 * @export
 * @interface CreateCustomersResponse
 */
export interface CreateCustomersResponse {
    /**
     *
     * @type {boolean}
     * @memberof CreateCustomersResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof CreateCustomersResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * The customers first name
     * @type {string}
     * @memberof Customer
     */
    'firstName'?: string;
    /**
     * The customers last name
     * @type {string}
     * @memberof Customer
     */
    'lastName'?: string;
    /**
     * The customers full name
     * @type {string}
     * @memberof Customer
     */
    'name'?: string;
    /**
     * The customers email address
     * @type {string}
     * @memberof Customer
     */
    'email'?: string | null;
    /**
     * The customers phone number
     * @type {string}
     * @memberof Customer
     */
    'phone'?: string | null;
    /**
     * The customers profile image
     * @type {string}
     * @memberof Customer
     */
    'img'?: string | null;
    /**
     * The customers neighborhood
     * @type {string}
     * @memberof Customer
     */
    'neighborhood'?: string | null;
    /**
     * The customers city
     * @type {string}
     * @memberof Customer
     */
    'city'?: string | null;
    /**
     * The customers 2-letter country code
     * @type {string}
     * @memberof Customer
     */
    'country'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof Customer
     */
    'line1'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof Customer
     */
    'line2'?: string | null;
    /**
     * The customers postal code
     * @type {string}
     * @memberof Customer
     */
    'postal_code'?: string | null;
    /**
     * The customers state, county, province, or region
     * @type {string}
     * @memberof Customer
     */
    'state'?: string | null;
    /**
     * The customers town (only used in Japan)
     * @type {string}
     * @memberof Customer
     */
    'town'?: string | null;
    /**
     *
     * @type {BlockInfo}
     * @memberof Customer
     */
    'blocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof Customer
     */
    'phoneBlocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof Customer
     */
    'emailBlocked'?: BlockInfo;
    /**
     * The date the customer joined the business
     * @type {string}
     * @memberof Customer
     */
    'joined'?: string | null;
    /**
     * The customers stripe ID
     * @type {string}
     * @memberof Customer
     */
    'stripe'?: string | null;
    /**
     * The customers stripe ID in the dev environment
     * @type {string}
     * @memberof Customer
     */
    'stripeDev'?: string | null;
}
/**
 *
 * @export
 * @interface DeleteCustomerResponse
 */
export interface DeleteCustomerResponse {
    /**
     *
     * @type {boolean}
     * @memberof DeleteCustomerResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof DeleteCustomerResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface DeleteCustomersResponse
 */
export interface DeleteCustomersResponse {
    /**
     *
     * @type {boolean}
     * @memberof DeleteCustomersResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof DeleteCustomersResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     *
     * @type {Error}
     * @memberof ErrorResponse
     */
    'error': Error;
}
/**
 *
 * @export
 * @interface GetCustomerResponse
 */
export interface GetCustomerResponse {
    /**
     * The customers first name
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'firstName': string;
    /**
     * The customers last name
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'lastName': string;
    /**
     * The customers full name
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'name'?: string;
    /**
     * The customers email address
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'email'?: string | null;
    /**
     * The customers phone number
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'phone'?: string | null;
    /**
     * The customers profile image
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'img'?: string | null;
    /**
     * The customers neighborhood
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'neighborhood'?: string | null;
    /**
     * The customers city
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'city'?: string | null;
    /**
     * The customers 2-letter country code
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'country'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'line1'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'line2'?: string | null;
    /**
     * The customers postal code
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'postal_code'?: string | null;
    /**
     * The customers state, county, province, or region
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'state'?: string | null;
    /**
     * The customers town (only used in Japan)
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'town'?: string | null;
    /**
     *
     * @type {BlockInfo}
     * @memberof GetCustomerResponse
     */
    'blocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof GetCustomerResponse
     */
    'phoneBlocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof GetCustomerResponse
     */
    'emailBlocked'?: BlockInfo;
    /**
     * The date the customer joined the business
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'joined'?: string | null;
    /**
     * The customers stripe ID
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'stripe'?: string | null;
    /**
     * The customers stripe ID in the dev environment
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'stripeDev'?: string | null;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    'param': string | null;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    'code': string | null;
}
/**
 *
 * @export
 * @interface OperationResponse
 */
export interface OperationResponse {
    /**
     *
     * @type {boolean}
     * @memberof OperationResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof OperationResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface UpdateCustomerRequest
 */
export interface UpdateCustomerRequest {
    /**
     * The customers first name
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'firstName'?: string;
    /**
     * The customers last name
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'lastName'?: string;
    /**
     * The customers full name
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'name'?: string;
    /**
     * The customers email address
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'email'?: string | null;
    /**
     * The customers phone number
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'phone'?: string | null;
    /**
     * The customers profile image
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'img'?: string | null;
    /**
     * The customers neighborhood
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'neighborhood'?: string | null;
    /**
     * The customers city
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'city'?: string | null;
    /**
     * The customers 2-letter country code
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'country'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'line1'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'line2'?: string | null;
    /**
     * The customers postal code
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'postal_code'?: string | null;
    /**
     * The customers state, county, province, or region
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'state'?: string | null;
    /**
     * The customers town (only used in Japan)
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'town'?: string | null;
    /**
     *
     * @type {BlockInfo}
     * @memberof UpdateCustomerRequest
     */
    'blocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof UpdateCustomerRequest
     */
    'phoneBlocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof UpdateCustomerRequest
     */
    'emailBlocked'?: BlockInfo;
    /**
     * The date the customer joined the business
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'joined'?: string | null;
    /**
     * The customers stripe ID
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'stripe'?: string | null;
    /**
     * The customers stripe ID in the dev environment
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'stripeDev'?: string | null;
}
/**
 *
 * @export
 * @interface UpdateCustomerResponse
 */
export interface UpdateCustomerResponse {
    /**
     *
     * @type {boolean}
     * @memberof UpdateCustomerResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof UpdateCustomerResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface UpdateCustomersRequest
 */
export interface UpdateCustomersRequest {
    /**
     *
     * @type {Array<Customer>}
     * @memberof UpdateCustomersRequest
     */
    'customers'?: Array<Customer>;
}
/**
 *
 * @export
 * @interface UpdateCustomersResponse
 */
export interface UpdateCustomersResponse {
    /**
     *
     * @type {boolean}
     * @memberof UpdateCustomersResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof UpdateCustomersResponse
     */
    'error'?: Error;
}
/**
 * Scout9Api - axios parameter creator
 * @export
 */
export declare const Scout9ApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates a new customer
     * @param {CreateCustomerRequest} createCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer: (createCustomerRequest: CreateCustomerRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates new customers
     * @param {CreateCustomersRequest} createCustomersRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomers: (createCustomersRequest: CreateCustomersRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a customer
     * @param {string} id Customer ID to delete customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomer: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes multiple customers
     * @param {string} id Customer IDs to delete multiple customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomers: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets a customer
     * @param {string} id Customer ID to get customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomer: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets all or specific set of customers
     * @param {string} [id] Optional get specific customers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomers: (id?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a customer
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomer: (updateCustomerRequest: UpdateCustomerRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates multiple customers
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomers: (updateCustomerRequest: UpdateCustomerRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * Scout9Api - functional programming interface
 * @export
 */
export declare const Scout9ApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates a new customer
     * @param {CreateCustomerRequest} createCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer(createCustomerRequest: CreateCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCustomerResponse>>;
    /**
     *
     * @summary Creates new customers
     * @param {CreateCustomersRequest} createCustomersRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomers(createCustomersRequest: CreateCustomersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCustomersResponse>>;
    /**
     *
     * @summary Deletes a customer
     * @param {string} id Customer ID to delete customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCustomerResponse>>;
    /**
     *
     * @summary Deletes multiple customers
     * @param {string} id Customer IDs to delete multiple customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomers(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCustomersResponse>>;
    /**
     *
     * @summary Gets a customer
     * @param {string} id Customer ID to get customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCustomerRequest>>;
    /**
     *
     * @summary Gets all or specific set of customers
     * @param {string} [id] Optional get specific customers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomers(id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Customer>>>;
    /**
     *
     * @summary Updates a customer
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomer(updateCustomerRequest: UpdateCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCustomerResponse>>;
    /**
     *
     * @summary Updates multiple customers
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomers(updateCustomerRequest: UpdateCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCustomersResponse>>;
};
/**
 * Scout9Api - factory interface
 * @export
 */
export declare const Scout9ApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Creates a new customer
     * @param {CreateCustomerRequest} createCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer(createCustomerRequest: CreateCustomerRequest, options?: any): AxiosPromise<CreateCustomerResponse>;
    /**
     *
     * @summary Creates new customers
     * @param {CreateCustomersRequest} createCustomersRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomers(createCustomersRequest: CreateCustomersRequest, options?: any): AxiosPromise<CreateCustomersResponse>;
    /**
     *
     * @summary Deletes a customer
     * @param {string} id Customer ID to delete customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomer(id: string, options?: any): AxiosPromise<DeleteCustomerResponse>;
    /**
     *
     * @summary Deletes multiple customers
     * @param {string} id Customer IDs to delete multiple customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomers(id: string, options?: any): AxiosPromise<DeleteCustomersResponse>;
    /**
     *
     * @summary Gets a customer
     * @param {string} id Customer ID to get customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomer(id: string, options?: any): AxiosPromise<CreateCustomerRequest>;
    /**
     *
     * @summary Gets all or specific set of customers
     * @param {string} [id] Optional get specific customers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomers(id?: string, options?: any): AxiosPromise<Array<Customer>>;
    /**
     *
     * @summary Updates a customer
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomer(updateCustomerRequest: UpdateCustomerRequest, options?: any): AxiosPromise<UpdateCustomerResponse>;
    /**
     *
     * @summary Updates multiple customers
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomers(updateCustomerRequest: UpdateCustomerRequest, options?: any): AxiosPromise<UpdateCustomersResponse>;
};
/**
 * Scout9Api - object-oriented interface
 * @export
 * @class Scout9Api
 * @extends {BaseAPI}
 */
export declare class Scout9Api extends BaseAPI {
    /**
     *
     * @summary Creates a new customer
     * @param {CreateCustomerRequest} createCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createCustomer(createCustomerRequest: CreateCustomerRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateCustomerResponse, any>>;
    /**
     *
     * @summary Creates new customers
     * @param {CreateCustomersRequest} createCustomersRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createCustomers(createCustomersRequest: CreateCustomersRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateCustomersResponse, any>>;
    /**
     *
     * @summary Deletes a customer
     * @param {string} id Customer ID to delete customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteCustomer(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteCustomerResponse, any>>;
    /**
     *
     * @summary Deletes multiple customers
     * @param {string} id Customer IDs to delete multiple customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteCustomers(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteCustomersResponse, any>>;
    /**
     *
     * @summary Gets a customer
     * @param {string} id Customer ID to get customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getCustomer(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateCustomerRequest, any>>;
    /**
     *
     * @summary Gets all or specific set of customers
     * @param {string} [id] Optional get specific customers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getCustomers(id?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Customer[], any>>;
    /**
     *
     * @summary Updates a customer
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateCustomer(updateCustomerRequest: UpdateCustomerRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateCustomerResponse, any>>;
    /**
     *
     * @summary Updates multiple customers
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateCustomers(updateCustomerRequest: UpdateCustomerRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateCustomersResponse, any>>;
}
