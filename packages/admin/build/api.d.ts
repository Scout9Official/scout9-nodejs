/**
 * Scout9 API
 * APIs for managing Scout9 users and conversations
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface Agent
 */
export interface Agent {
    /**
     * Agent first name
     * @type {string}
     * @memberof Agent
     */
    'firstName': string;
    /**
     * Agent last name
     * @type {string}
     * @memberof Agent
     */
    'lastName': string;
    /**
     * Agent is inactive
     * @type {boolean}
     * @memberof Agent
     */
    'inactive'?: boolean;
    /**
     * Programmable phone number
     * @type {string}
     * @memberof Agent
     */
    'programmablePhoneNumber'?: string;
    /**
     * Programmable phone number SID
     * @type {string}
     * @memberof Agent
     */
    'programmablePhoneNumberSid'?: string;
    /**
     * Email address from Scout9 gmail subdomain
     * @type {string}
     * @memberof Agent
     */
    'programmableEmail'?: string;
    /**
     * Forward email
     * @type {string}
     * @memberof Agent
     */
    'forwardEmail'?: string;
    /**
     * Forward phone
     * @type {string}
     * @memberof Agent
     */
    'forwardPhone': string;
    /**
     * Title of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof Agent
     */
    'title'?: string;
    /**
     * Context of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof Agent
     */
    'context'?: string;
    /**
     * Locations ids the agent is included in
     * @type {Array<string>}
     * @memberof Agent
     */
    'includedLocations'?: Array<string>;
    /**
     * Locations id the agent is excluded from
     * @type {Array<string>}
     * @memberof Agent
     */
    'excludedLocations'?: Array<string>;
    /**
     * Transcript of the agent
     * @type {string}
     * @memberof Agent
     */
    'transcript'?: string;
}
/**
 * @type AnyValue
 * @export
 */
export type AnyValue = boolean | number | object | string;
/**
 *
 * @export
 * @interface BlockInfo
 */
export interface BlockInfo {
    /**
     *
     * @type {string}
     * @memberof BlockInfo
     */
    'message'?: string;
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof BlockInfo
     */
    'time'?: string;
}
/**
 *
 * @export
 * @interface Context
 */
export interface Context {
    /**
     * The ID of the context
     * @type {string}
     * @memberof Context
     */
    '$id': string;
    /**
     * The name of the context
     * @type {string}
     * @memberof Context
     */
    'name': string;
    /**
     * Whether or not the context is modifiable
     * @type {boolean}
     * @memberof Context
     */
    'modifiable': boolean;
    /**
     * The description of the context
     * @type {string}
     * @memberof Context
     */
    'description'?: string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof Context
     */
    'detection'?: ContextDetectionParams;
    /**
     * The ID column of the context
     * @type {string}
     * @memberof Context
     */
    'idColumn': string;
    /**
     * The columns of the context
     * @type {Array<string>}
     * @memberof Context
     */
    'columns': Array<string>;
    /**
     * The required columns of the context
     * @type {Array<string>}
     * @memberof Context
     */
    'requiredColumns'?: Array<string>;
}
/**
 *
 * @export
 * @interface ContextDetectionDocument
 */
export interface ContextDetectionDocument {
    /**
     * The languages the entity is available in
     * @type {Array<string>}
     * @memberof ContextDetectionDocument
     */
    'languages'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ContextDetectionDocument
     */
    'text': string;
    /**
     *
     * @type {string}
     * @memberof ContextDetectionDocument
     */
    'id': string;
}
/**
 *
 * @export
 * @interface ContextDetectionEntity
 */
export interface ContextDetectionEntity {
    /**
     * The utterance ID of the entity
     * @type {string}
     * @memberof ContextDetectionEntity
     */
    'utteranceId': string;
    /**
     * The classification of the given text
     * @type {string}
     * @memberof ContextDetectionEntity
     */
    'option': string;
    /**
     * The languages the entity is available in
     * @type {Array<string>}
     * @memberof ContextDetectionEntity
     */
    'languages'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ContextDetectionEntity
     */
    'text': Array<string>;
}
/**
 *
 * @export
 * @interface ContextDetectionParams
 */
export interface ContextDetectionParams {
    /**
     *
     * @type {Array<ContextDetectionEntity>}
     * @memberof ContextDetectionParams
     */
    'entities': Array<ContextDetectionEntity>;
    /**
     *
     * @type {Array<ContextDetectionDocument>}
     * @memberof ContextDetectionParams
     */
    'documents': Array<ContextDetectionDocument>;
    /**
     *
     * @type {Array<ContextDetectionTest>}
     * @memberof ContextDetectionParams
     */
    'test'?: Array<ContextDetectionTest>;
}
/**
 *
 * @export
 * @interface ContextDetectionTest
 */
export interface ContextDetectionTest {
    /**
     *
     * @type {string}
     * @memberof ContextDetectionTest
     */
    'language'?: string;
    /**
     *
     * @type {string}
     * @memberof ContextDetectionTest
     */
    'text': string;
    /**
     *
     * @type {string}
     * @memberof ContextDetectionTest
     */
    'targetUtteranceId': string;
    /**
     *
     * @type {string}
     * @memberof ContextDetectionTest
     */
    'targetOption': string;
}
/**
 *
 * @export
 * @interface Conversation
 */
export interface Conversation {
    /**
     * Customer this conversation is with
     * @type {string}
     * @memberof Conversation
     */
    '$customer': string;
    /**
     * Business this conversation is with
     * @type {string}
     * @memberof Conversation
     */
    '$business': string;
    /**
     * Agent assigned to this conversation
     * @type {string}
     * @memberof Conversation
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof Conversation
     */
    '$thread': string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof Conversation
     */
    'initialContexts'?: Array<string>;
    /**
     * Environment this conversation is in (phone, web, or email) - this determines which device to send messages to
     * @type {string}
     * @memberof Conversation
     */
    'environment'?: string;
}
/**
 *
 * @export
 * @interface ConversationContextField
 */
export interface ConversationContextField {
    /**
     * The ID of the context
     * @type {string}
     * @memberof ConversationContextField
     */
    'id': string;
    /**
     * The time the context was created
     * @type {string}
     * @memberof ConversationContextField
     */
    'time'?: string;
    /**
     * The context of the conversation
     * @type {string}
     * @memberof ConversationContextField
     */
    'context': string;
    /**
     * The note of the conversation
     * @type {string}
     * @memberof ConversationContextField
     */
    'note'?: string;
    /**
     * The metadata of the conversation
     * @type {object}
     * @memberof ConversationContextField
     */
    'metadata'?: object;
    /**
     * The conditions of the conversation
     * @type {Array<ConversationContextGroup>}
     * @memberof ConversationContextField
     */
    'conditions'?: Array<ConversationContextGroup>;
    /**
     * The triggers of the conversation
     * @type {Array<string>}
     * @memberof ConversationContextField
     */
    'triggers'?: Array<string>;
}
/**
 *
 * @export
 * @interface ConversationContextFieldCondition
 */
export interface ConversationContextFieldCondition {
    /**
     * The key of the condition
     * @type {string}
     * @memberof ConversationContextFieldCondition
     */
    'key': string;
    /**
     * The operator of the condition
     * @type {string}
     * @memberof ConversationContextFieldCondition
     */
    'operator': string;
    /**
     * The regex of the condition
     * @type {string}
     * @memberof ConversationContextFieldCondition
     */
    'regex'?: string;
    /**
     *
     * @type {AnyValue}
     * @memberof ConversationContextFieldCondition
     */
    'value': AnyValue;
}
/**
 *
 * @export
 * @interface ConversationContextGroup
 */
export interface ConversationContextGroup {
    /**
     * The conditions of the conversation
     * @type {Array<ConversationContextFieldCondition>}
     * @memberof ConversationContextGroup
     */
    'conditions': Array<ConversationContextFieldCondition>;
}
/**
 *
 * @export
 * @interface ConversationCreateRequest
 */
export interface ConversationCreateRequest {
    /**
     * Customer this conversation is with
     * @type {string}
     * @memberof ConversationCreateRequest
     */
    '$customer': string;
    /**
     *
     * @type {any}
     * @memberof ConversationCreateRequest
     */
    '$business': any | null;
    /**
     * Agent assigned to this conversation
     * @type {string}
     * @memberof ConversationCreateRequest
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ConversationCreateRequest
     */
    '$thread': string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ConversationCreateRequest
     */
    'initialContexts'?: Array<string>;
    /**
     * Environment this conversation is in (phone, web, or email) - this determines which device to send messages to
     * @type {string}
     * @memberof ConversationCreateRequest
     */
    'environment'?: string;
}
/**
 *
 * @export
 * @interface ConversationCreateRequestAllOf
 */
export interface ConversationCreateRequestAllOf {
    /**
     *
     * @type {any}
     * @memberof ConversationCreateRequestAllOf
     */
    '$business'?: any | null;
}
/**
 *
 * @export
 * @interface ConversationCreateResponse
 */
export interface ConversationCreateResponse {
    /**
     *
     * @type {boolean}
     * @memberof ConversationCreateResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof ConversationCreateResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface ConversationGetResponse
 */
export interface ConversationGetResponse {
    /**
     * Customer this conversation is with
     * @type {string}
     * @memberof ConversationGetResponse
     */
    '$customer': string;
    /**
     * Business this conversation is with
     * @type {string}
     * @memberof ConversationGetResponse
     */
    '$business': string;
    /**
     * Agent assigned to this conversation
     * @type {string}
     * @memberof ConversationGetResponse
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ConversationGetResponse
     */
    '$thread': string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ConversationGetResponse
     */
    'initialContexts'?: Array<string>;
    /**
     * Environment this conversation is in (phone, web, or email) - this determines which device to send messages to
     * @type {string}
     * @memberof ConversationGetResponse
     */
    'environment'?: string;
}
/**
 *
 * @export
 * @interface ConversationRemoveResponse
 */
export interface ConversationRemoveResponse {
    /**
     *
     * @type {boolean}
     * @memberof ConversationRemoveResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof ConversationRemoveResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface ConversationUpdateRequest
 */
export interface ConversationUpdateRequest {
    /**
     * Customer this conversation is with
     * @type {string}
     * @memberof ConversationUpdateRequest
     */
    '$customer': string;
    /**
     * Business this conversation is with
     * @type {string}
     * @memberof ConversationUpdateRequest
     */
    '$business': string;
    /**
     * Agent assigned to this conversation
     * @type {string}
     * @memberof ConversationUpdateRequest
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ConversationUpdateRequest
     */
    '$thread': string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ConversationUpdateRequest
     */
    'initialContexts'?: Array<string>;
    /**
     * Environment this conversation is in (phone, web, or email) - this determines which device to send messages to
     * @type {string}
     * @memberof ConversationUpdateRequest
     */
    'environment'?: string;
    /**
     * The ID of the conversation to update
     * @type {string}
     * @memberof ConversationUpdateRequest
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface ConversationUpdateRequestAllOf
 */
export interface ConversationUpdateRequestAllOf {
    /**
     * The ID of the conversation to update
     * @type {string}
     * @memberof ConversationUpdateRequestAllOf
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface ConversationUpdateResponse
 */
export interface ConversationUpdateResponse {
    /**
     *
     * @type {boolean}
     * @memberof ConversationUpdateResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof ConversationUpdateResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface CreateAgentRequest
 */
export interface CreateAgentRequest {
    /**
     * Agent first name
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'firstName': string;
    /**
     * Agent last name
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'lastName': string;
    /**
     * Agent is inactive
     * @type {boolean}
     * @memberof CreateAgentRequest
     */
    'inactive'?: boolean;
    /**
     * Programmable phone number
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'programmablePhoneNumber'?: string;
    /**
     * Programmable phone number SID
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'programmablePhoneNumberSid'?: string;
    /**
     * Email address from Scout9 gmail subdomain
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'programmableEmail'?: string;
    /**
     * Forward email
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'forwardEmail'?: string;
    /**
     * Forward phone
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'forwardPhone': string;
    /**
     * Title of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'title'?: string;
    /**
     * Context of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'context'?: string;
    /**
     * Locations ids the agent is included in
     * @type {Array<string>}
     * @memberof CreateAgentRequest
     */
    'includedLocations'?: Array<string>;
    /**
     * Locations id the agent is excluded from
     * @type {Array<string>}
     * @memberof CreateAgentRequest
     */
    'excludedLocations'?: Array<string>;
    /**
     * Transcript of the agent
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'transcript'?: string;
}
/**
 *
 * @export
 * @interface CreateAgentResponse
 */
export interface CreateAgentResponse {
    /**
     *
     * @type {boolean}
     * @memberof CreateAgentResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof CreateAgentResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface CreateAgentsRequest
 */
export interface CreateAgentsRequest {
    /**
     *
     * @type {Array<CreateAgentsRequestCustomersInner>}
     * @memberof CreateAgentsRequest
     */
    'customers'?: Array<CreateAgentsRequestCustomersInner>;
}
/**
 *
 * @export
 * @interface CreateAgentsRequestCustomersInner
 */
export interface CreateAgentsRequestCustomersInner {
    /**
     * Agent first name
     * @type {string}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'firstName': string;
    /**
     * Agent last name
     * @type {string}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'lastName': string;
    /**
     * Agent is inactive
     * @type {boolean}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'inactive'?: boolean;
    /**
     * Programmable phone number
     * @type {string}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'programmablePhoneNumber'?: string;
    /**
     * Programmable phone number SID
     * @type {string}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'programmablePhoneNumberSid'?: string;
    /**
     * Email address from Scout9 gmail subdomain
     * @type {string}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'programmableEmail'?: string;
    /**
     * Forward email
     * @type {string}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'forwardEmail'?: string;
    /**
     * Forward phone
     * @type {string}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'forwardPhone': string;
    /**
     * Title of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'title'?: string;
    /**
     * Context of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'context'?: string;
    /**
     * Locations ids the agent is included in
     * @type {Array<string>}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'includedLocations'?: Array<string>;
    /**
     * Locations id the agent is excluded from
     * @type {Array<string>}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'excludedLocations'?: Array<string>;
    /**
     * Transcript of the agent
     * @type {string}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'transcript'?: string;
}
/**
 *
 * @export
 * @interface CreateAgentsResponse
 */
export interface CreateAgentsResponse {
    /**
     *
     * @type {boolean}
     * @memberof CreateAgentsResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof CreateAgentsResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface CreateContextRequest
 */
export interface CreateContextRequest {
    /**
     * The ID of the context
     * @type {string}
     * @memberof CreateContextRequest
     */
    '$id': string;
    /**
     * The name of the context
     * @type {string}
     * @memberof CreateContextRequest
     */
    'name': string;
    /**
     * Whether or not the context is modifiable
     * @type {boolean}
     * @memberof CreateContextRequest
     */
    'modifiable': boolean;
    /**
     * The description of the context
     * @type {string}
     * @memberof CreateContextRequest
     */
    'description'?: string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof CreateContextRequest
     */
    'detection'?: ContextDetectionParams;
    /**
     * The ID column of the context
     * @type {string}
     * @memberof CreateContextRequest
     */
    'idColumn': string;
    /**
     * The columns of the context
     * @type {Array<string>}
     * @memberof CreateContextRequest
     */
    'columns': Array<string>;
    /**
     * The required columns of the context
     * @type {Array<string>}
     * @memberof CreateContextRequest
     */
    'requiredColumns'?: Array<string>;
}
/**
 *
 * @export
 * @interface CreateContextResponse
 */
export interface CreateContextResponse {
    /**
     *
     * @type {boolean}
     * @memberof CreateContextResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof CreateContextResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface CreateContextsRequest
 */
export interface CreateContextsRequest {
    /**
     *
     * @type {Array<CreateContextsRequestCustomersInner>}
     * @memberof CreateContextsRequest
     */
    'customers'?: Array<CreateContextsRequestCustomersInner>;
}
/**
 *
 * @export
 * @interface CreateContextsRequestCustomersInner
 */
export interface CreateContextsRequestCustomersInner {
    /**
     * The ID of the context
     * @type {string}
     * @memberof CreateContextsRequestCustomersInner
     */
    '$id': string;
    /**
     * The name of the context
     * @type {string}
     * @memberof CreateContextsRequestCustomersInner
     */
    'name': string;
    /**
     * Whether or not the context is modifiable
     * @type {boolean}
     * @memberof CreateContextsRequestCustomersInner
     */
    'modifiable': boolean;
    /**
     * The description of the context
     * @type {string}
     * @memberof CreateContextsRequestCustomersInner
     */
    'description'?: string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof CreateContextsRequestCustomersInner
     */
    'detection'?: ContextDetectionParams;
    /**
     * The ID column of the context
     * @type {string}
     * @memberof CreateContextsRequestCustomersInner
     */
    'idColumn': string;
    /**
     * The columns of the context
     * @type {Array<string>}
     * @memberof CreateContextsRequestCustomersInner
     */
    'columns': Array<string>;
    /**
     * The required columns of the context
     * @type {Array<string>}
     * @memberof CreateContextsRequestCustomersInner
     */
    'requiredColumns'?: Array<string>;
}
/**
 *
 * @export
 * @interface CreateContextsResponse
 */
export interface CreateContextsResponse {
    /**
     *
     * @type {boolean}
     * @memberof CreateContextsResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof CreateContextsResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface CreateCustomerRequest
 */
export interface CreateCustomerRequest {
    /**
     * The customers first name
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'firstName': string;
    /**
     * The customers last name
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'lastName': string;
    /**
     * The customers full name
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'name'?: string;
    /**
     * The customers email address
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'email'?: string | null;
    /**
     * The customers phone number
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'phone'?: string | null;
    /**
     * The customers profile image
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'img'?: string | null;
    /**
     * The customers neighborhood
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'neighborhood'?: string | null;
    /**
     * The customers city
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'city'?: string | null;
    /**
     * The customers 2-letter country code
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'country'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'line1'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'line2'?: string | null;
    /**
     * The customers postal code
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'postal_code'?: string | null;
    /**
     * The customers state, county, province, or region
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'state'?: string | null;
    /**
     * The customers town (only used in Japan)
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'town'?: string | null;
    /**
     *
     * @type {BlockInfo}
     * @memberof CreateCustomerRequest
     */
    'blocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof CreateCustomerRequest
     */
    'phoneBlocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof CreateCustomerRequest
     */
    'emailBlocked'?: BlockInfo;
    /**
     * The date the customer joined the business
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'joined'?: string | null;
    /**
     * The customers stripe ID
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'stripe'?: string | null;
    /**
     * The customers stripe ID in the dev environment
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'stripeDev'?: string | null;
}
/**
 *
 * @export
 * @interface CreateCustomerResponse
 */
export interface CreateCustomerResponse {
    /**
     *
     * @type {boolean}
     * @memberof CreateCustomerResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof CreateCustomerResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface CreateCustomersRequest
 */
export interface CreateCustomersRequest {
    /**
     *
     * @type {Array<CreateCustomersRequestCustomersInner>}
     * @memberof CreateCustomersRequest
     */
    'customers'?: Array<CreateCustomersRequestCustomersInner>;
}
/**
 *
 * @export
 * @interface CreateCustomersRequestCustomersInner
 */
export interface CreateCustomersRequestCustomersInner {
    /**
     * The customers first name
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'firstName': string;
    /**
     * The customers last name
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'lastName': string;
    /**
     * The customers full name
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'name'?: string;
    /**
     * The customers email address
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'email'?: string | null;
    /**
     * The customers phone number
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'phone'?: string | null;
    /**
     * The customers profile image
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'img'?: string | null;
    /**
     * The customers neighborhood
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'neighborhood'?: string | null;
    /**
     * The customers city
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'city'?: string | null;
    /**
     * The customers 2-letter country code
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'country'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'line1'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'line2'?: string | null;
    /**
     * The customers postal code
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'postal_code'?: string | null;
    /**
     * The customers state, county, province, or region
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'state'?: string | null;
    /**
     * The customers town (only used in Japan)
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'town'?: string | null;
    /**
     *
     * @type {BlockInfo}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'blocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'phoneBlocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'emailBlocked'?: BlockInfo;
    /**
     * The date the customer joined the business
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'joined'?: string | null;
    /**
     * The customers stripe ID
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'stripe'?: string | null;
    /**
     * The customers stripe ID in the dev environment
     * @type {string}
     * @memberof CreateCustomersRequestCustomersInner
     */
    'stripeDev'?: string | null;
}
/**
 *
 * @export
 * @interface CreateCustomersResponse
 */
export interface CreateCustomersResponse {
    /**
     *
     * @type {boolean}
     * @memberof CreateCustomersResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof CreateCustomersResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface CreateWorkflowRequest
 */
export interface CreateWorkflowRequest {
    /**
     * The name of the workflow
     * @type {string}
     * @memberof CreateWorkflowRequest
     */
    'name': string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof CreateWorkflowRequest
     */
    'initiators': ContextDetectionParams;
    /**
     * The fields of the workflow
     * @type {Array<ConversationContextField>}
     * @memberof CreateWorkflowRequest
     */
    'fields': Array<ConversationContextField>;
    /**
     * About this conversation - used as initial context
     * @type {string}
     * @memberof CreateWorkflowRequest
     */
    'context': string;
    /**
     * The webhook to call when a workflow is created
     * @type {string}
     * @memberof CreateWorkflowRequest
     */
    'onCreated'?: string;
    /**
     * The webhook to call when a workflow is updated
     * @type {string}
     * @memberof CreateWorkflowRequest
     */
    'onUpdated'?: string;
    /**
     * The webhook to call when a workflow is deleted
     * @type {string}
     * @memberof CreateWorkflowRequest
     */
    'onDeleted'?: string;
    /**
     * The webhook to call when a workflow has an error
     * @type {string}
     * @memberof CreateWorkflowRequest
     */
    'onError'?: string;
}
/**
 *
 * @export
 * @interface CreateWorkflowResponse
 */
export interface CreateWorkflowResponse {
    /**
     *
     * @type {boolean}
     * @memberof CreateWorkflowResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof CreateWorkflowResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface CreateWorkflowsRequest
 */
export interface CreateWorkflowsRequest {
    /**
     *
     * @type {Array<CreateWorkflowsRequestCustomersInner>}
     * @memberof CreateWorkflowsRequest
     */
    'customers'?: Array<CreateWorkflowsRequestCustomersInner>;
}
/**
 *
 * @export
 * @interface CreateWorkflowsRequestCustomersInner
 */
export interface CreateWorkflowsRequestCustomersInner {
    /**
     * The name of the workflow
     * @type {string}
     * @memberof CreateWorkflowsRequestCustomersInner
     */
    'name': string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof CreateWorkflowsRequestCustomersInner
     */
    'initiators': ContextDetectionParams;
    /**
     * The fields of the workflow
     * @type {Array<ConversationContextField>}
     * @memberof CreateWorkflowsRequestCustomersInner
     */
    'fields': Array<ConversationContextField>;
    /**
     * About this conversation - used as initial context
     * @type {string}
     * @memberof CreateWorkflowsRequestCustomersInner
     */
    'context': string;
    /**
     * The webhook to call when a workflow is created
     * @type {string}
     * @memberof CreateWorkflowsRequestCustomersInner
     */
    'onCreated'?: string;
    /**
     * The webhook to call when a workflow is updated
     * @type {string}
     * @memberof CreateWorkflowsRequestCustomersInner
     */
    'onUpdated'?: string;
    /**
     * The webhook to call when a workflow is deleted
     * @type {string}
     * @memberof CreateWorkflowsRequestCustomersInner
     */
    'onDeleted'?: string;
    /**
     * The webhook to call when a workflow has an error
     * @type {string}
     * @memberof CreateWorkflowsRequestCustomersInner
     */
    'onError'?: string;
}
/**
 *
 * @export
 * @interface CreateWorkflowsResponse
 */
export interface CreateWorkflowsResponse {
    /**
     *
     * @type {boolean}
     * @memberof CreateWorkflowsResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof CreateWorkflowsResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * The customers first name
     * @type {string}
     * @memberof Customer
     */
    'firstName'?: string;
    /**
     * The customers last name
     * @type {string}
     * @memberof Customer
     */
    'lastName'?: string;
    /**
     * The customers full name
     * @type {string}
     * @memberof Customer
     */
    'name'?: string;
    /**
     * The customers email address
     * @type {string}
     * @memberof Customer
     */
    'email'?: string | null;
    /**
     * The customers phone number
     * @type {string}
     * @memberof Customer
     */
    'phone'?: string | null;
    /**
     * The customers profile image
     * @type {string}
     * @memberof Customer
     */
    'img'?: string | null;
    /**
     * The customers neighborhood
     * @type {string}
     * @memberof Customer
     */
    'neighborhood'?: string | null;
    /**
     * The customers city
     * @type {string}
     * @memberof Customer
     */
    'city'?: string | null;
    /**
     * The customers 2-letter country code
     * @type {string}
     * @memberof Customer
     */
    'country'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof Customer
     */
    'line1'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof Customer
     */
    'line2'?: string | null;
    /**
     * The customers postal code
     * @type {string}
     * @memberof Customer
     */
    'postal_code'?: string | null;
    /**
     * The customers state, county, province, or region
     * @type {string}
     * @memberof Customer
     */
    'state'?: string | null;
    /**
     * The customers town (only used in Japan)
     * @type {string}
     * @memberof Customer
     */
    'town'?: string | null;
    /**
     *
     * @type {BlockInfo}
     * @memberof Customer
     */
    'blocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof Customer
     */
    'phoneBlocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof Customer
     */
    'emailBlocked'?: BlockInfo;
    /**
     * The date the customer joined the business
     * @type {string}
     * @memberof Customer
     */
    'joined'?: string | null;
    /**
     * The customers stripe ID
     * @type {string}
     * @memberof Customer
     */
    'stripe'?: string | null;
    /**
     * The customers stripe ID in the dev environment
     * @type {string}
     * @memberof Customer
     */
    'stripeDev'?: string | null;
}
/**
 *
 * @export
 * @interface DeleteAgentResponse
 */
export interface DeleteAgentResponse {
    /**
     *
     * @type {boolean}
     * @memberof DeleteAgentResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof DeleteAgentResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface DeleteAgentsResponse
 */
export interface DeleteAgentsResponse {
    /**
     *
     * @type {boolean}
     * @memberof DeleteAgentsResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof DeleteAgentsResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface DeleteContextResponse
 */
export interface DeleteContextResponse {
    /**
     *
     * @type {boolean}
     * @memberof DeleteContextResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof DeleteContextResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface DeleteContextsResponse
 */
export interface DeleteContextsResponse {
    /**
     *
     * @type {boolean}
     * @memberof DeleteContextsResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof DeleteContextsResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface DeleteCustomerResponse
 */
export interface DeleteCustomerResponse {
    /**
     *
     * @type {boolean}
     * @memberof DeleteCustomerResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof DeleteCustomerResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface DeleteCustomersResponse
 */
export interface DeleteCustomersResponse {
    /**
     *
     * @type {boolean}
     * @memberof DeleteCustomersResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof DeleteCustomersResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface DeleteWorkflowResponse
 */
export interface DeleteWorkflowResponse {
    /**
     *
     * @type {boolean}
     * @memberof DeleteWorkflowResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof DeleteWorkflowResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface DeleteWorkflowsResponse
 */
export interface DeleteWorkflowsResponse {
    /**
     *
     * @type {boolean}
     * @memberof DeleteWorkflowsResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof DeleteWorkflowsResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     *
     * @type {Error}
     * @memberof ErrorResponse
     */
    'error': Error;
}
/**
 *
 * @export
 * @interface GenerateRequest
 */
export interface GenerateRequest {
    /**
     * Conversation ID to generate message from
     * @type {string}
     * @memberof GenerateRequest
     */
    'convo'?: string;
}
/**
 *
 * @export
 * @interface GenerateResponse
 */
export interface GenerateResponse {
    /**
     * The role of the message (customer, agent, or business)
     * @type {string}
     * @memberof GenerateResponse
     */
    'role'?: string;
    /**
     * The content of the message
     * @type {string}
     * @memberof GenerateResponse
     */
    'content'?: string;
    /**
     * The name of the sender
     * @type {string}
     * @memberof GenerateResponse
     */
    'name'?: string;
    /**
     * The time the message was sent
     * @type {string}
     * @memberof GenerateResponse
     */
    'time'?: string;
}
/**
 *
 * @export
 * @interface GetAgentResponse
 */
export interface GetAgentResponse {
    /**
     * Agent first name
     * @type {string}
     * @memberof GetAgentResponse
     */
    'firstName': string;
    /**
     * Agent last name
     * @type {string}
     * @memberof GetAgentResponse
     */
    'lastName': string;
    /**
     * Agent is inactive
     * @type {boolean}
     * @memberof GetAgentResponse
     */
    'inactive'?: boolean;
    /**
     * Programmable phone number
     * @type {string}
     * @memberof GetAgentResponse
     */
    'programmablePhoneNumber'?: string;
    /**
     * Programmable phone number SID
     * @type {string}
     * @memberof GetAgentResponse
     */
    'programmablePhoneNumberSid'?: string;
    /**
     * Email address from Scout9 gmail subdomain
     * @type {string}
     * @memberof GetAgentResponse
     */
    'programmableEmail'?: string;
    /**
     * Forward email
     * @type {string}
     * @memberof GetAgentResponse
     */
    'forwardEmail'?: string;
    /**
     * Forward phone
     * @type {string}
     * @memberof GetAgentResponse
     */
    'forwardPhone': string;
    /**
     * Title of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof GetAgentResponse
     */
    'title'?: string;
    /**
     * Context of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof GetAgentResponse
     */
    'context'?: string;
    /**
     * Locations ids the agent is included in
     * @type {Array<string>}
     * @memberof GetAgentResponse
     */
    'includedLocations'?: Array<string>;
    /**
     * Locations id the agent is excluded from
     * @type {Array<string>}
     * @memberof GetAgentResponse
     */
    'excludedLocations'?: Array<string>;
    /**
     * Transcript of the agent
     * @type {string}
     * @memberof GetAgentResponse
     */
    'transcript'?: string;
}
/**
 *
 * @export
 * @interface GetContextResponse
 */
export interface GetContextResponse {
    /**
     * The ID of the context
     * @type {string}
     * @memberof GetContextResponse
     */
    '$id': string;
    /**
     * The name of the context
     * @type {string}
     * @memberof GetContextResponse
     */
    'name': string;
    /**
     * Whether or not the context is modifiable
     * @type {boolean}
     * @memberof GetContextResponse
     */
    'modifiable': boolean;
    /**
     * The description of the context
     * @type {string}
     * @memberof GetContextResponse
     */
    'description'?: string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof GetContextResponse
     */
    'detection'?: ContextDetectionParams;
    /**
     * The ID column of the context
     * @type {string}
     * @memberof GetContextResponse
     */
    'idColumn': string;
    /**
     * The columns of the context
     * @type {Array<string>}
     * @memberof GetContextResponse
     */
    'columns': Array<string>;
    /**
     * The required columns of the context
     * @type {Array<string>}
     * @memberof GetContextResponse
     */
    'requiredColumns'?: Array<string>;
}
/**
 *
 * @export
 * @interface GetCustomerResponse
 */
export interface GetCustomerResponse {
    /**
     * The customers first name
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'firstName': string;
    /**
     * The customers last name
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'lastName': string;
    /**
     * The customers full name
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'name'?: string;
    /**
     * The customers email address
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'email'?: string | null;
    /**
     * The customers phone number
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'phone'?: string | null;
    /**
     * The customers profile image
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'img'?: string | null;
    /**
     * The customers neighborhood
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'neighborhood'?: string | null;
    /**
     * The customers city
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'city'?: string | null;
    /**
     * The customers 2-letter country code
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'country'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'line1'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'line2'?: string | null;
    /**
     * The customers postal code
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'postal_code'?: string | null;
    /**
     * The customers state, county, province, or region
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'state'?: string | null;
    /**
     * The customers town (only used in Japan)
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'town'?: string | null;
    /**
     *
     * @type {BlockInfo}
     * @memberof GetCustomerResponse
     */
    'blocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof GetCustomerResponse
     */
    'phoneBlocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof GetCustomerResponse
     */
    'emailBlocked'?: BlockInfo;
    /**
     * The date the customer joined the business
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'joined'?: string | null;
    /**
     * The customers stripe ID
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'stripe'?: string | null;
    /**
     * The customers stripe ID in the dev environment
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'stripeDev'?: string | null;
}
/**
 *
 * @export
 * @interface GetWorkflowResponse
 */
export interface GetWorkflowResponse {
    /**
     * The name of the workflow
     * @type {string}
     * @memberof GetWorkflowResponse
     */
    'name': string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof GetWorkflowResponse
     */
    'initiators': ContextDetectionParams;
    /**
     * The fields of the workflow
     * @type {Array<ConversationContextField>}
     * @memberof GetWorkflowResponse
     */
    'fields': Array<ConversationContextField>;
    /**
     * About this conversation - used as initial context
     * @type {string}
     * @memberof GetWorkflowResponse
     */
    'context': string;
    /**
     * The webhook to call when a workflow is created
     * @type {string}
     * @memberof GetWorkflowResponse
     */
    'onCreated'?: string;
    /**
     * The webhook to call when a workflow is updated
     * @type {string}
     * @memberof GetWorkflowResponse
     */
    'onUpdated'?: string;
    /**
     * The webhook to call when a workflow is deleted
     * @type {string}
     * @memberof GetWorkflowResponse
     */
    'onDeleted'?: string;
    /**
     * The webhook to call when a workflow has an error
     * @type {string}
     * @memberof GetWorkflowResponse
     */
    'onError'?: string;
}
/**
 *
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * The role of the message (customer, agent, or business)
     * @type {string}
     * @memberof Message
     */
    'role'?: string;
    /**
     * The content of the message
     * @type {string}
     * @memberof Message
     */
    'content'?: string;
    /**
     * The name of the sender
     * @type {string}
     * @memberof Message
     */
    'name'?: string;
    /**
     * The time the message was sent
     * @type {string}
     * @memberof Message
     */
    'time'?: string;
}
/**
 *
 * @export
 * @interface MessageCreateRequest
 */
export interface MessageCreateRequest {
    /**
     * Conveersation ID this belonds to
     * @type {string}
     * @memberof MessageCreateRequest
     */
    'convo'?: string;
    /**
     *
     * @type {MessageGetResponseInner}
     * @memberof MessageCreateRequest
     */
    'message'?: MessageGetResponseInner;
}
/**
 *
 * @export
 * @interface MessageCreateResponse
 */
export interface MessageCreateResponse {
    /**
     *
     * @type {boolean}
     * @memberof MessageCreateResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof MessageCreateResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface MessageGetResponseInner
 */
export interface MessageGetResponseInner {
    /**
     * The role of the message (customer, agent, or business)
     * @type {string}
     * @memberof MessageGetResponseInner
     */
    'role'?: string;
    /**
     * The content of the message
     * @type {string}
     * @memberof MessageGetResponseInner
     */
    'content'?: string;
    /**
     * The name of the sender
     * @type {string}
     * @memberof MessageGetResponseInner
     */
    'name'?: string;
    /**
     * The time the message was sent
     * @type {string}
     * @memberof MessageGetResponseInner
     */
    'time'?: string;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    'param': string | null;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    'code': string | null;
}
/**
 *
 * @export
 * @interface OperationResponse
 */
export interface OperationResponse {
    /**
     *
     * @type {boolean}
     * @memberof OperationResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof OperationResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface ScheduleCreateRequest
 */
export interface ScheduleCreateRequest {
    /**
     * Customer this conversation is with
     * @type {string}
     * @memberof ScheduleCreateRequest
     */
    '$customer': string;
    /**
     *
     * @type {any}
     * @memberof ScheduleCreateRequest
     */
    '$business': any | null;
    /**
     * Agent assigned to this conversation
     * @type {string}
     * @memberof ScheduleCreateRequest
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ScheduleCreateRequest
     */
    '$thread': string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ScheduleCreateRequest
     */
    'initialContexts'?: Array<string>;
    /**
     * Environment this conversation is in (phone, web, or email) - this determines which device to send messages to
     * @type {string}
     * @memberof ScheduleCreateRequest
     */
    'environment'?: string;
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof ScheduleCreateRequest
     */
    'scheduled'?: string;
    /**
     * The initial message to send to the customer
     * @type {string}
     * @memberof ScheduleCreateRequest
     */
    'initialMessage'?: string;
    /**
     * The initial message to send to the customer in HTML
     * @type {string}
     * @memberof ScheduleCreateRequest
     */
    'initialMessageHtml'?: string | null;
    /**
     * Whether the initial message has been sent
     * @type {boolean}
     * @memberof ScheduleCreateRequest
     */
    'sent'?: boolean;
    /**
     * Group this conversation is in
     * @type {string}
     * @memberof ScheduleCreateRequest
     */
    '$group'?: string;
}
/**
 *
 * @export
 * @interface ScheduleCreateResponse
 */
export interface ScheduleCreateResponse {
    /**
     *
     * @type {boolean}
     * @memberof ScheduleCreateResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof ScheduleCreateResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface ScheduleGetResponse
 */
export interface ScheduleGetResponse {
    /**
     * Customer this conversation is with
     * @type {string}
     * @memberof ScheduleGetResponse
     */
    '$customer': string;
    /**
     * Business this conversation is with
     * @type {string}
     * @memberof ScheduleGetResponse
     */
    '$business': string;
    /**
     * Agent assigned to this conversation
     * @type {string}
     * @memberof ScheduleGetResponse
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ScheduleGetResponse
     */
    '$thread': string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ScheduleGetResponse
     */
    'initialContexts'?: Array<string>;
    /**
     * Environment this conversation is in (phone, web, or email) - this determines which device to send messages to
     * @type {string}
     * @memberof ScheduleGetResponse
     */
    'environment'?: string;
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof ScheduleGetResponse
     */
    'scheduled'?: string;
    /**
     * The initial message to send to the customer
     * @type {string}
     * @memberof ScheduleGetResponse
     */
    'initialMessage'?: string;
    /**
     * The initial message to send to the customer in HTML
     * @type {string}
     * @memberof ScheduleGetResponse
     */
    'initialMessageHtml'?: string | null;
    /**
     * Whether the initial message has been sent
     * @type {boolean}
     * @memberof ScheduleGetResponse
     */
    'sent'?: boolean;
    /**
     * Group this conversation is in
     * @type {string}
     * @memberof ScheduleGetResponse
     */
    '$group'?: string;
}
/**
 *
 * @export
 * @interface ScheduleGroupCreateRequest
 */
export interface ScheduleGroupCreateRequest {
    /**
     * Customer this conversation is with
     * @type {string}
     * @memberof ScheduleGroupCreateRequest
     */
    '$customer': string;
    /**
     *
     * @type {any}
     * @memberof ScheduleGroupCreateRequest
     */
    '$business': any | null;
    /**
     * Agent assigned to this conversation
     * @type {string}
     * @memberof ScheduleGroupCreateRequest
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ScheduleGroupCreateRequest
     */
    '$thread': string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ScheduleGroupCreateRequest
     */
    'initialContexts'?: Array<string>;
    /**
     * Environment this conversation is in (phone, web, or email) - this determines which device to send messages to
     * @type {string}
     * @memberof ScheduleGroupCreateRequest
     */
    'environment'?: string;
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof ScheduleGroupCreateRequest
     */
    'scheduled'?: string;
    /**
     * The initial message to send to the customer
     * @type {string}
     * @memberof ScheduleGroupCreateRequest
     */
    'initialMessage'?: string;
    /**
     * The initial message to send to the customer in HTML
     * @type {string}
     * @memberof ScheduleGroupCreateRequest
     */
    'initialMessageHtml'?: string | null;
    /**
     * Whether the initial message has been sent
     * @type {boolean}
     * @memberof ScheduleGroupCreateRequest
     */
    'sent'?: boolean;
    /**
     * Group this conversation is in
     * @type {string}
     * @memberof ScheduleGroupCreateRequest
     */
    '$group'?: string;
    /**
     * The delay in miliseconds between each conversation
     * @type {number}
     * @memberof ScheduleGroupCreateRequest
     */
    'delay'?: number;
    /**
     * Customers in this group
     * @type {Array<ScheduledConversationGroupAllOfCustomers>}
     * @memberof ScheduleGroupCreateRequest
     */
    'customers'?: Array<ScheduledConversationGroupAllOfCustomers>;
}
/**
 *
 * @export
 * @interface ScheduleGroupCreateResponse
 */
export interface ScheduleGroupCreateResponse {
    /**
     *
     * @type {boolean}
     * @memberof ScheduleGroupCreateResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof ScheduleGroupCreateResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface ScheduleGroupGetResponse
 */
export interface ScheduleGroupGetResponse {
    /**
     * Customer this conversation is with
     * @type {string}
     * @memberof ScheduleGroupGetResponse
     */
    '$customer': string;
    /**
     * Business this conversation is with
     * @type {string}
     * @memberof ScheduleGroupGetResponse
     */
    '$business': string;
    /**
     * Agent assigned to this conversation
     * @type {string}
     * @memberof ScheduleGroupGetResponse
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ScheduleGroupGetResponse
     */
    '$thread': string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ScheduleGroupGetResponse
     */
    'initialContexts'?: Array<string>;
    /**
     * Environment this conversation is in (phone, web, or email) - this determines which device to send messages to
     * @type {string}
     * @memberof ScheduleGroupGetResponse
     */
    'environment'?: string;
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof ScheduleGroupGetResponse
     */
    'scheduled'?: string;
    /**
     * The initial message to send to the customer
     * @type {string}
     * @memberof ScheduleGroupGetResponse
     */
    'initialMessage'?: string;
    /**
     * The initial message to send to the customer in HTML
     * @type {string}
     * @memberof ScheduleGroupGetResponse
     */
    'initialMessageHtml'?: string | null;
    /**
     * Whether the initial message has been sent
     * @type {boolean}
     * @memberof ScheduleGroupGetResponse
     */
    'sent'?: boolean;
    /**
     * Group this conversation is in
     * @type {string}
     * @memberof ScheduleGroupGetResponse
     */
    '$group'?: string;
    /**
     * The delay in miliseconds between each conversation
     * @type {number}
     * @memberof ScheduleGroupGetResponse
     */
    'delay'?: number;
    /**
     * Customers in this group
     * @type {Array<ScheduledConversationGroupAllOfCustomers>}
     * @memberof ScheduleGroupGetResponse
     */
    'customers'?: Array<ScheduledConversationGroupAllOfCustomers>;
}
/**
 *
 * @export
 * @interface ScheduleGroupRemoveResponse
 */
export interface ScheduleGroupRemoveResponse {
    /**
     *
     * @type {boolean}
     * @memberof ScheduleGroupRemoveResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof ScheduleGroupRemoveResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface ScheduleGroupUpdateRequest
 */
export interface ScheduleGroupUpdateRequest {
    /**
     * Customer this conversation is with
     * @type {string}
     * @memberof ScheduleGroupUpdateRequest
     */
    '$customer': string;
    /**
     * Business this conversation is with
     * @type {string}
     * @memberof ScheduleGroupUpdateRequest
     */
    '$business': string;
    /**
     * Agent assigned to this conversation
     * @type {string}
     * @memberof ScheduleGroupUpdateRequest
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ScheduleGroupUpdateRequest
     */
    '$thread': string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ScheduleGroupUpdateRequest
     */
    'initialContexts'?: Array<string>;
    /**
     * Environment this conversation is in (phone, web, or email) - this determines which device to send messages to
     * @type {string}
     * @memberof ScheduleGroupUpdateRequest
     */
    'environment'?: string;
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof ScheduleGroupUpdateRequest
     */
    'scheduled'?: string;
    /**
     * The initial message to send to the customer
     * @type {string}
     * @memberof ScheduleGroupUpdateRequest
     */
    'initialMessage'?: string;
    /**
     * The initial message to send to the customer in HTML
     * @type {string}
     * @memberof ScheduleGroupUpdateRequest
     */
    'initialMessageHtml'?: string | null;
    /**
     * Whether the initial message has been sent
     * @type {boolean}
     * @memberof ScheduleGroupUpdateRequest
     */
    'sent'?: boolean;
    /**
     * Group this conversation is in
     * @type {string}
     * @memberof ScheduleGroupUpdateRequest
     */
    '$group'?: string;
    /**
     * The delay in miliseconds between each conversation
     * @type {number}
     * @memberof ScheduleGroupUpdateRequest
     */
    'delay'?: number;
    /**
     * Customers in this group
     * @type {Array<ScheduledConversationGroupAllOfCustomers>}
     * @memberof ScheduleGroupUpdateRequest
     */
    'customers'?: Array<ScheduledConversationGroupAllOfCustomers>;
    /**
     * The ID of the scheduled conversation group to update
     * @type {string}
     * @memberof ScheduleGroupUpdateRequest
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface ScheduleGroupUpdateRequestAllOf
 */
export interface ScheduleGroupUpdateRequestAllOf {
    /**
     * The ID of the scheduled conversation group to update
     * @type {string}
     * @memberof ScheduleGroupUpdateRequestAllOf
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface ScheduleGroupUpdateResponse
 */
export interface ScheduleGroupUpdateResponse {
    /**
     *
     * @type {boolean}
     * @memberof ScheduleGroupUpdateResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof ScheduleGroupUpdateResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface ScheduleRemoveResponse
 */
export interface ScheduleRemoveResponse {
    /**
     *
     * @type {boolean}
     * @memberof ScheduleRemoveResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof ScheduleRemoveResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface ScheduleUpdateRequest
 */
export interface ScheduleUpdateRequest {
    /**
     * Customer this conversation is with
     * @type {string}
     * @memberof ScheduleUpdateRequest
     */
    '$customer': string;
    /**
     * Business this conversation is with
     * @type {string}
     * @memberof ScheduleUpdateRequest
     */
    '$business': string;
    /**
     * Agent assigned to this conversation
     * @type {string}
     * @memberof ScheduleUpdateRequest
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ScheduleUpdateRequest
     */
    '$thread': string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ScheduleUpdateRequest
     */
    'initialContexts'?: Array<string>;
    /**
     * Environment this conversation is in (phone, web, or email) - this determines which device to send messages to
     * @type {string}
     * @memberof ScheduleUpdateRequest
     */
    'environment'?: string;
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof ScheduleUpdateRequest
     */
    'scheduled'?: string;
    /**
     * The initial message to send to the customer
     * @type {string}
     * @memberof ScheduleUpdateRequest
     */
    'initialMessage'?: string;
    /**
     * The initial message to send to the customer in HTML
     * @type {string}
     * @memberof ScheduleUpdateRequest
     */
    'initialMessageHtml'?: string | null;
    /**
     * Whether the initial message has been sent
     * @type {boolean}
     * @memberof ScheduleUpdateRequest
     */
    'sent'?: boolean;
    /**
     * Group this conversation is in
     * @type {string}
     * @memberof ScheduleUpdateRequest
     */
    '$group'?: string;
    /**
     * The ID of the scheduled conversation to update
     * @type {string}
     * @memberof ScheduleUpdateRequest
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface ScheduleUpdateRequestAllOf
 */
export interface ScheduleUpdateRequestAllOf {
    /**
     * The ID of the scheduled conversation to update
     * @type {string}
     * @memberof ScheduleUpdateRequestAllOf
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface ScheduleUpdateResponse
 */
export interface ScheduleUpdateResponse {
    /**
     *
     * @type {boolean}
     * @memberof ScheduleUpdateResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof ScheduleUpdateResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface ScheduledConversation
 */
export interface ScheduledConversation {
    /**
     * Customer this conversation is with
     * @type {string}
     * @memberof ScheduledConversation
     */
    '$customer': string;
    /**
     * Business this conversation is with
     * @type {string}
     * @memberof ScheduledConversation
     */
    '$business': string;
    /**
     * Agent assigned to this conversation
     * @type {string}
     * @memberof ScheduledConversation
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ScheduledConversation
     */
    '$thread': string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ScheduledConversation
     */
    'initialContexts'?: Array<string>;
    /**
     * Environment this conversation is in (phone, web, or email) - this determines which device to send messages to
     * @type {string}
     * @memberof ScheduledConversation
     */
    'environment'?: string;
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof ScheduledConversation
     */
    'scheduled'?: string;
    /**
     * The initial message to send to the customer
     * @type {string}
     * @memberof ScheduledConversation
     */
    'initialMessage'?: string;
    /**
     * The initial message to send to the customer in HTML
     * @type {string}
     * @memberof ScheduledConversation
     */
    'initialMessageHtml'?: string | null;
    /**
     * Whether the initial message has been sent
     * @type {boolean}
     * @memberof ScheduledConversation
     */
    'sent'?: boolean;
    /**
     * Group this conversation is in
     * @type {string}
     * @memberof ScheduledConversation
     */
    '$group'?: string;
}
/**
 *
 * @export
 * @interface ScheduledConversationAllOf
 */
export interface ScheduledConversationAllOf {
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof ScheduledConversationAllOf
     */
    'scheduled'?: string;
    /**
     * The initial message to send to the customer
     * @type {string}
     * @memberof ScheduledConversationAllOf
     */
    'initialMessage'?: string;
    /**
     * The initial message to send to the customer in HTML
     * @type {string}
     * @memberof ScheduledConversationAllOf
     */
    'initialMessageHtml'?: string | null;
    /**
     * Whether the initial message has been sent
     * @type {boolean}
     * @memberof ScheduledConversationAllOf
     */
    'sent'?: boolean;
    /**
     * Group this conversation is in
     * @type {string}
     * @memberof ScheduledConversationAllOf
     */
    '$group'?: string;
}
/**
 *
 * @export
 * @interface ScheduledConversationGroup
 */
export interface ScheduledConversationGroup {
    /**
     * Customer this conversation is with
     * @type {string}
     * @memberof ScheduledConversationGroup
     */
    '$customer': string;
    /**
     * Business this conversation is with
     * @type {string}
     * @memberof ScheduledConversationGroup
     */
    '$business': string;
    /**
     * Agent assigned to this conversation
     * @type {string}
     * @memberof ScheduledConversationGroup
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ScheduledConversationGroup
     */
    '$thread': string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ScheduledConversationGroup
     */
    'initialContexts'?: Array<string>;
    /**
     * Environment this conversation is in (phone, web, or email) - this determines which device to send messages to
     * @type {string}
     * @memberof ScheduledConversationGroup
     */
    'environment'?: string;
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof ScheduledConversationGroup
     */
    'scheduled'?: string;
    /**
     * The initial message to send to the customer
     * @type {string}
     * @memberof ScheduledConversationGroup
     */
    'initialMessage'?: string;
    /**
     * The initial message to send to the customer in HTML
     * @type {string}
     * @memberof ScheduledConversationGroup
     */
    'initialMessageHtml'?: string | null;
    /**
     * Whether the initial message has been sent
     * @type {boolean}
     * @memberof ScheduledConversationGroup
     */
    'sent'?: boolean;
    /**
     * Group this conversation is in
     * @type {string}
     * @memberof ScheduledConversationGroup
     */
    '$group'?: string;
    /**
     * The delay in miliseconds between each conversation
     * @type {number}
     * @memberof ScheduledConversationGroup
     */
    'delay'?: number;
    /**
     * Customers in this group
     * @type {Array<ScheduledConversationGroupAllOfCustomers>}
     * @memberof ScheduledConversationGroup
     */
    'customers'?: Array<ScheduledConversationGroupAllOfCustomers>;
}
/**
 *
 * @export
 * @interface ScheduledConversationGroupAllOf
 */
export interface ScheduledConversationGroupAllOf {
    /**
     * The delay in miliseconds between each conversation
     * @type {number}
     * @memberof ScheduledConversationGroupAllOf
     */
    'delay'?: number;
    /**
     * Customers in this group
     * @type {Array<ScheduledConversationGroupAllOfCustomers>}
     * @memberof ScheduledConversationGroupAllOf
     */
    'customers'?: Array<ScheduledConversationGroupAllOfCustomers>;
}
/**
 *
 * @export
 * @interface ScheduledConversationGroupAllOfCustomers
 */
export interface ScheduledConversationGroupAllOfCustomers {
    /**
     * Environment this conversation is in (phone, web, or email) - this determines which device to send messages to
     * @type {string}
     * @memberof ScheduledConversationGroupAllOfCustomers
     */
    'environment'?: string;
    /**
     * Customer ID
     * @type {string}
     * @memberof ScheduledConversationGroupAllOfCustomers
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface UpdateAgentRequest
 */
export interface UpdateAgentRequest {
    /**
     * Agent first name
     * @type {string}
     * @memberof UpdateAgentRequest
     */
    'firstName': string;
    /**
     * Agent last name
     * @type {string}
     * @memberof UpdateAgentRequest
     */
    'lastName': string;
    /**
     * Agent is inactive
     * @type {boolean}
     * @memberof UpdateAgentRequest
     */
    'inactive'?: boolean;
    /**
     * Programmable phone number
     * @type {string}
     * @memberof UpdateAgentRequest
     */
    'programmablePhoneNumber'?: string;
    /**
     * Programmable phone number SID
     * @type {string}
     * @memberof UpdateAgentRequest
     */
    'programmablePhoneNumberSid'?: string;
    /**
     * Email address from Scout9 gmail subdomain
     * @type {string}
     * @memberof UpdateAgentRequest
     */
    'programmableEmail'?: string;
    /**
     * Forward email
     * @type {string}
     * @memberof UpdateAgentRequest
     */
    'forwardEmail'?: string;
    /**
     * Forward phone
     * @type {string}
     * @memberof UpdateAgentRequest
     */
    'forwardPhone': string;
    /**
     * Title of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof UpdateAgentRequest
     */
    'title'?: string;
    /**
     * Context of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof UpdateAgentRequest
     */
    'context'?: string;
    /**
     * Locations ids the agent is included in
     * @type {Array<string>}
     * @memberof UpdateAgentRequest
     */
    'includedLocations'?: Array<string>;
    /**
     * Locations id the agent is excluded from
     * @type {Array<string>}
     * @memberof UpdateAgentRequest
     */
    'excludedLocations'?: Array<string>;
    /**
     * Transcript of the agent
     * @type {string}
     * @memberof UpdateAgentRequest
     */
    'transcript'?: string;
}
/**
 *
 * @export
 * @interface UpdateAgentResponse
 */
export interface UpdateAgentResponse {
    /**
     *
     * @type {boolean}
     * @memberof UpdateAgentResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof UpdateAgentResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface UpdateAgentsRequest
 */
export interface UpdateAgentsRequest {
    /**
     *
     * @type {Array<Agent>}
     * @memberof UpdateAgentsRequest
     */
    'customers'?: Array<Agent>;
}
/**
 *
 * @export
 * @interface UpdateAgentsResponse
 */
export interface UpdateAgentsResponse {
    /**
     *
     * @type {boolean}
     * @memberof UpdateAgentsResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof UpdateAgentsResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface UpdateContextRequest
 */
export interface UpdateContextRequest {
    /**
     * The ID of the context
     * @type {string}
     * @memberof UpdateContextRequest
     */
    '$id': string;
    /**
     * The name of the context
     * @type {string}
     * @memberof UpdateContextRequest
     */
    'name': string;
    /**
     * Whether or not the context is modifiable
     * @type {boolean}
     * @memberof UpdateContextRequest
     */
    'modifiable': boolean;
    /**
     * The description of the context
     * @type {string}
     * @memberof UpdateContextRequest
     */
    'description'?: string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof UpdateContextRequest
     */
    'detection'?: ContextDetectionParams;
    /**
     * The ID column of the context
     * @type {string}
     * @memberof UpdateContextRequest
     */
    'idColumn': string;
    /**
     * The columns of the context
     * @type {Array<string>}
     * @memberof UpdateContextRequest
     */
    'columns': Array<string>;
    /**
     * The required columns of the context
     * @type {Array<string>}
     * @memberof UpdateContextRequest
     */
    'requiredColumns'?: Array<string>;
}
/**
 *
 * @export
 * @interface UpdateContextResponse
 */
export interface UpdateContextResponse {
    /**
     *
     * @type {boolean}
     * @memberof UpdateContextResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof UpdateContextResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface UpdateContextsRequest
 */
export interface UpdateContextsRequest {
    /**
     *
     * @type {Array<Context>}
     * @memberof UpdateContextsRequest
     */
    'customers'?: Array<Context>;
}
/**
 *
 * @export
 * @interface UpdateContextsResponse
 */
export interface UpdateContextsResponse {
    /**
     *
     * @type {boolean}
     * @memberof UpdateContextsResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof UpdateContextsResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface UpdateCustomerRequest
 */
export interface UpdateCustomerRequest {
    /**
     * The customers first name
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'firstName'?: string;
    /**
     * The customers last name
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'lastName'?: string;
    /**
     * The customers full name
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'name'?: string;
    /**
     * The customers email address
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'email'?: string | null;
    /**
     * The customers phone number
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'phone'?: string | null;
    /**
     * The customers profile image
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'img'?: string | null;
    /**
     * The customers neighborhood
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'neighborhood'?: string | null;
    /**
     * The customers city
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'city'?: string | null;
    /**
     * The customers 2-letter country code
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'country'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'line1'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'line2'?: string | null;
    /**
     * The customers postal code
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'postal_code'?: string | null;
    /**
     * The customers state, county, province, or region
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'state'?: string | null;
    /**
     * The customers town (only used in Japan)
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'town'?: string | null;
    /**
     *
     * @type {BlockInfo}
     * @memberof UpdateCustomerRequest
     */
    'blocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof UpdateCustomerRequest
     */
    'phoneBlocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof UpdateCustomerRequest
     */
    'emailBlocked'?: BlockInfo;
    /**
     * The date the customer joined the business
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'joined'?: string | null;
    /**
     * The customers stripe ID
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'stripe'?: string | null;
    /**
     * The customers stripe ID in the dev environment
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'stripeDev'?: string | null;
}
/**
 *
 * @export
 * @interface UpdateCustomerResponse
 */
export interface UpdateCustomerResponse {
    /**
     *
     * @type {boolean}
     * @memberof UpdateCustomerResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof UpdateCustomerResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface UpdateCustomersRequest
 */
export interface UpdateCustomersRequest {
    /**
     *
     * @type {Array<Customer>}
     * @memberof UpdateCustomersRequest
     */
    'customers'?: Array<Customer>;
}
/**
 *
 * @export
 * @interface UpdateCustomersResponse
 */
export interface UpdateCustomersResponse {
    /**
     *
     * @type {boolean}
     * @memberof UpdateCustomersResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof UpdateCustomersResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface UpdateWorkflowRequest
 */
export interface UpdateWorkflowRequest {
    /**
     * The name of the workflow
     * @type {string}
     * @memberof UpdateWorkflowRequest
     */
    'name': string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof UpdateWorkflowRequest
     */
    'initiators': ContextDetectionParams;
    /**
     * The fields of the workflow
     * @type {Array<ConversationContextField>}
     * @memberof UpdateWorkflowRequest
     */
    'fields': Array<ConversationContextField>;
    /**
     * About this conversation - used as initial context
     * @type {string}
     * @memberof UpdateWorkflowRequest
     */
    'context': string;
    /**
     * The webhook to call when a workflow is created
     * @type {string}
     * @memberof UpdateWorkflowRequest
     */
    'onCreated'?: string;
    /**
     * The webhook to call when a workflow is updated
     * @type {string}
     * @memberof UpdateWorkflowRequest
     */
    'onUpdated'?: string;
    /**
     * The webhook to call when a workflow is deleted
     * @type {string}
     * @memberof UpdateWorkflowRequest
     */
    'onDeleted'?: string;
    /**
     * The webhook to call when a workflow has an error
     * @type {string}
     * @memberof UpdateWorkflowRequest
     */
    'onError'?: string;
}
/**
 *
 * @export
 * @interface UpdateWorkflowResponse
 */
export interface UpdateWorkflowResponse {
    /**
     *
     * @type {boolean}
     * @memberof UpdateWorkflowResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof UpdateWorkflowResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface UpdateWorkflowsRequest
 */
export interface UpdateWorkflowsRequest {
    /**
     *
     * @type {Array<Workflow>}
     * @memberof UpdateWorkflowsRequest
     */
    'customers'?: Array<Workflow>;
}
/**
 *
 * @export
 * @interface UpdateWorkflowsResponse
 */
export interface UpdateWorkflowsResponse {
    /**
     *
     * @type {boolean}
     * @memberof UpdateWorkflowsResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof UpdateWorkflowsResponse
     */
    'error'?: Error;
}
/**
 *
 * @export
 * @interface Workflow
 */
export interface Workflow {
    /**
     * The name of the workflow
     * @type {string}
     * @memberof Workflow
     */
    'name': string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof Workflow
     */
    'initiators': ContextDetectionParams;
    /**
     * The fields of the workflow
     * @type {Array<ConversationContextField>}
     * @memberof Workflow
     */
    'fields': Array<ConversationContextField>;
    /**
     * About this conversation - used as initial context
     * @type {string}
     * @memberof Workflow
     */
    'context': string;
    /**
     * The webhook to call when a workflow is created
     * @type {string}
     * @memberof Workflow
     */
    'onCreated'?: string;
    /**
     * The webhook to call when a workflow is updated
     * @type {string}
     * @memberof Workflow
     */
    'onUpdated'?: string;
    /**
     * The webhook to call when a workflow is deleted
     * @type {string}
     * @memberof Workflow
     */
    'onDeleted'?: string;
    /**
     * The webhook to call when a workflow has an error
     * @type {string}
     * @memberof Workflow
     */
    'onError'?: string;
}
/**
 * Scout9Api - axios parameter creator
 * @export
 */
export declare const Scout9ApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a new agent
     * @param {CreateAgentRequest} createAgentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgent: (createAgentRequest: CreateAgentRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates new agents
     * @param {CreateAgentsRequest} createAgentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgents: (createAgentsRequest: CreateAgentsRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new context
     * @param {CreateContextRequest} createContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContext: (createContextRequest: CreateContextRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates new contexts
     * @param {CreateContextsRequest} createContextsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContexts: (createContextsRequest: CreateContextsRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new conversation
     * @param {ConversationCreateRequest} conversationCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversation: (conversationCreateRequest: ConversationCreateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new customer
     * @param {CreateCustomerRequest} createCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer: (createCustomerRequest: CreateCustomerRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates new customers
     * @param {CreateCustomersRequest} createCustomersRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomers: (createCustomersRequest: CreateCustomersRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create and send message
     * @param {MessageCreateRequest} messageCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessage: (messageCreateRequest: MessageCreateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new scheduled conversation
     * @param {ScheduleCreateRequest} scheduleCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSchedule: (scheduleCreateRequest: ScheduleCreateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new schedule group
     * @param {ScheduleGroupCreateRequest} scheduleGroupCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScheduleGroup: (scheduleGroupCreateRequest: ScheduleGroupCreateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new workflow
     * @param {CreateWorkflowRequest} createWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflow: (createWorkflowRequest: CreateWorkflowRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates new workflows
     * @param {CreateWorkflowsRequest} createWorkflowsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflows: (createWorkflowsRequest: CreateWorkflowsRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a agent
     * @param {string} id Agent ID to delete agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgent: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes multiple agents
     * @param {string} id Agent IDs to delete multiple agents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgents: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id Context ID to delete context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContext: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes multiple contexts
     * @param {string} id Context IDs to delete multiple context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContexts: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id Schedule ID to delete schedule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversation: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a customer
     * @param {string} id Customer ID to delete customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomer: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes multiple customers
     * @param {string} id Customer IDs to delete multiple customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomers: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id Schedule ID to delete schedule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSchedule: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a schedule group
     * @param {string} id Schedule group ID to delete schedule group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScheduleGroup: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a workflow
     * @param {string} id workflow ID to delete workflow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkflow: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes multiple workflows
     * @param {string} id Workflow IDs to delete multiple workflow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkflows: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Generate a message from conversation
     * @param {GenerateRequest} generateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generate: (generateRequest: GenerateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets a agent
     * @param {string} id Agent ID to get agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgent: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets all or specific set of agents
     * @param {string} [id] Optional get specific agents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgents: (id?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets a context
     * @param {string} id Context ID to get context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContext: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets all or specific set of contexts
     * @param {string} [id] Optional get specific contexts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContexts: (id?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets a conversation
     * @param {string} id Conversation ID to get conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversation: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets a customer
     * @param {string} id Customer ID to get customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomer: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets all or specific set of customers
     * @param {string} [id] Optional get specific customers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomers: (id?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all messages from a conversation
     * @param {string} id Conversation ID to get messages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets a schedule
     * @param {string} id Schedule ID to get schedule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSchedule: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets a schedule group
     * @param {string} id Schedule group ID to get schedule group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScheduleGroup: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets a workflow
     * @param {string} id Workflow ID to get workflow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflow: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets all or specific set of workflows
     * @param {string} [id] Optional get specific workflows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflows: (id?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a agent
     * @param {UpdateAgentRequest} updateAgentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgent: (updateAgentRequest: UpdateAgentRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates multiple agents
     * @param {UpdateAgentsRequest} updateAgentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgents: (updateAgentsRequest: UpdateAgentsRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a context
     * @param {UpdateContextRequest} updateContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContext: (updateContextRequest: UpdateContextRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates multiple contexts
     * @param {UpdateContextRequest} updateContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContexts: (updateContextRequest: UpdateContextRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a conversation
     * @param {ConversationUpdateRequest} conversationUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversation: (conversationUpdateRequest: ConversationUpdateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a customer
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomer: (updateCustomerRequest: UpdateCustomerRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates multiple customers
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomers: (updateCustomerRequest: UpdateCustomerRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a schedule
     * @param {ScheduleUpdateRequest} scheduleUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSchedule: (scheduleUpdateRequest: ScheduleUpdateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a schedule group
     * @param {ScheduleGroupUpdateRequest} scheduleGroupUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScheduleGroup: (scheduleGroupUpdateRequest: ScheduleGroupUpdateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a workflow
     * @param {UpdateWorkflowRequest} updateWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkflow: (updateWorkflowRequest: UpdateWorkflowRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates multiple workflows
     * @param {UpdateWorkflowRequest} updateWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkflows: (updateWorkflowRequest: UpdateWorkflowRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * Scout9Api - functional programming interface
 * @export
 */
export declare const Scout9ApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a new agent
     * @param {CreateAgentRequest} createAgentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgent(createAgentRequest: CreateAgentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAgentResponse>>;
    /**
     *
     * @summary Creates new agents
     * @param {CreateAgentsRequest} createAgentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgents(createAgentsRequest: CreateAgentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAgentsResponse>>;
    /**
     *
     * @summary Create a new context
     * @param {CreateContextRequest} createContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContext(createContextRequest: CreateContextRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateContextResponse>>;
    /**
     *
     * @summary Creates new contexts
     * @param {CreateContextsRequest} createContextsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContexts(createContextsRequest: CreateContextsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateContextsResponse>>;
    /**
     *
     * @summary Create a new conversation
     * @param {ConversationCreateRequest} conversationCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversation(conversationCreateRequest: ConversationCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationCreateResponse>>;
    /**
     *
     * @summary Creates a new customer
     * @param {CreateCustomerRequest} createCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer(createCustomerRequest: CreateCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCustomerResponse>>;
    /**
     *
     * @summary Creates new customers
     * @param {CreateCustomersRequest} createCustomersRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomers(createCustomersRequest: CreateCustomersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCustomersResponse>>;
    /**
     *
     * @summary Create and send message
     * @param {MessageCreateRequest} messageCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessage(messageCreateRequest: MessageCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageCreateResponse>>;
    /**
     *
     * @summary Creates a new scheduled conversation
     * @param {ScheduleCreateRequest} scheduleCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSchedule(scheduleCreateRequest: ScheduleCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleCreateResponse>>;
    /**
     *
     * @summary Creates a new schedule group
     * @param {ScheduleGroupCreateRequest} scheduleGroupCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScheduleGroup(scheduleGroupCreateRequest: ScheduleGroupCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleGroupCreateResponse>>;
    /**
     *
     * @summary Create a new workflow
     * @param {CreateWorkflowRequest} createWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflow(createWorkflowRequest: CreateWorkflowRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWorkflowResponse>>;
    /**
     *
     * @summary Creates new workflows
     * @param {CreateWorkflowsRequest} createWorkflowsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflows(createWorkflowsRequest: CreateWorkflowsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWorkflowsResponse>>;
    /**
     *
     * @summary Deletes a agent
     * @param {string} id Agent ID to delete agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgent(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAgentResponse>>;
    /**
     *
     * @summary Deletes multiple agents
     * @param {string} id Agent IDs to delete multiple agents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgents(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAgentsResponse>>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id Context ID to delete context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContext(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteContextResponse>>;
    /**
     *
     * @summary Deletes multiple contexts
     * @param {string} id Context IDs to delete multiple context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContexts(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteContextsResponse>>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id Schedule ID to delete schedule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversation(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationRemoveResponse>>;
    /**
     *
     * @summary Deletes a customer
     * @param {string} id Customer ID to delete customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCustomerResponse>>;
    /**
     *
     * @summary Deletes multiple customers
     * @param {string} id Customer IDs to delete multiple customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomers(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCustomersResponse>>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id Schedule ID to delete schedule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSchedule(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleRemoveResponse>>;
    /**
     *
     * @summary Deletes a schedule group
     * @param {string} id Schedule group ID to delete schedule group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScheduleGroup(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleGroupRemoveResponse>>;
    /**
     *
     * @summary Deletes a workflow
     * @param {string} id workflow ID to delete workflow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkflow(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteWorkflowResponse>>;
    /**
     *
     * @summary Deletes multiple workflows
     * @param {string} id Workflow IDs to delete multiple workflow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkflows(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteWorkflowsResponse>>;
    /**
     *
     * @summary Generate a message from conversation
     * @param {GenerateRequest} generateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generate(generateRequest: GenerateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateResponse>>;
    /**
     *
     * @summary Gets a agent
     * @param {string} id Agent ID to get agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgent(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAgentResponse>>;
    /**
     *
     * @summary Gets all or specific set of agents
     * @param {string} [id] Optional get specific agents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgents(id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Agent>>>;
    /**
     *
     * @summary Gets a context
     * @param {string} id Context ID to get context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContext(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContextResponse>>;
    /**
     *
     * @summary Gets all or specific set of contexts
     * @param {string} [id] Optional get specific contexts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContexts(id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Context>>>;
    /**
     *
     * @summary Gets a conversation
     * @param {string} id Conversation ID to get conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversation(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationGetResponse>>;
    /**
     *
     * @summary Gets a customer
     * @param {string} id Customer ID to get customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCustomerRequest>>;
    /**
     *
     * @summary Gets all or specific set of customers
     * @param {string} [id] Optional get specific customers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomers(id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Customer>>>;
    /**
     *
     * @summary Get all messages from a conversation
     * @param {string} id Conversation ID to get messages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MessageGetResponseInner>>>;
    /**
     *
     * @summary Gets a schedule
     * @param {string} id Schedule ID to get schedule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSchedule(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleCreateResponse>>;
    /**
     *
     * @summary Gets a schedule group
     * @param {string} id Schedule group ID to get schedule group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScheduleGroup(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleGroupGetResponse>>;
    /**
     *
     * @summary Gets a workflow
     * @param {string} id Workflow ID to get workflow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflow(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWorkflowResponse>>;
    /**
     *
     * @summary Gets all or specific set of workflows
     * @param {string} [id] Optional get specific workflows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflows(id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Workflow>>>;
    /**
     *
     * @summary Update a agent
     * @param {UpdateAgentRequest} updateAgentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgent(updateAgentRequest: UpdateAgentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAgentResponse>>;
    /**
     *
     * @summary Updates multiple agents
     * @param {UpdateAgentsRequest} updateAgentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgents(updateAgentsRequest: UpdateAgentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAgentsResponse>>;
    /**
     *
     * @summary Update a context
     * @param {UpdateContextRequest} updateContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContext(updateContextRequest: UpdateContextRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateContextResponse>>;
    /**
     *
     * @summary Updates multiple contexts
     * @param {UpdateContextRequest} updateContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContexts(updateContextRequest: UpdateContextRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateContextsResponse>>;
    /**
     *
     * @summary Update a conversation
     * @param {ConversationUpdateRequest} conversationUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversation(conversationUpdateRequest: ConversationUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationUpdateResponse>>;
    /**
     *
     * @summary Updates a customer
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomer(updateCustomerRequest: UpdateCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCustomerResponse>>;
    /**
     *
     * @summary Updates multiple customers
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomers(updateCustomerRequest: UpdateCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCustomersResponse>>;
    /**
     *
     * @summary Updates a schedule
     * @param {ScheduleUpdateRequest} scheduleUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSchedule(scheduleUpdateRequest: ScheduleUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleUpdateResponse>>;
    /**
     *
     * @summary Updates a schedule group
     * @param {ScheduleGroupUpdateRequest} scheduleGroupUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScheduleGroup(scheduleGroupUpdateRequest: ScheduleGroupUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleGroupUpdateResponse>>;
    /**
     *
     * @summary Update a workflow
     * @param {UpdateWorkflowRequest} updateWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkflow(updateWorkflowRequest: UpdateWorkflowRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateWorkflowResponse>>;
    /**
     *
     * @summary Updates multiple workflows
     * @param {UpdateWorkflowRequest} updateWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkflows(updateWorkflowRequest: UpdateWorkflowRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateWorkflowsResponse>>;
};
/**
 * Scout9Api - factory interface
 * @export
 */
export declare const Scout9ApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a new agent
     * @param {CreateAgentRequest} createAgentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgent(createAgentRequest: CreateAgentRequest, options?: any): AxiosPromise<CreateAgentResponse>;
    /**
     *
     * @summary Creates new agents
     * @param {CreateAgentsRequest} createAgentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgents(createAgentsRequest: CreateAgentsRequest, options?: any): AxiosPromise<CreateAgentsResponse>;
    /**
     *
     * @summary Create a new context
     * @param {CreateContextRequest} createContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContext(createContextRequest: CreateContextRequest, options?: any): AxiosPromise<CreateContextResponse>;
    /**
     *
     * @summary Creates new contexts
     * @param {CreateContextsRequest} createContextsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContexts(createContextsRequest: CreateContextsRequest, options?: any): AxiosPromise<CreateContextsResponse>;
    /**
     *
     * @summary Create a new conversation
     * @param {ConversationCreateRequest} conversationCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversation(conversationCreateRequest: ConversationCreateRequest, options?: any): AxiosPromise<ConversationCreateResponse>;
    /**
     *
     * @summary Creates a new customer
     * @param {CreateCustomerRequest} createCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer(createCustomerRequest: CreateCustomerRequest, options?: any): AxiosPromise<CreateCustomerResponse>;
    /**
     *
     * @summary Creates new customers
     * @param {CreateCustomersRequest} createCustomersRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomers(createCustomersRequest: CreateCustomersRequest, options?: any): AxiosPromise<CreateCustomersResponse>;
    /**
     *
     * @summary Create and send message
     * @param {MessageCreateRequest} messageCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessage(messageCreateRequest: MessageCreateRequest, options?: any): AxiosPromise<MessageCreateResponse>;
    /**
     *
     * @summary Creates a new scheduled conversation
     * @param {ScheduleCreateRequest} scheduleCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSchedule(scheduleCreateRequest: ScheduleCreateRequest, options?: any): AxiosPromise<ScheduleCreateResponse>;
    /**
     *
     * @summary Creates a new schedule group
     * @param {ScheduleGroupCreateRequest} scheduleGroupCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScheduleGroup(scheduleGroupCreateRequest: ScheduleGroupCreateRequest, options?: any): AxiosPromise<ScheduleGroupCreateResponse>;
    /**
     *
     * @summary Create a new workflow
     * @param {CreateWorkflowRequest} createWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflow(createWorkflowRequest: CreateWorkflowRequest, options?: any): AxiosPromise<CreateWorkflowResponse>;
    /**
     *
     * @summary Creates new workflows
     * @param {CreateWorkflowsRequest} createWorkflowsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflows(createWorkflowsRequest: CreateWorkflowsRequest, options?: any): AxiosPromise<CreateWorkflowsResponse>;
    /**
     *
     * @summary Deletes a agent
     * @param {string} id Agent ID to delete agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgent(id: string, options?: any): AxiosPromise<DeleteAgentResponse>;
    /**
     *
     * @summary Deletes multiple agents
     * @param {string} id Agent IDs to delete multiple agents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgents(id: string, options?: any): AxiosPromise<DeleteAgentsResponse>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id Context ID to delete context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContext(id: string, options?: any): AxiosPromise<DeleteContextResponse>;
    /**
     *
     * @summary Deletes multiple contexts
     * @param {string} id Context IDs to delete multiple context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContexts(id: string, options?: any): AxiosPromise<DeleteContextsResponse>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id Schedule ID to delete schedule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversation(id: string, options?: any): AxiosPromise<ConversationRemoveResponse>;
    /**
     *
     * @summary Deletes a customer
     * @param {string} id Customer ID to delete customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomer(id: string, options?: any): AxiosPromise<DeleteCustomerResponse>;
    /**
     *
     * @summary Deletes multiple customers
     * @param {string} id Customer IDs to delete multiple customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomers(id: string, options?: any): AxiosPromise<DeleteCustomersResponse>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id Schedule ID to delete schedule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSchedule(id: string, options?: any): AxiosPromise<ScheduleRemoveResponse>;
    /**
     *
     * @summary Deletes a schedule group
     * @param {string} id Schedule group ID to delete schedule group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScheduleGroup(id: string, options?: any): AxiosPromise<ScheduleGroupRemoveResponse>;
    /**
     *
     * @summary Deletes a workflow
     * @param {string} id workflow ID to delete workflow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkflow(id: string, options?: any): AxiosPromise<DeleteWorkflowResponse>;
    /**
     *
     * @summary Deletes multiple workflows
     * @param {string} id Workflow IDs to delete multiple workflow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkflows(id: string, options?: any): AxiosPromise<DeleteWorkflowsResponse>;
    /**
     *
     * @summary Generate a message from conversation
     * @param {GenerateRequest} generateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generate(generateRequest: GenerateRequest, options?: any): AxiosPromise<GenerateResponse>;
    /**
     *
     * @summary Gets a agent
     * @param {string} id Agent ID to get agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgent(id: string, options?: any): AxiosPromise<GetAgentResponse>;
    /**
     *
     * @summary Gets all or specific set of agents
     * @param {string} [id] Optional get specific agents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgents(id?: string, options?: any): AxiosPromise<Array<Agent>>;
    /**
     *
     * @summary Gets a context
     * @param {string} id Context ID to get context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContext(id: string, options?: any): AxiosPromise<GetContextResponse>;
    /**
     *
     * @summary Gets all or specific set of contexts
     * @param {string} [id] Optional get specific contexts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContexts(id?: string, options?: any): AxiosPromise<Array<Context>>;
    /**
     *
     * @summary Gets a conversation
     * @param {string} id Conversation ID to get conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversation(id: string, options?: any): AxiosPromise<ConversationGetResponse>;
    /**
     *
     * @summary Gets a customer
     * @param {string} id Customer ID to get customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomer(id: string, options?: any): AxiosPromise<CreateCustomerRequest>;
    /**
     *
     * @summary Gets all or specific set of customers
     * @param {string} [id] Optional get specific customers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomers(id?: string, options?: any): AxiosPromise<Array<Customer>>;
    /**
     *
     * @summary Get all messages from a conversation
     * @param {string} id Conversation ID to get messages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage(id: string, options?: any): AxiosPromise<Array<MessageGetResponseInner>>;
    /**
     *
     * @summary Gets a schedule
     * @param {string} id Schedule ID to get schedule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSchedule(id: string, options?: any): AxiosPromise<ScheduleCreateResponse>;
    /**
     *
     * @summary Gets a schedule group
     * @param {string} id Schedule group ID to get schedule group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScheduleGroup(id: string, options?: any): AxiosPromise<ScheduleGroupGetResponse>;
    /**
     *
     * @summary Gets a workflow
     * @param {string} id Workflow ID to get workflow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflow(id: string, options?: any): AxiosPromise<GetWorkflowResponse>;
    /**
     *
     * @summary Gets all or specific set of workflows
     * @param {string} [id] Optional get specific workflows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflows(id?: string, options?: any): AxiosPromise<Array<Workflow>>;
    /**
     *
     * @summary Update a agent
     * @param {UpdateAgentRequest} updateAgentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgent(updateAgentRequest: UpdateAgentRequest, options?: any): AxiosPromise<UpdateAgentResponse>;
    /**
     *
     * @summary Updates multiple agents
     * @param {UpdateAgentsRequest} updateAgentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgents(updateAgentsRequest: UpdateAgentsRequest, options?: any): AxiosPromise<UpdateAgentsResponse>;
    /**
     *
     * @summary Update a context
     * @param {UpdateContextRequest} updateContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContext(updateContextRequest: UpdateContextRequest, options?: any): AxiosPromise<UpdateContextResponse>;
    /**
     *
     * @summary Updates multiple contexts
     * @param {UpdateContextRequest} updateContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContexts(updateContextRequest: UpdateContextRequest, options?: any): AxiosPromise<UpdateContextsResponse>;
    /**
     *
     * @summary Update a conversation
     * @param {ConversationUpdateRequest} conversationUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversation(conversationUpdateRequest: ConversationUpdateRequest, options?: any): AxiosPromise<ConversationUpdateResponse>;
    /**
     *
     * @summary Updates a customer
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomer(updateCustomerRequest: UpdateCustomerRequest, options?: any): AxiosPromise<UpdateCustomerResponse>;
    /**
     *
     * @summary Updates multiple customers
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomers(updateCustomerRequest: UpdateCustomerRequest, options?: any): AxiosPromise<UpdateCustomersResponse>;
    /**
     *
     * @summary Updates a schedule
     * @param {ScheduleUpdateRequest} scheduleUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSchedule(scheduleUpdateRequest: ScheduleUpdateRequest, options?: any): AxiosPromise<ScheduleUpdateResponse>;
    /**
     *
     * @summary Updates a schedule group
     * @param {ScheduleGroupUpdateRequest} scheduleGroupUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScheduleGroup(scheduleGroupUpdateRequest: ScheduleGroupUpdateRequest, options?: any): AxiosPromise<ScheduleGroupUpdateResponse>;
    /**
     *
     * @summary Update a workflow
     * @param {UpdateWorkflowRequest} updateWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkflow(updateWorkflowRequest: UpdateWorkflowRequest, options?: any): AxiosPromise<UpdateWorkflowResponse>;
    /**
     *
     * @summary Updates multiple workflows
     * @param {UpdateWorkflowRequest} updateWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkflows(updateWorkflowRequest: UpdateWorkflowRequest, options?: any): AxiosPromise<UpdateWorkflowsResponse>;
};
/**
 * Scout9Api - object-oriented interface
 * @export
 * @class Scout9Api
 * @extends {BaseAPI}
 */
export declare class Scout9Api extends BaseAPI {
    /**
     *
     * @summary Create a new agent
     * @param {CreateAgentRequest} createAgentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createAgent(createAgentRequest: CreateAgentRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateAgentResponse, any>>;
    /**
     *
     * @summary Creates new agents
     * @param {CreateAgentsRequest} createAgentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createAgents(createAgentsRequest: CreateAgentsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateAgentsResponse, any>>;
    /**
     *
     * @summary Create a new context
     * @param {CreateContextRequest} createContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createContext(createContextRequest: CreateContextRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateContextResponse, any>>;
    /**
     *
     * @summary Creates new contexts
     * @param {CreateContextsRequest} createContextsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createContexts(createContextsRequest: CreateContextsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateContextsResponse, any>>;
    /**
     *
     * @summary Create a new conversation
     * @param {ConversationCreateRequest} conversationCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createConversation(conversationCreateRequest: ConversationCreateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConversationCreateResponse, any>>;
    /**
     *
     * @summary Creates a new customer
     * @param {CreateCustomerRequest} createCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createCustomer(createCustomerRequest: CreateCustomerRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateCustomerResponse, any>>;
    /**
     *
     * @summary Creates new customers
     * @param {CreateCustomersRequest} createCustomersRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createCustomers(createCustomersRequest: CreateCustomersRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateCustomersResponse, any>>;
    /**
     *
     * @summary Create and send message
     * @param {MessageCreateRequest} messageCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createMessage(messageCreateRequest: MessageCreateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MessageCreateResponse, any>>;
    /**
     *
     * @summary Creates a new scheduled conversation
     * @param {ScheduleCreateRequest} scheduleCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createSchedule(scheduleCreateRequest: ScheduleCreateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleCreateResponse, any>>;
    /**
     *
     * @summary Creates a new schedule group
     * @param {ScheduleGroupCreateRequest} scheduleGroupCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createScheduleGroup(scheduleGroupCreateRequest: ScheduleGroupCreateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleGroupCreateResponse, any>>;
    /**
     *
     * @summary Create a new workflow
     * @param {CreateWorkflowRequest} createWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createWorkflow(createWorkflowRequest: CreateWorkflowRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateWorkflowResponse, any>>;
    /**
     *
     * @summary Creates new workflows
     * @param {CreateWorkflowsRequest} createWorkflowsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    createWorkflows(createWorkflowsRequest: CreateWorkflowsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateWorkflowsResponse, any>>;
    /**
     *
     * @summary Deletes a agent
     * @param {string} id Agent ID to delete agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteAgent(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteAgentResponse, any>>;
    /**
     *
     * @summary Deletes multiple agents
     * @param {string} id Agent IDs to delete multiple agents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteAgents(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteAgentsResponse, any>>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id Context ID to delete context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteContext(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteContextResponse, any>>;
    /**
     *
     * @summary Deletes multiple contexts
     * @param {string} id Context IDs to delete multiple context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteContexts(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteContextsResponse, any>>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id Schedule ID to delete schedule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteConversation(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConversationRemoveResponse, any>>;
    /**
     *
     * @summary Deletes a customer
     * @param {string} id Customer ID to delete customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteCustomer(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteCustomerResponse, any>>;
    /**
     *
     * @summary Deletes multiple customers
     * @param {string} id Customer IDs to delete multiple customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteCustomers(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteCustomersResponse, any>>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id Schedule ID to delete schedule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteSchedule(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleRemoveResponse, any>>;
    /**
     *
     * @summary Deletes a schedule group
     * @param {string} id Schedule group ID to delete schedule group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteScheduleGroup(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleGroupRemoveResponse, any>>;
    /**
     *
     * @summary Deletes a workflow
     * @param {string} id workflow ID to delete workflow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteWorkflow(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteWorkflowResponse, any>>;
    /**
     *
     * @summary Deletes multiple workflows
     * @param {string} id Workflow IDs to delete multiple workflow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    deleteWorkflows(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteWorkflowsResponse, any>>;
    /**
     *
     * @summary Generate a message from conversation
     * @param {GenerateRequest} generateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    generate(generateRequest: GenerateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GenerateResponse, any>>;
    /**
     *
     * @summary Gets a agent
     * @param {string} id Agent ID to get agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getAgent(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetAgentResponse, any>>;
    /**
     *
     * @summary Gets all or specific set of agents
     * @param {string} [id] Optional get specific agents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getAgents(id?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Agent[], any>>;
    /**
     *
     * @summary Gets a context
     * @param {string} id Context ID to get context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getContext(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetContextResponse, any>>;
    /**
     *
     * @summary Gets all or specific set of contexts
     * @param {string} [id] Optional get specific contexts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getContexts(id?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Context[], any>>;
    /**
     *
     * @summary Gets a conversation
     * @param {string} id Conversation ID to get conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getConversation(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConversationGetResponse, any>>;
    /**
     *
     * @summary Gets a customer
     * @param {string} id Customer ID to get customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getCustomer(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateCustomerRequest, any>>;
    /**
     *
     * @summary Gets all or specific set of customers
     * @param {string} [id] Optional get specific customers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getCustomers(id?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Customer[], any>>;
    /**
     *
     * @summary Get all messages from a conversation
     * @param {string} id Conversation ID to get messages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getMessage(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MessageGetResponseInner[], any>>;
    /**
     *
     * @summary Gets a schedule
     * @param {string} id Schedule ID to get schedule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getSchedule(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleCreateResponse, any>>;
    /**
     *
     * @summary Gets a schedule group
     * @param {string} id Schedule group ID to get schedule group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getScheduleGroup(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleGroupGetResponse, any>>;
    /**
     *
     * @summary Gets a workflow
     * @param {string} id Workflow ID to get workflow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getWorkflow(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetWorkflowResponse, any>>;
    /**
     *
     * @summary Gets all or specific set of workflows
     * @param {string} [id] Optional get specific workflows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    getWorkflows(id?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Workflow[], any>>;
    /**
     *
     * @summary Update a agent
     * @param {UpdateAgentRequest} updateAgentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateAgent(updateAgentRequest: UpdateAgentRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateAgentResponse, any>>;
    /**
     *
     * @summary Updates multiple agents
     * @param {UpdateAgentsRequest} updateAgentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateAgents(updateAgentsRequest: UpdateAgentsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateAgentsResponse, any>>;
    /**
     *
     * @summary Update a context
     * @param {UpdateContextRequest} updateContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateContext(updateContextRequest: UpdateContextRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateContextResponse, any>>;
    /**
     *
     * @summary Updates multiple contexts
     * @param {UpdateContextRequest} updateContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateContexts(updateContextRequest: UpdateContextRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateContextsResponse, any>>;
    /**
     *
     * @summary Update a conversation
     * @param {ConversationUpdateRequest} conversationUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateConversation(conversationUpdateRequest: ConversationUpdateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConversationUpdateResponse, any>>;
    /**
     *
     * @summary Updates a customer
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateCustomer(updateCustomerRequest: UpdateCustomerRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateCustomerResponse, any>>;
    /**
     *
     * @summary Updates multiple customers
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateCustomers(updateCustomerRequest: UpdateCustomerRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateCustomersResponse, any>>;
    /**
     *
     * @summary Updates a schedule
     * @param {ScheduleUpdateRequest} scheduleUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateSchedule(scheduleUpdateRequest: ScheduleUpdateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleUpdateResponse, any>>;
    /**
     *
     * @summary Updates a schedule group
     * @param {ScheduleGroupUpdateRequest} scheduleGroupUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateScheduleGroup(scheduleGroupUpdateRequest: ScheduleGroupUpdateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleGroupUpdateResponse, any>>;
    /**
     *
     * @summary Update a workflow
     * @param {UpdateWorkflowRequest} updateWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateWorkflow(updateWorkflowRequest: UpdateWorkflowRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateWorkflowResponse, any>>;
    /**
     *
     * @summary Updates multiple workflows
     * @param {UpdateWorkflowRequest} updateWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    updateWorkflows(updateWorkflowRequest: UpdateWorkflowRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateWorkflowsResponse, any>>;
}
