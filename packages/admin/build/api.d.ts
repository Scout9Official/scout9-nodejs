/**
 * Scout9 Pocket Scout API
 * Pocket Scout APIs for managing Scout9 users and conversations with your Pocket Scout agents
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface Agent
 */
export interface Agent {
    /**
     * Agent first name
     * @type {string}
     * @memberof Agent
     */
    'firstName': string;
    /**
     * Agent last name
     * @type {string}
     * @memberof Agent
     */
    'lastName': string;
    /**
     * Agent is inactive
     * @type {boolean}
     * @memberof Agent
     */
    'inactive'?: boolean;
    /**
     * Programmable phone number
     * @type {string}
     * @memberof Agent
     */
    'programmablePhoneNumber'?: string;
    /**
     * Programmable phone number SID
     * @type {string}
     * @memberof Agent
     */
    'programmablePhoneNumberSid'?: string;
    /**
     * Email address from Scout9 gmail subdomain
     * @type {string}
     * @memberof Agent
     */
    'programmableEmail'?: string;
    /**
     * Forward email
     * @type {string}
     * @memberof Agent
     */
    'forwardEmail'?: string;
    /**
     * Forward phone
     * @type {string}
     * @memberof Agent
     */
    'forwardPhone': string;
    /**
     * Title of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof Agent
     */
    'title'?: string;
    /**
     * Context of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof Agent
     */
    'context'?: string;
    /**
     * Locations ids the agent is included in
     * @type {Array<string>}
     * @memberof Agent
     */
    'includedLocations'?: Array<string>;
    /**
     * Locations id the agent is excluded from
     * @type {Array<string>}
     * @memberof Agent
     */
    'excludedLocations'?: Array<string>;
    /**
     * Transcript of the agent
     * @type {string}
     * @memberof Agent
     */
    'transcript'?: string;
}
/**
 * @type AnyValue
 * @export
 */
export type AnyValue = boolean | number | object | string;
/**
 *
 * @export
 * @interface ApiOperation
 */
export interface ApiOperation {
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof ApiOperation
     */
    'time': string;
    /**
     * The model that was created, updated, or deleted
     * @type {string}
     * @memberof ApiOperation
     */
    'model': string;
    /**
     * The method that was called
     * @type {string}
     * @memberof ApiOperation
     */
    'method': ApiOperationMethodEnum;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof ApiOperation
     */
    'results': {
        [key: string]: any;
    };
}
export declare const ApiOperationMethodEnum: {
    readonly Get: "get";
    readonly Post: "post";
    readonly Put: "put";
    readonly Delete: "delete";
    readonly Patch: "patch";
};
export type ApiOperationMethodEnum = typeof ApiOperationMethodEnum[keyof typeof ApiOperationMethodEnum];
/**
 *
 * @export
 * @interface BlockInfo
 */
export interface BlockInfo {
    /**
     *
     * @type {string}
     * @memberof BlockInfo
     */
    'message'?: string;
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof BlockInfo
     */
    'time'?: string;
}
/**
 *
 * @export
 * @interface Context
 */
export interface Context {
    /**
     * The name of the context
     * @type {string}
     * @memberof Context
     */
    'name': string;
    /**
     * Whether or not the context is modifiable
     * @type {boolean}
     * @memberof Context
     */
    'modifiable': boolean;
    /**
     * The description of the context
     * @type {string}
     * @memberof Context
     */
    'description'?: string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof Context
     */
    'detection'?: ContextDetectionParams;
    /**
     * The ID column of the context
     * @type {string}
     * @memberof Context
     */
    'idColumn': string;
    /**
     * The columns of the context
     * @type {Array<string>}
     * @memberof Context
     */
    'columns': Array<string>;
    /**
     * The required columns of the context
     * @type {Array<string>}
     * @memberof Context
     */
    'requiredColumns'?: Array<string>;
}
/**
 *
 * @export
 * @interface ContextDetectionDocument
 */
export interface ContextDetectionDocument {
    /**
     * The languages the entity is available in
     * @type {Array<string>}
     * @memberof ContextDetectionDocument
     */
    'languages'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ContextDetectionDocument
     */
    'text': string;
    /**
     *
     * @type {string}
     * @memberof ContextDetectionDocument
     */
    'id': string;
}
/**
 *
 * @export
 * @interface ContextDetectionEntity
 */
export interface ContextDetectionEntity {
    /**
     * The utterance ID of the entity
     * @type {string}
     * @memberof ContextDetectionEntity
     */
    'utteranceId': string;
    /**
     * The classification of the given text
     * @type {string}
     * @memberof ContextDetectionEntity
     */
    'option': string;
    /**
     * The languages the entity is available in
     * @type {Array<string>}
     * @memberof ContextDetectionEntity
     */
    'languages'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ContextDetectionEntity
     */
    'text': Array<string>;
}
/**
 *
 * @export
 * @interface ContextDetectionParams
 */
export interface ContextDetectionParams {
    /**
     *
     * @type {Array<ContextDetectionEntity>}
     * @memberof ContextDetectionParams
     */
    'entities': Array<ContextDetectionEntity>;
    /**
     *
     * @type {Array<ContextDetectionDocument>}
     * @memberof ContextDetectionParams
     */
    'documents': Array<ContextDetectionDocument>;
    /**
     *
     * @type {Array<ContextDetectionTest>}
     * @memberof ContextDetectionParams
     */
    'test'?: Array<ContextDetectionTest>;
}
/**
 *
 * @export
 * @interface ContextDetectionTest
 */
export interface ContextDetectionTest {
    /**
     *
     * @type {string}
     * @memberof ContextDetectionTest
     */
    'language'?: string;
    /**
     *
     * @type {string}
     * @memberof ContextDetectionTest
     */
    'text': string;
    /**
     *
     * @type {string}
     * @memberof ContextDetectionTest
     */
    'targetUtteranceId': string;
    /**
     *
     * @type {string}
     * @memberof ContextDetectionTest
     */
    'targetOption': string;
}
/**
 *
 * @export
 * @interface Conversation
 */
export interface Conversation {
    /**
     * Default agent assigned to the conversation(s)
     * @type {string}
     * @memberof Conversation
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof Conversation
     */
    '$thread'?: string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof Conversation
     */
    'initialContexts'?: Array<string>;
    /**
     *
     * @type {ConversationBaseEnvironmentProps}
     * @memberof Conversation
     */
    'environmentProps'?: ConversationBaseEnvironmentProps;
    /**
     * Customer this conversation is with
     * @type {string}
     * @memberof Conversation
     */
    '$customer': string;
    /**
     *
     * @type {ConversationEnvironment}
     * @memberof Conversation
     */
    'environment': ConversationEnvironment;
}
/**
 *
 * @export
 * @interface ConversationAllOf
 */
export interface ConversationAllOf {
    /**
     * Customer this conversation is with
     * @type {string}
     * @memberof ConversationAllOf
     */
    '$customer': string;
    /**
     *
     * @type {ConversationEnvironment}
     * @memberof ConversationAllOf
     */
    'environment': ConversationEnvironment;
}
/**
 * Base props all conversation types will have
 * @export
 * @interface ConversationBase
 */
export interface ConversationBase {
    /**
     * Default agent assigned to the conversation(s)
     * @type {string}
     * @memberof ConversationBase
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ConversationBase
     */
    '$thread'?: string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ConversationBase
     */
    'initialContexts'?: Array<string>;
    /**
     *
     * @type {ConversationBaseEnvironmentProps}
     * @memberof ConversationBase
     */
    'environmentProps'?: ConversationBaseEnvironmentProps;
}
/**
 * Environment properties for the conversation
 * @export
 * @interface ConversationBaseEnvironmentProps
 */
export interface ConversationBaseEnvironmentProps {
    /**
     * HTML subject line
     * @type {string}
     * @memberof ConversationBaseEnvironmentProps
     */
    'subject'?: string;
    /**
     * Used to sync email messages with the conversation
     * @type {string}
     * @memberof ConversationBaseEnvironmentProps
     */
    'platformEmailThreadId'?: string;
}
/**
 *
 * @export
 * @interface ConversationContextField
 */
export interface ConversationContextField {
    /**
     * The ID of the context
     * @type {string}
     * @memberof ConversationContextField
     */
    'id': string;
    /**
     * The time the context was created
     * @type {string}
     * @memberof ConversationContextField
     */
    'time'?: string;
    /**
     * The context of the conversation
     * @type {string}
     * @memberof ConversationContextField
     */
    'context': string;
    /**
     * The note of the conversation
     * @type {string}
     * @memberof ConversationContextField
     */
    'note'?: string;
    /**
     * The metadata of the conversation
     * @type {object}
     * @memberof ConversationContextField
     */
    'metadata'?: object;
    /**
     * The conditions of the conversation
     * @type {Array<ConversationContextGroup>}
     * @memberof ConversationContextField
     */
    'conditions'?: Array<ConversationContextGroup>;
    /**
     * The triggers of the conversation
     * @type {Array<string>}
     * @memberof ConversationContextField
     */
    'triggers'?: Array<string>;
}
/**
 *
 * @export
 * @interface ConversationContextFieldCondition
 */
export interface ConversationContextFieldCondition {
    /**
     * The key of the condition
     * @type {string}
     * @memberof ConversationContextFieldCondition
     */
    'key': string;
    /**
     *
     * @type {Operator}
     * @memberof ConversationContextFieldCondition
     */
    'operator': Operator;
    /**
     * The regex of the condition
     * @type {string}
     * @memberof ConversationContextFieldCondition
     */
    'regex'?: string;
    /**
     *
     * @type {AnyValue}
     * @memberof ConversationContextFieldCondition
     */
    'value': AnyValue;
}
/**
 *
 * @export
 * @interface ConversationContextGroup
 */
export interface ConversationContextGroup {
    /**
     * The conditions of the conversation
     * @type {Array<ConversationContextFieldCondition>}
     * @memberof ConversationContextGroup
     */
    'conditions': Array<ConversationContextFieldCondition>;
}
/**
 *
 * @export
 * @interface ConversationCreateRequest
 */
export interface ConversationCreateRequest {
    /**
     * Default agent assigned to the conversation(s)
     * @type {string}
     * @memberof ConversationCreateRequest
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ConversationCreateRequest
     */
    '$thread'?: string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ConversationCreateRequest
     */
    'initialContexts'?: Array<string>;
    /**
     *
     * @type {ConversationBaseEnvironmentProps}
     * @memberof ConversationCreateRequest
     */
    'environmentProps'?: ConversationBaseEnvironmentProps;
    /**
     * Customer this conversation is with
     * @type {string}
     * @memberof ConversationCreateRequest
     */
    '$customer': string;
    /**
     *
     * @type {ConversationEnvironment}
     * @memberof ConversationCreateRequest
     */
    'environment': ConversationEnvironment;
}
/**
 *
 * @export
 * @interface ConversationCreateResponse
 */
export interface ConversationCreateResponse {
    /**
     *
     * @type {boolean}
     * @memberof ConversationCreateResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof ConversationCreateResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof ConversationCreateResponse
     */
    'id': string;
    /**
     * The client web url of the conversation
     * @type {string}
     * @memberof ConversationCreateResponse
     */
    'clientWebUrl'?: string;
    /**
     * The agent web url of the conversation (requires phone two-factor authentication)
     * @type {string}
     * @memberof ConversationCreateResponse
     */
    'agentWebUrl'?: string;
    /**
     * The agent test web url of the conversation, used for testing the conversation without notifying the customer
     * @type {string}
     * @memberof ConversationCreateResponse
     */
    'agentTestWebUrl'?: string;
    /**
     * The ID of the conversation
     * @type {string}
     * @memberof ConversationCreateResponse
     */
    '$id': string;
    /**
     * ISO 8601 date string of when the conversation was initiated
     * @type {string}
     * @memberof ConversationCreateResponse
     */
    'initiated': string;
}
/**
 *
 * @export
 * @interface ConversationCreateResponseAllOf
 */
export interface ConversationCreateResponseAllOf {
    /**
     * The ID of the conversation
     * @type {string}
     * @memberof ConversationCreateResponseAllOf
     */
    '$id': string;
    /**
     * ISO 8601 date string of when the conversation was initiated
     * @type {string}
     * @memberof ConversationCreateResponseAllOf
     */
    'initiated': string;
}
/**
 * Environment this conversation is in (phone, web, or email) - this determines which device to send messages to
 * @export
 * @enum {string}
 */
export declare const ConversationEnvironment: {
    readonly Phone: "phone";
    readonly Web: "web";
    readonly Email: "email";
};
export type ConversationEnvironment = typeof ConversationEnvironment[keyof typeof ConversationEnvironment];
/**
 *
 * @export
 * @interface ConversationGetResponse
 */
export interface ConversationGetResponse {
    /**
     * Default agent assigned to the conversation(s)
     * @type {string}
     * @memberof ConversationGetResponse
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ConversationGetResponse
     */
    '$thread'?: string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ConversationGetResponse
     */
    'initialContexts'?: Array<string>;
    /**
     *
     * @type {ConversationBaseEnvironmentProps}
     * @memberof ConversationGetResponse
     */
    'environmentProps'?: ConversationBaseEnvironmentProps;
    /**
     * Customer this conversation is with
     * @type {string}
     * @memberof ConversationGetResponse
     */
    '$customer': string;
    /**
     *
     * @type {ConversationEnvironment}
     * @memberof ConversationGetResponse
     */
    'environment': ConversationEnvironment;
    /**
     * The client web url of the conversation
     * @type {string}
     * @memberof ConversationGetResponse
     */
    'clientWebUrl'?: string;
    /**
     * The agent web url of the conversation (requires phone two-factor authentication)
     * @type {string}
     * @memberof ConversationGetResponse
     */
    'agentWebUrl'?: string;
    /**
     * The agent test web url of the conversation, used for testing the conversation without notifying the customer
     * @type {string}
     * @memberof ConversationGetResponse
     */
    'agentTestWebUrl'?: string;
    /**
     * ISO 8601 date string of when the conversation was initiated
     * @type {string}
     * @memberof ConversationGetResponse
     */
    'initiated': string;
    /**
     * The ID of the conversation
     * @type {string}
     * @memberof ConversationGetResponse
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface ConversationGetResponseAllOf
 */
export interface ConversationGetResponseAllOf {
    /**
     * ISO 8601 date string of when the conversation was initiated
     * @type {string}
     * @memberof ConversationGetResponseAllOf
     */
    'initiated': string;
    /**
     * The ID of the conversation
     * @type {string}
     * @memberof ConversationGetResponseAllOf
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface ConversationRemoveResponse
 */
export interface ConversationRemoveResponse {
    /**
     *
     * @type {boolean}
     * @memberof ConversationRemoveResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof ConversationRemoveResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof ConversationRemoveResponse
     */
    'id': string;
}
/**
 * Base properties for all scheduled conversation types
 * @export
 * @interface ConversationScheduleParams
 */
export interface ConversationScheduleParams {
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof ConversationScheduleParams
     */
    'scheduled': string;
    /**
     * The initial message to send to the customer
     * @type {string}
     * @memberof ConversationScheduleParams
     */
    'initialMessage': string;
    /**
     * The initial message to send to the customer in HTML
     * @type {string}
     * @memberof ConversationScheduleParams
     */
    'initialMessageHtml'?: string | null;
}
/**
 *
 * @export
 * @interface ConversationUpdateRequest
 */
export interface ConversationUpdateRequest {
    /**
     * Default agent assigned to the conversation(s)
     * @type {string}
     * @memberof ConversationUpdateRequest
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ConversationUpdateRequest
     */
    '$thread'?: string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ConversationUpdateRequest
     */
    'initialContexts'?: Array<string>;
    /**
     *
     * @type {ConversationBaseEnvironmentProps}
     * @memberof ConversationUpdateRequest
     */
    'environmentProps'?: ConversationBaseEnvironmentProps;
    /**
     * Customer this conversation is with
     * @type {string}
     * @memberof ConversationUpdateRequest
     */
    '$customer': string;
    /**
     *
     * @type {ConversationEnvironment}
     * @memberof ConversationUpdateRequest
     */
    'environment': ConversationEnvironment;
    /**
     * The ID of the conversation to update
     * @type {string}
     * @memberof ConversationUpdateRequest
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface ConversationUpdateRequestAllOf
 */
export interface ConversationUpdateRequestAllOf {
    /**
     * The ID of the conversation to update
     * @type {string}
     * @memberof ConversationUpdateRequestAllOf
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface ConversationUpdateResponse
 */
export interface ConversationUpdateResponse {
    /**
     *
     * @type {boolean}
     * @memberof ConversationUpdateResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof ConversationUpdateResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof ConversationUpdateResponse
     */
    'id': string;
}
/**
 * Conversation web urls
 * @export
 * @interface ConversationUrls
 */
export interface ConversationUrls {
    /**
     * The client web url of the conversation
     * @type {string}
     * @memberof ConversationUrls
     */
    'clientWebUrl'?: string;
    /**
     * The agent web url of the conversation (requires phone two-factor authentication)
     * @type {string}
     * @memberof ConversationUrls
     */
    'agentWebUrl'?: string;
    /**
     * The agent test web url of the conversation, used for testing the conversation without notifying the customer
     * @type {string}
     * @memberof ConversationUrls
     */
    'agentTestWebUrl'?: string;
}
/**
 *
 * @export
 * @interface CreateAgentRequest
 */
export interface CreateAgentRequest {
    /**
     * Agent first name
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'firstName': string;
    /**
     * Agent last name
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'lastName': string;
    /**
     * Agent is inactive
     * @type {boolean}
     * @memberof CreateAgentRequest
     */
    'inactive'?: boolean;
    /**
     * Programmable phone number
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'programmablePhoneNumber'?: string;
    /**
     * Programmable phone number SID
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'programmablePhoneNumberSid'?: string;
    /**
     * Email address from Scout9 gmail subdomain
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'programmableEmail'?: string;
    /**
     * Forward email
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'forwardEmail'?: string;
    /**
     * Forward phone
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'forwardPhone': string;
    /**
     * Title of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'title'?: string;
    /**
     * Context of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'context'?: string;
    /**
     * Locations ids the agent is included in
     * @type {Array<string>}
     * @memberof CreateAgentRequest
     */
    'includedLocations'?: Array<string>;
    /**
     * Locations id the agent is excluded from
     * @type {Array<string>}
     * @memberof CreateAgentRequest
     */
    'excludedLocations'?: Array<string>;
    /**
     * Transcript of the agent
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'transcript'?: string;
}
/**
 *
 * @export
 * @interface CreateAgentResponse
 */
export interface CreateAgentResponse {
    /**
     *
     * @type {boolean}
     * @memberof CreateAgentResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof CreateAgentResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof CreateAgentResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface CreateAgentsRequest
 */
export interface CreateAgentsRequest {
    /**
     *
     * @type {Array<CreateAgentsRequestCustomersInner>}
     * @memberof CreateAgentsRequest
     */
    'customers'?: Array<CreateAgentsRequestCustomersInner>;
}
/**
 *
 * @export
 * @interface CreateAgentsRequestCustomersInner
 */
export interface CreateAgentsRequestCustomersInner {
    /**
     * Agent first name
     * @type {string}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'firstName': string;
    /**
     * Agent last name
     * @type {string}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'lastName': string;
    /**
     * Agent is inactive
     * @type {boolean}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'inactive'?: boolean;
    /**
     * Programmable phone number
     * @type {string}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'programmablePhoneNumber'?: string;
    /**
     * Programmable phone number SID
     * @type {string}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'programmablePhoneNumberSid'?: string;
    /**
     * Email address from Scout9 gmail subdomain
     * @type {string}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'programmableEmail'?: string;
    /**
     * Forward email
     * @type {string}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'forwardEmail'?: string;
    /**
     * Forward phone
     * @type {string}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'forwardPhone': string;
    /**
     * Title of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'title'?: string;
    /**
     * Context of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'context'?: string;
    /**
     * Locations ids the agent is included in
     * @type {Array<string>}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'includedLocations'?: Array<string>;
    /**
     * Locations id the agent is excluded from
     * @type {Array<string>}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'excludedLocations'?: Array<string>;
    /**
     * Transcript of the agent
     * @type {string}
     * @memberof CreateAgentsRequestCustomersInner
     */
    'transcript'?: string;
}
/**
 *
 * @export
 * @interface CreateAgentsResponse
 */
export interface CreateAgentsResponse {
    /**
     * ISO 8601 datetime string of when the operation was queued
     * @type {string}
     * @memberof CreateAgentsResponse
     */
    'queued': string;
    /**
     * The operation id to view the operation end results
     * @type {string}
     * @memberof CreateAgentsResponse
     */
    '$operation': string;
}
/**
 *
 * @export
 * @interface CreateContextRequest
 */
export interface CreateContextRequest {
    /**
     * The name of the context
     * @type {string}
     * @memberof CreateContextRequest
     */
    'name': string;
    /**
     * Whether or not the context is modifiable
     * @type {boolean}
     * @memberof CreateContextRequest
     */
    'modifiable': boolean;
    /**
     * The description of the context
     * @type {string}
     * @memberof CreateContextRequest
     */
    'description'?: string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof CreateContextRequest
     */
    'detection'?: ContextDetectionParams;
    /**
     * The ID column of the context
     * @type {string}
     * @memberof CreateContextRequest
     */
    'idColumn': string;
    /**
     * The columns of the context
     * @type {Array<string>}
     * @memberof CreateContextRequest
     */
    'columns': Array<string>;
    /**
     * The required columns of the context
     * @type {Array<string>}
     * @memberof CreateContextRequest
     */
    'requiredColumns'?: Array<string>;
}
/**
 *
 * @export
 * @interface CreateContextResponse
 */
export interface CreateContextResponse {
    /**
     *
     * @type {boolean}
     * @memberof CreateContextResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof CreateContextResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof CreateContextResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface CreateContextsRequest
 */
export interface CreateContextsRequest {
    /**
     *
     * @type {Array<CreateContextsRequestCustomersInner>}
     * @memberof CreateContextsRequest
     */
    'customers'?: Array<CreateContextsRequestCustomersInner>;
}
/**
 *
 * @export
 * @interface CreateContextsRequestCustomersInner
 */
export interface CreateContextsRequestCustomersInner {
    /**
     * The name of the context
     * @type {string}
     * @memberof CreateContextsRequestCustomersInner
     */
    'name': string;
    /**
     * Whether or not the context is modifiable
     * @type {boolean}
     * @memberof CreateContextsRequestCustomersInner
     */
    'modifiable': boolean;
    /**
     * The description of the context
     * @type {string}
     * @memberof CreateContextsRequestCustomersInner
     */
    'description'?: string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof CreateContextsRequestCustomersInner
     */
    'detection'?: ContextDetectionParams;
    /**
     * The ID column of the context
     * @type {string}
     * @memberof CreateContextsRequestCustomersInner
     */
    'idColumn': string;
    /**
     * The columns of the context
     * @type {Array<string>}
     * @memberof CreateContextsRequestCustomersInner
     */
    'columns': Array<string>;
    /**
     * The required columns of the context
     * @type {Array<string>}
     * @memberof CreateContextsRequestCustomersInner
     */
    'requiredColumns'?: Array<string>;
}
/**
 *
 * @export
 * @interface CreateContextsResponse
 */
export interface CreateContextsResponse {
    /**
     * ISO 8601 datetime string of when the operation was queued
     * @type {string}
     * @memberof CreateContextsResponse
     */
    'queued': string;
    /**
     * The operation id to view the operation end results
     * @type {string}
     * @memberof CreateContextsResponse
     */
    '$operation': string;
}
/**
 *
 * @export
 * @interface CreateCustomerRequest
 */
export interface CreateCustomerRequest {
    /**
     * The customers first name
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'firstName'?: string;
    /**
     * The customers last name
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'lastName'?: string;
    /**
     * The customers full name
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'name': string;
    /**
     * The customers email address
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'email'?: string | null;
    /**
     * The customers phone number
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'phone'?: string | null;
    /**
     * The customers profile image
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'img'?: string | null;
    /**
     * The customers neighborhood
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'neighborhood'?: string | null;
    /**
     * The customers city
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'city'?: string | null;
    /**
     * The customers 2-letter country code
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'country'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'line1'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'line2'?: string | null;
    /**
     * The customers postal code
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'postal_code'?: string | null;
    /**
     * The customers state, county, province, or region
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'state'?: string | null;
    /**
     * The customers town (only used in Japan)
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'town'?: string | null;
    /**
     *
     * @type {BlockInfo}
     * @memberof CreateCustomerRequest
     */
    'blocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof CreateCustomerRequest
     */
    'phoneBlocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof CreateCustomerRequest
     */
    'emailBlocked'?: BlockInfo;
    /**
     * The date the customer joined the business
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'joined'?: string | null;
    /**
     * The customers stripe ID
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'stripe'?: string | null;
    /**
     * The customers stripe ID in the dev environment
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'stripeDev'?: string | null;
}
/**
 *
 * @export
 * @interface CreateCustomerResponse
 */
export interface CreateCustomerResponse {
    /**
     *
     * @type {boolean}
     * @memberof CreateCustomerResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof CreateCustomerResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof CreateCustomerResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface CreateCustomersRequest
 */
export interface CreateCustomersRequest {
    /**
     *
     * @type {Array<Customer>}
     * @memberof CreateCustomersRequest
     */
    'customers': Array<Customer>;
}
/**
 *
 * @export
 * @interface CreateCustomersResponse
 */
export interface CreateCustomersResponse {
    /**
     * ISO 8601 datetime string of when the operation was queued
     * @type {string}
     * @memberof CreateCustomersResponse
     */
    'queued': string;
    /**
     * The operation id to view the operation end results
     * @type {string}
     * @memberof CreateCustomersResponse
     */
    '$operation': string;
}
/**
 *
 * @export
 * @interface CreateWorkflowRequest
 */
export interface CreateWorkflowRequest {
    /**
     * The name of the workflow
     * @type {string}
     * @memberof CreateWorkflowRequest
     */
    'name': string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof CreateWorkflowRequest
     */
    'initiators': ContextDetectionParams;
    /**
     * The fields of the workflow
     * @type {Array<ConversationContextField>}
     * @memberof CreateWorkflowRequest
     */
    'fields': Array<ConversationContextField>;
    /**
     * About this conversation - used as initial context
     * @type {string}
     * @memberof CreateWorkflowRequest
     */
    'context': string;
    /**
     * The webhook to call when a workflow is created
     * @type {string}
     * @memberof CreateWorkflowRequest
     */
    'onCreated'?: string;
    /**
     * The webhook to call when a workflow is updated
     * @type {string}
     * @memberof CreateWorkflowRequest
     */
    'onUpdated'?: string;
    /**
     * The webhook to call when a workflow is deleted
     * @type {string}
     * @memberof CreateWorkflowRequest
     */
    'onDeleted'?: string;
    /**
     * The webhook to call when a workflow has an error
     * @type {string}
     * @memberof CreateWorkflowRequest
     */
    'onError'?: string;
}
/**
 *
 * @export
 * @interface CreateWorkflowResponse
 */
export interface CreateWorkflowResponse {
    /**
     *
     * @type {boolean}
     * @memberof CreateWorkflowResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof CreateWorkflowResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof CreateWorkflowResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface CreateWorkflowsRequest
 */
export interface CreateWorkflowsRequest {
    /**
     *
     * @type {Array<CreateWorkflowsRequestCustomersInner>}
     * @memberof CreateWorkflowsRequest
     */
    'customers'?: Array<CreateWorkflowsRequestCustomersInner>;
}
/**
 *
 * @export
 * @interface CreateWorkflowsRequestCustomersInner
 */
export interface CreateWorkflowsRequestCustomersInner {
    /**
     * The name of the workflow
     * @type {string}
     * @memberof CreateWorkflowsRequestCustomersInner
     */
    'name': string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof CreateWorkflowsRequestCustomersInner
     */
    'initiators': ContextDetectionParams;
    /**
     * The fields of the workflow
     * @type {Array<ConversationContextField>}
     * @memberof CreateWorkflowsRequestCustomersInner
     */
    'fields': Array<ConversationContextField>;
    /**
     * About this conversation - used as initial context
     * @type {string}
     * @memberof CreateWorkflowsRequestCustomersInner
     */
    'context': string;
    /**
     * The webhook to call when a workflow is created
     * @type {string}
     * @memberof CreateWorkflowsRequestCustomersInner
     */
    'onCreated'?: string;
    /**
     * The webhook to call when a workflow is updated
     * @type {string}
     * @memberof CreateWorkflowsRequestCustomersInner
     */
    'onUpdated'?: string;
    /**
     * The webhook to call when a workflow is deleted
     * @type {string}
     * @memberof CreateWorkflowsRequestCustomersInner
     */
    'onDeleted'?: string;
    /**
     * The webhook to call when a workflow has an error
     * @type {string}
     * @memberof CreateWorkflowsRequestCustomersInner
     */
    'onError'?: string;
}
/**
 *
 * @export
 * @interface CreateWorkflowsResponse
 */
export interface CreateWorkflowsResponse {
    /**
     * ISO 8601 datetime string of when the operation was queued
     * @type {string}
     * @memberof CreateWorkflowsResponse
     */
    'queued': string;
    /**
     * The operation id to view the operation end results
     * @type {string}
     * @memberof CreateWorkflowsResponse
     */
    '$operation': string;
}
/**
 * Customers that your agents can communicate with their pocket scouts
 * @export
 * @interface Customer
 */
export interface Customer {
    [key: string]: CustomerValue | any;
    /**
     * The customers first name
     * @type {string}
     * @memberof Customer
     */
    'firstName'?: string;
    /**
     * The customers last name
     * @type {string}
     * @memberof Customer
     */
    'lastName'?: string;
    /**
     * The customers full name
     * @type {string}
     * @memberof Customer
     */
    'name': string;
    /**
     * The customers email address
     * @type {string}
     * @memberof Customer
     */
    'email'?: string | null;
    /**
     * The customers phone number
     * @type {string}
     * @memberof Customer
     */
    'phone'?: string | null;
    /**
     * The customers profile image
     * @type {string}
     * @memberof Customer
     */
    'img'?: string | null;
    /**
     * The customers neighborhood
     * @type {string}
     * @memberof Customer
     */
    'neighborhood'?: string | null;
    /**
     * The customers city
     * @type {string}
     * @memberof Customer
     */
    'city'?: string | null;
    /**
     * The customers 2-letter country code
     * @type {string}
     * @memberof Customer
     */
    'country'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof Customer
     */
    'line1'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof Customer
     */
    'line2'?: string | null;
    /**
     * The customers postal code
     * @type {string}
     * @memberof Customer
     */
    'postal_code'?: string | null;
    /**
     * The customers state, county, province, or region
     * @type {string}
     * @memberof Customer
     */
    'state'?: string | null;
    /**
     * The customers town (only used in Japan)
     * @type {string}
     * @memberof Customer
     */
    'town'?: string | null;
    /**
     *
     * @type {BlockInfo}
     * @memberof Customer
     */
    'blocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof Customer
     */
    'phoneBlocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof Customer
     */
    'emailBlocked'?: BlockInfo;
    /**
     * The date the customer joined the business
     * @type {string}
     * @memberof Customer
     */
    'joined'?: string | null;
    /**
     * The customers stripe ID
     * @type {string}
     * @memberof Customer
     */
    'stripe'?: string | null;
    /**
     * The customers stripe ID in the dev environment
     * @type {string}
     * @memberof Customer
     */
    'stripeDev'?: string | null;
}
/**
 * @type CustomerValue
 * @export
 */
export type CustomerValue = boolean | number | string;
/**
 *
 * @export
 * @interface DeleteAgentResponse
 */
export interface DeleteAgentResponse {
    /**
     *
     * @type {boolean}
     * @memberof DeleteAgentResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof DeleteAgentResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof DeleteAgentResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface DeleteAgentsResponse
 */
export interface DeleteAgentsResponse {
    /**
     * ISO 8601 datetime string of when the operation was queued
     * @type {string}
     * @memberof DeleteAgentsResponse
     */
    'queued': string;
    /**
     * The operation id to view the operation end results
     * @type {string}
     * @memberof DeleteAgentsResponse
     */
    '$operation': string;
}
/**
 *
 * @export
 * @interface DeleteContextResponse
 */
export interface DeleteContextResponse {
    /**
     *
     * @type {boolean}
     * @memberof DeleteContextResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof DeleteContextResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof DeleteContextResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface DeleteContextsResponse
 */
export interface DeleteContextsResponse {
    /**
     * ISO 8601 datetime string of when the operation was queued
     * @type {string}
     * @memberof DeleteContextsResponse
     */
    'queued': string;
    /**
     * The operation id to view the operation end results
     * @type {string}
     * @memberof DeleteContextsResponse
     */
    '$operation': string;
}
/**
 *
 * @export
 * @interface DeleteCustomerResponse
 */
export interface DeleteCustomerResponse {
    /**
     *
     * @type {boolean}
     * @memberof DeleteCustomerResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof DeleteCustomerResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof DeleteCustomerResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface DeleteCustomersResponse
 */
export interface DeleteCustomersResponse {
    /**
     * ISO 8601 datetime string of when the operation was queued
     * @type {string}
     * @memberof DeleteCustomersResponse
     */
    'queued': string;
    /**
     * The operation id to view the operation end results
     * @type {string}
     * @memberof DeleteCustomersResponse
     */
    '$operation': string;
}
/**
 *
 * @export
 * @interface DeleteWorkflowResponse
 */
export interface DeleteWorkflowResponse {
    /**
     *
     * @type {boolean}
     * @memberof DeleteWorkflowResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof DeleteWorkflowResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof DeleteWorkflowResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface DeleteWorkflowsResponse
 */
export interface DeleteWorkflowsResponse {
    /**
     * ISO 8601 datetime string of when the operation was queued
     * @type {string}
     * @memberof DeleteWorkflowsResponse
     */
    'queued': string;
    /**
     * The operation id to view the operation end results
     * @type {string}
     * @memberof DeleteWorkflowsResponse
     */
    '$operation': string;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     *
     * @type {Error}
     * @memberof ErrorResponse
     */
    'error': Error;
}
/**
 *
 * @export
 * @interface GenerateRequest
 */
export interface GenerateRequest {
    /**
     * Conversation ID to generate message from
     * @type {string}
     * @memberof GenerateRequest
     */
    'convo': string;
}
/**
 *
 * @export
 * @interface GenerateResponse
 */
export interface GenerateResponse {
    /**
     * The role of the message (customer, agent, or business)
     * @type {string}
     * @memberof GenerateResponse
     */
    'role': GenerateResponseRoleEnum;
    /**
     * The content of the message
     * @type {string}
     * @memberof GenerateResponse
     */
    'content': string;
    /**
     * The name of the sender
     * @type {string}
     * @memberof GenerateResponse
     */
    'name'?: string;
    /**
     * The time the message was sent
     * @type {string}
     * @memberof GenerateResponse
     */
    'time': string;
}
export declare const GenerateResponseRoleEnum: {
    readonly User: "user";
    readonly Assistant: "assistant";
    readonly System: "system";
};
export type GenerateResponseRoleEnum = typeof GenerateResponseRoleEnum[keyof typeof GenerateResponseRoleEnum];
/**
 *
 * @export
 * @interface GetAgentResponse
 */
export interface GetAgentResponse {
    /**
     * Agent first name
     * @type {string}
     * @memberof GetAgentResponse
     */
    'firstName': string;
    /**
     * Agent last name
     * @type {string}
     * @memberof GetAgentResponse
     */
    'lastName': string;
    /**
     * Agent is inactive
     * @type {boolean}
     * @memberof GetAgentResponse
     */
    'inactive'?: boolean;
    /**
     * Programmable phone number
     * @type {string}
     * @memberof GetAgentResponse
     */
    'programmablePhoneNumber'?: string;
    /**
     * Programmable phone number SID
     * @type {string}
     * @memberof GetAgentResponse
     */
    'programmablePhoneNumberSid'?: string;
    /**
     * Email address from Scout9 gmail subdomain
     * @type {string}
     * @memberof GetAgentResponse
     */
    'programmableEmail'?: string;
    /**
     * Forward email
     * @type {string}
     * @memberof GetAgentResponse
     */
    'forwardEmail'?: string;
    /**
     * Forward phone
     * @type {string}
     * @memberof GetAgentResponse
     */
    'forwardPhone': string;
    /**
     * Title of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof GetAgentResponse
     */
    'title'?: string;
    /**
     * Context of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof GetAgentResponse
     */
    'context'?: string;
    /**
     * Locations ids the agent is included in
     * @type {Array<string>}
     * @memberof GetAgentResponse
     */
    'includedLocations'?: Array<string>;
    /**
     * Locations id the agent is excluded from
     * @type {Array<string>}
     * @memberof GetAgentResponse
     */
    'excludedLocations'?: Array<string>;
    /**
     * Transcript of the agent
     * @type {string}
     * @memberof GetAgentResponse
     */
    'transcript'?: string;
    /**
     * The ID of the agent
     * @type {string}
     * @memberof GetAgentResponse
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface GetAgentResponseAllOf
 */
export interface GetAgentResponseAllOf {
    /**
     * The ID of the agent
     * @type {string}
     * @memberof GetAgentResponseAllOf
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface GetApiOperationResponse
 */
export interface GetApiOperationResponse {
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof GetApiOperationResponse
     */
    'time': string;
    /**
     * The model that was created, updated, or deleted
     * @type {string}
     * @memberof GetApiOperationResponse
     */
    'model': string;
    /**
     * The method that was called
     * @type {string}
     * @memberof GetApiOperationResponse
     */
    'method': GetApiOperationResponseMethodEnum;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof GetApiOperationResponse
     */
    'results': {
        [key: string]: any;
    };
    /**
     * The ID of the operation
     * @type {string}
     * @memberof GetApiOperationResponse
     */
    '$id': string;
}
export declare const GetApiOperationResponseMethodEnum: {
    readonly Get: "get";
    readonly Post: "post";
    readonly Put: "put";
    readonly Delete: "delete";
    readonly Patch: "patch";
};
export type GetApiOperationResponseMethodEnum = typeof GetApiOperationResponseMethodEnum[keyof typeof GetApiOperationResponseMethodEnum];
/**
 *
 * @export
 * @interface GetApiOperationResponseAllOf
 */
export interface GetApiOperationResponseAllOf {
    /**
     * The ID of the operation
     * @type {string}
     * @memberof GetApiOperationResponseAllOf
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface GetContextResponse
 */
export interface GetContextResponse {
    /**
     * The name of the context
     * @type {string}
     * @memberof GetContextResponse
     */
    'name': string;
    /**
     * Whether or not the context is modifiable
     * @type {boolean}
     * @memberof GetContextResponse
     */
    'modifiable': boolean;
    /**
     * The description of the context
     * @type {string}
     * @memberof GetContextResponse
     */
    'description'?: string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof GetContextResponse
     */
    'detection'?: ContextDetectionParams;
    /**
     * The ID column of the context
     * @type {string}
     * @memberof GetContextResponse
     */
    'idColumn': string;
    /**
     * The columns of the context
     * @type {Array<string>}
     * @memberof GetContextResponse
     */
    'columns': Array<string>;
    /**
     * The required columns of the context
     * @type {Array<string>}
     * @memberof GetContextResponse
     */
    'requiredColumns'?: Array<string>;
    /**
     * The ID of the context
     * @type {string}
     * @memberof GetContextResponse
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface GetContextResponseAllOf
 */
export interface GetContextResponseAllOf {
    /**
     * The ID of the context
     * @type {string}
     * @memberof GetContextResponseAllOf
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface GetCustomerResponse
 */
export interface GetCustomerResponse {
    /**
     * The customers first name
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'firstName': string;
    /**
     * The customers last name
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'lastName': string;
    /**
     * The customers full name
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'name': string;
    /**
     * The customers email address
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'email'?: string | null;
    /**
     * The customers phone number
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'phone'?: string | null;
    /**
     * The customers profile image
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'img'?: string | null;
    /**
     * The customers neighborhood
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'neighborhood'?: string | null;
    /**
     * The customers city
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'city'?: string | null;
    /**
     * The customers 2-letter country code
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'country'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'line1'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'line2'?: string | null;
    /**
     * The customers postal code
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'postal_code'?: string | null;
    /**
     * The customers state, county, province, or region
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'state'?: string | null;
    /**
     * The customers town (only used in Japan)
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'town'?: string | null;
    /**
     *
     * @type {BlockInfo}
     * @memberof GetCustomerResponse
     */
    'blocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof GetCustomerResponse
     */
    'phoneBlocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof GetCustomerResponse
     */
    'emailBlocked'?: BlockInfo;
    /**
     * The date the customer joined the business
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'joined'?: string | null;
    /**
     * The customers stripe ID
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'stripe'?: string | null;
    /**
     * The customers stripe ID in the dev environment
     * @type {string}
     * @memberof GetCustomerResponse
     */
    'stripeDev'?: string | null;
    /**
     * The ID of the customer
     * @type {string}
     * @memberof GetCustomerResponse
     */
    '$id'?: string;
}
/**
 *
 * @export
 * @interface GetCustomerResponseAllOf
 */
export interface GetCustomerResponseAllOf {
    /**
     * The ID of the customer
     * @type {string}
     * @memberof GetCustomerResponseAllOf
     */
    '$id'?: string;
}
/**
 *
 * @export
 * @interface GetWorkflowResponse
 */
export interface GetWorkflowResponse {
    /**
     * The name of the workflow
     * @type {string}
     * @memberof GetWorkflowResponse
     */
    'name': string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof GetWorkflowResponse
     */
    'initiators': ContextDetectionParams;
    /**
     * The fields of the workflow
     * @type {Array<ConversationContextField>}
     * @memberof GetWorkflowResponse
     */
    'fields': Array<ConversationContextField>;
    /**
     * About this conversation - used as initial context
     * @type {string}
     * @memberof GetWorkflowResponse
     */
    'context': string;
    /**
     * The webhook to call when a workflow is created
     * @type {string}
     * @memberof GetWorkflowResponse
     */
    'onCreated'?: string;
    /**
     * The webhook to call when a workflow is updated
     * @type {string}
     * @memberof GetWorkflowResponse
     */
    'onUpdated'?: string;
    /**
     * The webhook to call when a workflow is deleted
     * @type {string}
     * @memberof GetWorkflowResponse
     */
    'onDeleted'?: string;
    /**
     * The webhook to call when a workflow has an error
     * @type {string}
     * @memberof GetWorkflowResponse
     */
    'onError'?: string;
    /**
     * The ID of the workflow
     * @type {string}
     * @memberof GetWorkflowResponse
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface GetWorkflowResponseAllOf
 */
export interface GetWorkflowResponseAllOf {
    /**
     * The ID of the workflow
     * @type {string}
     * @memberof GetWorkflowResponseAllOf
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface ListAgentsResponseInner
 */
export interface ListAgentsResponseInner {
    /**
     * Agent first name
     * @type {string}
     * @memberof ListAgentsResponseInner
     */
    'firstName': string;
    /**
     * Agent last name
     * @type {string}
     * @memberof ListAgentsResponseInner
     */
    'lastName': string;
    /**
     * Agent is inactive
     * @type {boolean}
     * @memberof ListAgentsResponseInner
     */
    'inactive'?: boolean;
    /**
     * Programmable phone number
     * @type {string}
     * @memberof ListAgentsResponseInner
     */
    'programmablePhoneNumber'?: string;
    /**
     * Programmable phone number SID
     * @type {string}
     * @memberof ListAgentsResponseInner
     */
    'programmablePhoneNumberSid'?: string;
    /**
     * Email address from Scout9 gmail subdomain
     * @type {string}
     * @memberof ListAgentsResponseInner
     */
    'programmableEmail'?: string;
    /**
     * Forward email
     * @type {string}
     * @memberof ListAgentsResponseInner
     */
    'forwardEmail'?: string;
    /**
     * Forward phone
     * @type {string}
     * @memberof ListAgentsResponseInner
     */
    'forwardPhone': string;
    /**
     * Title of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof ListAgentsResponseInner
     */
    'title'?: string;
    /**
     * Context of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof ListAgentsResponseInner
     */
    'context'?: string;
    /**
     * Locations ids the agent is included in
     * @type {Array<string>}
     * @memberof ListAgentsResponseInner
     */
    'includedLocations'?: Array<string>;
    /**
     * Locations id the agent is excluded from
     * @type {Array<string>}
     * @memberof ListAgentsResponseInner
     */
    'excludedLocations'?: Array<string>;
    /**
     * Transcript of the agent
     * @type {string}
     * @memberof ListAgentsResponseInner
     */
    'transcript'?: string;
    /**
     * The ID of the agent
     * @type {string}
     * @memberof ListAgentsResponseInner
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface ListAgentsResponseInnerAllOf
 */
export interface ListAgentsResponseInnerAllOf {
    /**
     * The ID of the agent
     * @type {string}
     * @memberof ListAgentsResponseInnerAllOf
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface ListApiOperationsResponseInner
 */
export interface ListApiOperationsResponseInner {
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof ListApiOperationsResponseInner
     */
    'time': string;
    /**
     * The model that was created, updated, or deleted
     * @type {string}
     * @memberof ListApiOperationsResponseInner
     */
    'model': string;
    /**
     * The method that was called
     * @type {string}
     * @memberof ListApiOperationsResponseInner
     */
    'method': ListApiOperationsResponseInnerMethodEnum;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof ListApiOperationsResponseInner
     */
    'results': {
        [key: string]: any;
    };
    /**
     * The ID of the operation
     * @type {string}
     * @memberof ListApiOperationsResponseInner
     */
    '$id': string;
}
export declare const ListApiOperationsResponseInnerMethodEnum: {
    readonly Get: "get";
    readonly Post: "post";
    readonly Put: "put";
    readonly Delete: "delete";
    readonly Patch: "patch";
};
export type ListApiOperationsResponseInnerMethodEnum = typeof ListApiOperationsResponseInnerMethodEnum[keyof typeof ListApiOperationsResponseInnerMethodEnum];
/**
 *
 * @export
 * @interface ListApiOperationsResponseInnerAllOf
 */
export interface ListApiOperationsResponseInnerAllOf {
    /**
     * The ID of the operation
     * @type {string}
     * @memberof ListApiOperationsResponseInnerAllOf
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface ListContextsResponseInner
 */
export interface ListContextsResponseInner {
    /**
     * The name of the context
     * @type {string}
     * @memberof ListContextsResponseInner
     */
    'name': string;
    /**
     * Whether or not the context is modifiable
     * @type {boolean}
     * @memberof ListContextsResponseInner
     */
    'modifiable': boolean;
    /**
     * The description of the context
     * @type {string}
     * @memberof ListContextsResponseInner
     */
    'description'?: string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof ListContextsResponseInner
     */
    'detection'?: ContextDetectionParams;
    /**
     * The ID column of the context
     * @type {string}
     * @memberof ListContextsResponseInner
     */
    'idColumn': string;
    /**
     * The columns of the context
     * @type {Array<string>}
     * @memberof ListContextsResponseInner
     */
    'columns': Array<string>;
    /**
     * The required columns of the context
     * @type {Array<string>}
     * @memberof ListContextsResponseInner
     */
    'requiredColumns'?: Array<string>;
    /**
     * The ID of the context
     * @type {string}
     * @memberof ListContextsResponseInner
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface ListContextsResponseInnerAllOf
 */
export interface ListContextsResponseInnerAllOf {
    /**
     * The ID of the context
     * @type {string}
     * @memberof ListContextsResponseInnerAllOf
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface ListCustomersResponseInner
 */
export interface ListCustomersResponseInner {
    /**
     * The customers first name
     * @type {string}
     * @memberof ListCustomersResponseInner
     */
    'firstName'?: string;
    /**
     * The customers last name
     * @type {string}
     * @memberof ListCustomersResponseInner
     */
    'lastName'?: string;
    /**
     * The customers full name
     * @type {string}
     * @memberof ListCustomersResponseInner
     */
    'name': string;
    /**
     * The customers email address
     * @type {string}
     * @memberof ListCustomersResponseInner
     */
    'email'?: string | null;
    /**
     * The customers phone number
     * @type {string}
     * @memberof ListCustomersResponseInner
     */
    'phone'?: string | null;
    /**
     * The customers profile image
     * @type {string}
     * @memberof ListCustomersResponseInner
     */
    'img'?: string | null;
    /**
     * The customers neighborhood
     * @type {string}
     * @memberof ListCustomersResponseInner
     */
    'neighborhood'?: string | null;
    /**
     * The customers city
     * @type {string}
     * @memberof ListCustomersResponseInner
     */
    'city'?: string | null;
    /**
     * The customers 2-letter country code
     * @type {string}
     * @memberof ListCustomersResponseInner
     */
    'country'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof ListCustomersResponseInner
     */
    'line1'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof ListCustomersResponseInner
     */
    'line2'?: string | null;
    /**
     * The customers postal code
     * @type {string}
     * @memberof ListCustomersResponseInner
     */
    'postal_code'?: string | null;
    /**
     * The customers state, county, province, or region
     * @type {string}
     * @memberof ListCustomersResponseInner
     */
    'state'?: string | null;
    /**
     * The customers town (only used in Japan)
     * @type {string}
     * @memberof ListCustomersResponseInner
     */
    'town'?: string | null;
    /**
     *
     * @type {BlockInfo}
     * @memberof ListCustomersResponseInner
     */
    'blocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof ListCustomersResponseInner
     */
    'phoneBlocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof ListCustomersResponseInner
     */
    'emailBlocked'?: BlockInfo;
    /**
     * The date the customer joined the business
     * @type {string}
     * @memberof ListCustomersResponseInner
     */
    'joined'?: string | null;
    /**
     * The customers stripe ID
     * @type {string}
     * @memberof ListCustomersResponseInner
     */
    'stripe'?: string | null;
    /**
     * The customers stripe ID in the dev environment
     * @type {string}
     * @memberof ListCustomersResponseInner
     */
    'stripeDev'?: string | null;
    /**
     * The ID of the customer
     * @type {string}
     * @memberof ListCustomersResponseInner
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface ListCustomersResponseInnerAllOf
 */
export interface ListCustomersResponseInnerAllOf {
    /**
     * The ID of the customer
     * @type {string}
     * @memberof ListCustomersResponseInnerAllOf
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface ListQuery
 */
export interface ListQuery {
    /**
     *
     * @type {ListQueryId}
     * @memberof ListQuery
     */
    'id'?: ListQueryId;
    /**
     *
     * @type {Array<ListQueryOperationsInner>}
     * @memberof ListQuery
     */
    'operations'?: Array<ListQueryOperationsInner>;
}
/**
 * @type ListQueryId
 * @export
 */
export type ListQueryId = Array<string> | string;
/**
 *
 * @export
 * @interface ListQueryOperationsInner
 */
export interface ListQueryOperationsInner {
    /**
     * The field path to filter on
     * @type {string}
     * @memberof ListQueryOperationsInner
     */
    'fieldPath': string;
    /**
     *
     * @type {Operator}
     * @memberof ListQueryOperationsInner
     */
    'operator': Operator;
    /**
     *
     * @type {AnyValue}
     * @memberof ListQueryOperationsInner
     */
    'value': AnyValue;
}
/**
 *
 * @export
 * @interface ListWorkflowsResponseInner
 */
export interface ListWorkflowsResponseInner {
    /**
     * The name of the workflow
     * @type {string}
     * @memberof ListWorkflowsResponseInner
     */
    'name': string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof ListWorkflowsResponseInner
     */
    'initiators': ContextDetectionParams;
    /**
     * The fields of the workflow
     * @type {Array<ConversationContextField>}
     * @memberof ListWorkflowsResponseInner
     */
    'fields': Array<ConversationContextField>;
    /**
     * About this conversation - used as initial context
     * @type {string}
     * @memberof ListWorkflowsResponseInner
     */
    'context': string;
    /**
     * The webhook to call when a workflow is created
     * @type {string}
     * @memberof ListWorkflowsResponseInner
     */
    'onCreated'?: string;
    /**
     * The webhook to call when a workflow is updated
     * @type {string}
     * @memberof ListWorkflowsResponseInner
     */
    'onUpdated'?: string;
    /**
     * The webhook to call when a workflow is deleted
     * @type {string}
     * @memberof ListWorkflowsResponseInner
     */
    'onDeleted'?: string;
    /**
     * The webhook to call when a workflow has an error
     * @type {string}
     * @memberof ListWorkflowsResponseInner
     */
    'onError'?: string;
    /**
     * The ID of the workflow
     * @type {string}
     * @memberof ListWorkflowsResponseInner
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface ListWorkflowsResponseInnerAllOf
 */
export interface ListWorkflowsResponseInnerAllOf {
    /**
     * The ID of the workflow
     * @type {string}
     * @memberof ListWorkflowsResponseInnerAllOf
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * The role of the message (customer, agent, or business)
     * @type {string}
     * @memberof Message
     */
    'role': MessageRoleEnum;
    /**
     * The content of the message
     * @type {string}
     * @memberof Message
     */
    'content': string;
    /**
     * The name of the sender
     * @type {string}
     * @memberof Message
     */
    'name'?: string;
    /**
     * The time the message was sent
     * @type {string}
     * @memberof Message
     */
    'time': string;
}
export declare const MessageRoleEnum: {
    readonly User: "user";
    readonly Assistant: "assistant";
    readonly System: "system";
};
export type MessageRoleEnum = typeof MessageRoleEnum[keyof typeof MessageRoleEnum];
/**
 *
 * @export
 * @interface MessageCreateRequest
 */
export interface MessageCreateRequest {
    /**
     * Conversation ID this belonds to
     * @type {string}
     * @memberof MessageCreateRequest
     */
    'convo': string;
    /**
     * The message content to send to a user
     * @type {string}
     * @memberof MessageCreateRequest
     */
    'message': string;
    /**
     * The message content to send to a user in HTML format (only available in email)
     * @type {string}
     * @memberof MessageCreateRequest
     */
    'messageHtml'?: string;
    /**
     * Overrides the role of the user sending the message
     * @type {string}
     * @memberof MessageCreateRequest
     */
    'role'?: MessageCreateRequestRoleEnum;
}
export declare const MessageCreateRequestRoleEnum: {
    readonly Agent: "agent";
    readonly Customer: "customer";
    readonly Context: "context";
};
export type MessageCreateRequestRoleEnum = typeof MessageCreateRequestRoleEnum[keyof typeof MessageCreateRequestRoleEnum];
/**
 *
 * @export
 * @interface MessageCreateResponse
 */
export interface MessageCreateResponse {
    /**
     *
     * @type {boolean}
     * @memberof MessageCreateResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof MessageCreateResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof MessageCreateResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface MessageGetResponseInner
 */
export interface MessageGetResponseInner {
    /**
     * The role of the message (customer, agent, or business)
     * @type {string}
     * @memberof MessageGetResponseInner
     */
    'role': MessageGetResponseInnerRoleEnum;
    /**
     * The content of the message
     * @type {string}
     * @memberof MessageGetResponseInner
     */
    'content': string;
    /**
     * The name of the sender
     * @type {string}
     * @memberof MessageGetResponseInner
     */
    'name'?: string;
    /**
     * The time the message was sent
     * @type {string}
     * @memberof MessageGetResponseInner
     */
    'time': string;
    /**
     * The ID of the message to get
     * @type {string}
     * @memberof MessageGetResponseInner
     */
    '$id': string;
}
export declare const MessageGetResponseInnerRoleEnum: {
    readonly User: "user";
    readonly Assistant: "assistant";
    readonly System: "system";
};
export type MessageGetResponseInnerRoleEnum = typeof MessageGetResponseInnerRoleEnum[keyof typeof MessageGetResponseInnerRoleEnum];
/**
 *
 * @export
 * @interface MessageGetResponseInnerAllOf
 */
export interface MessageGetResponseInnerAllOf {
    /**
     * The ID of the message to get
     * @type {string}
     * @memberof MessageGetResponseInnerAllOf
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    'param': string | null;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    'code': string | null;
}
/**
 *
 * @export
 * @interface OperationBulkResponse
 */
export interface OperationBulkResponse {
    /**
     * ISO 8601 datetime string of when the operation was queued
     * @type {string}
     * @memberof OperationBulkResponse
     */
    'queued': string;
    /**
     * The operation id to view the operation end results
     * @type {string}
     * @memberof OperationBulkResponse
     */
    '$operation': string;
}
/**
 *
 * @export
 * @interface OperationDocResponse
 */
export interface OperationDocResponse {
    /**
     *
     * @type {boolean}
     * @memberof OperationDocResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof OperationDocResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof OperationDocResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface OperationDocResponseAllOf
 */
export interface OperationDocResponseAllOf {
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof OperationDocResponseAllOf
     */
    'id': string;
}
/**
 *
 * @export
 * @interface OperationResponse
 */
export interface OperationResponse {
    /**
     *
     * @type {boolean}
     * @memberof OperationResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof OperationResponse
     */
    'error'?: Error;
}
/**
 * The operator of the condition or query
 * @export
 * @enum {string}
 */
export declare const Operator: {
    readonly Eq: "eq";
    readonly Equal: "equal";
    readonly Ne: "ne";
    readonly NotEquals: "not-equals";
    readonly Gt: "gt";
    readonly GreaterThan: "greater-than";
    readonly Gte: "gte";
    readonly GreaterThanEquals: "greater-than-equals";
    readonly Lt: "lt";
    readonly LessThan: "less-than";
    readonly Lte: "lte";
    readonly LessThanEquals: "less-than-equals";
    readonly ArrayContains: "array-contains";
    readonly In: "in";
    readonly ArrayContainsAny: "array-contains-any";
    readonly NotIn: "not-in";
};
export type Operator = typeof Operator[keyof typeof Operator];
/**
 *
 * @export
 * @interface ScheduleCreateRequest
 */
export interface ScheduleCreateRequest {
    /**
     * Default agent assigned to the conversation(s)
     * @type {string}
     * @memberof ScheduleCreateRequest
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ScheduleCreateRequest
     */
    '$thread'?: string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ScheduleCreateRequest
     */
    'initialContexts'?: Array<string>;
    /**
     *
     * @type {ConversationBaseEnvironmentProps}
     * @memberof ScheduleCreateRequest
     */
    'environmentProps'?: ConversationBaseEnvironmentProps;
    /**
     * Customer this conversation is with
     * @type {string}
     * @memberof ScheduleCreateRequest
     */
    '$customer': string;
    /**
     *
     * @type {ConversationEnvironment}
     * @memberof ScheduleCreateRequest
     */
    'environment': ConversationEnvironment;
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof ScheduleCreateRequest
     */
    'scheduled': string;
    /**
     * The initial message to send to the customer
     * @type {string}
     * @memberof ScheduleCreateRequest
     */
    'initialMessage': string;
    /**
     * The initial message to send to the customer in HTML
     * @type {string}
     * @memberof ScheduleCreateRequest
     */
    'initialMessageHtml'?: string | null;
    /**
     * Group this conversation is in
     * @type {string}
     * @memberof ScheduleCreateRequest
     */
    '$group'?: string;
}
/**
 *
 * @export
 * @interface ScheduleCreateResponse
 */
export interface ScheduleCreateResponse {
    /**
     *
     * @type {boolean}
     * @memberof ScheduleCreateResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof ScheduleCreateResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof ScheduleCreateResponse
     */
    'id': string;
    /**
     * ISO Time the initial message has been sent
     * @type {string}
     * @memberof ScheduleCreateResponse
     */
    'sent'?: string;
}
/**
 *
 * @export
 * @interface ScheduleCreateResponseAllOf
 */
export interface ScheduleCreateResponseAllOf {
    /**
     * ISO Time the initial message has been sent
     * @type {string}
     * @memberof ScheduleCreateResponseAllOf
     */
    'sent'?: string;
}
/**
 *
 * @export
 * @interface ScheduleGetResponse
 */
export interface ScheduleGetResponse {
    /**
     * Default agent assigned to the conversation(s)
     * @type {string}
     * @memberof ScheduleGetResponse
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ScheduleGetResponse
     */
    '$thread'?: string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ScheduleGetResponse
     */
    'initialContexts'?: Array<string>;
    /**
     *
     * @type {ConversationBaseEnvironmentProps}
     * @memberof ScheduleGetResponse
     */
    'environmentProps'?: ConversationBaseEnvironmentProps;
    /**
     * Customer this conversation is with
     * @type {string}
     * @memberof ScheduleGetResponse
     */
    '$customer': string;
    /**
     *
     * @type {ConversationEnvironment}
     * @memberof ScheduleGetResponse
     */
    'environment': ConversationEnvironment;
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof ScheduleGetResponse
     */
    'scheduled': string;
    /**
     * The initial message to send to the customer
     * @type {string}
     * @memberof ScheduleGetResponse
     */
    'initialMessage': string;
    /**
     * The initial message to send to the customer in HTML
     * @type {string}
     * @memberof ScheduleGetResponse
     */
    'initialMessageHtml'?: string | null;
    /**
     * Group this conversation is in
     * @type {string}
     * @memberof ScheduleGetResponse
     */
    '$group'?: string;
}
/**
 *
 * @export
 * @interface ScheduleGroupCreateRequest
 */
export interface ScheduleGroupCreateRequest {
    /**
     * Default agent assigned to the conversation(s)
     * @type {string}
     * @memberof ScheduleGroupCreateRequest
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ScheduleGroupCreateRequest
     */
    '$thread'?: string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ScheduleGroupCreateRequest
     */
    'initialContexts'?: Array<string>;
    /**
     *
     * @type {ConversationBaseEnvironmentProps}
     * @memberof ScheduleGroupCreateRequest
     */
    'environmentProps'?: ConversationBaseEnvironmentProps;
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof ScheduleGroupCreateRequest
     */
    'scheduled': string;
    /**
     * The initial message to send to the customer
     * @type {string}
     * @memberof ScheduleGroupCreateRequest
     */
    'initialMessage': string;
    /**
     * The initial message to send to the customer in HTML
     * @type {string}
     * @memberof ScheduleGroupCreateRequest
     */
    'initialMessageHtml'?: string | null;
    /**
     * The delay in miliseconds between each customer, defaults to 15000 (15 seconds)
     * @type {number}
     * @memberof ScheduleGroupCreateRequest
     */
    'delay'?: number;
    /**
     * Customers in this group
     * @type {Array<ScheduledConversationGroupAllOfCustomers>}
     * @memberof ScheduleGroupCreateRequest
     */
    'customers': Array<ScheduledConversationGroupAllOfCustomers>;
}
/**
 *
 * @export
 * @interface ScheduleGroupCreateResponse
 */
export interface ScheduleGroupCreateResponse {
    /**
     *
     * @type {boolean}
     * @memberof ScheduleGroupCreateResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof ScheduleGroupCreateResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof ScheduleGroupCreateResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface ScheduleGroupGetResponse
 */
export interface ScheduleGroupGetResponse {
    /**
     * Default agent assigned to the conversation(s)
     * @type {string}
     * @memberof ScheduleGroupGetResponse
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ScheduleGroupGetResponse
     */
    '$thread'?: string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ScheduleGroupGetResponse
     */
    'initialContexts'?: Array<string>;
    /**
     *
     * @type {ConversationBaseEnvironmentProps}
     * @memberof ScheduleGroupGetResponse
     */
    'environmentProps'?: ConversationBaseEnvironmentProps;
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof ScheduleGroupGetResponse
     */
    'scheduled': string;
    /**
     * The initial message to send to the customer
     * @type {string}
     * @memberof ScheduleGroupGetResponse
     */
    'initialMessage': string;
    /**
     * The initial message to send to the customer in HTML
     * @type {string}
     * @memberof ScheduleGroupGetResponse
     */
    'initialMessageHtml'?: string | null;
    /**
     * The delay in miliseconds between each customer, defaults to 15000 (15 seconds)
     * @type {number}
     * @memberof ScheduleGroupGetResponse
     */
    'delay'?: number;
    /**
     * Customers in this group
     * @type {Array<ScheduledConversationGroupAllOfCustomers>}
     * @memberof ScheduleGroupGetResponse
     */
    'customers': Array<ScheduledConversationGroupAllOfCustomers>;
    /**
     * The ID of the scheduled conversation group
     * @type {string}
     * @memberof ScheduleGroupGetResponse
     */
    '$id': string;
    /**
     * ISO Time the initial message has been sent
     * @type {boolean}
     * @memberof ScheduleGroupGetResponse
     */
    'sent'?: boolean;
}
/**
 *
 * @export
 * @interface ScheduleGroupGetResponseAllOf
 */
export interface ScheduleGroupGetResponseAllOf {
    /**
     * The ID of the scheduled conversation group
     * @type {string}
     * @memberof ScheduleGroupGetResponseAllOf
     */
    '$id': string;
    /**
     * ISO Time the initial message has been sent
     * @type {boolean}
     * @memberof ScheduleGroupGetResponseAllOf
     */
    'sent'?: boolean;
}
/**
 *
 * @export
 * @interface ScheduleGroupRemoveResponse
 */
export interface ScheduleGroupRemoveResponse {
    /**
     *
     * @type {boolean}
     * @memberof ScheduleGroupRemoveResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof ScheduleGroupRemoveResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof ScheduleGroupRemoveResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface ScheduleGroupUpdateRequest
 */
export interface ScheduleGroupUpdateRequest {
    /**
     * Default agent assigned to the conversation(s)
     * @type {string}
     * @memberof ScheduleGroupUpdateRequest
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ScheduleGroupUpdateRequest
     */
    '$thread'?: string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ScheduleGroupUpdateRequest
     */
    'initialContexts'?: Array<string>;
    /**
     *
     * @type {ConversationBaseEnvironmentProps}
     * @memberof ScheduleGroupUpdateRequest
     */
    'environmentProps'?: ConversationBaseEnvironmentProps;
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof ScheduleGroupUpdateRequest
     */
    'scheduled': string;
    /**
     * The initial message to send to the customer
     * @type {string}
     * @memberof ScheduleGroupUpdateRequest
     */
    'initialMessage': string;
    /**
     * The initial message to send to the customer in HTML
     * @type {string}
     * @memberof ScheduleGroupUpdateRequest
     */
    'initialMessageHtml'?: string | null;
    /**
     * The delay in miliseconds between each customer, defaults to 15000 (15 seconds)
     * @type {number}
     * @memberof ScheduleGroupUpdateRequest
     */
    'delay'?: number;
    /**
     * Customers in this group
     * @type {Array<ScheduledConversationGroupAllOfCustomers>}
     * @memberof ScheduleGroupUpdateRequest
     */
    'customers': Array<ScheduledConversationGroupAllOfCustomers>;
    /**
     * The ID of the scheduled conversation group to update
     * @type {string}
     * @memberof ScheduleGroupUpdateRequest
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface ScheduleGroupUpdateRequestAllOf
 */
export interface ScheduleGroupUpdateRequestAllOf {
    /**
     * The ID of the scheduled conversation group to update
     * @type {string}
     * @memberof ScheduleGroupUpdateRequestAllOf
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface ScheduleGroupUpdateResponse
 */
export interface ScheduleGroupUpdateResponse {
    /**
     *
     * @type {boolean}
     * @memberof ScheduleGroupUpdateResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof ScheduleGroupUpdateResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof ScheduleGroupUpdateResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface ScheduleRemoveResponse
 */
export interface ScheduleRemoveResponse {
    /**
     *
     * @type {boolean}
     * @memberof ScheduleRemoveResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof ScheduleRemoveResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof ScheduleRemoveResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface ScheduleUpdateRequest
 */
export interface ScheduleUpdateRequest {
    /**
     * Default agent assigned to the conversation(s)
     * @type {string}
     * @memberof ScheduleUpdateRequest
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ScheduleUpdateRequest
     */
    '$thread'?: string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ScheduleUpdateRequest
     */
    'initialContexts'?: Array<string>;
    /**
     *
     * @type {ConversationBaseEnvironmentProps}
     * @memberof ScheduleUpdateRequest
     */
    'environmentProps'?: ConversationBaseEnvironmentProps;
    /**
     * Customer this conversation is with
     * @type {string}
     * @memberof ScheduleUpdateRequest
     */
    '$customer': string;
    /**
     *
     * @type {ConversationEnvironment}
     * @memberof ScheduleUpdateRequest
     */
    'environment': ConversationEnvironment;
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof ScheduleUpdateRequest
     */
    'scheduled': string;
    /**
     * The initial message to send to the customer
     * @type {string}
     * @memberof ScheduleUpdateRequest
     */
    'initialMessage': string;
    /**
     * The initial message to send to the customer in HTML
     * @type {string}
     * @memberof ScheduleUpdateRequest
     */
    'initialMessageHtml'?: string | null;
    /**
     * Group this conversation is in
     * @type {string}
     * @memberof ScheduleUpdateRequest
     */
    '$group'?: string;
    /**
     * The ID of the scheduled conversation to update
     * @type {string}
     * @memberof ScheduleUpdateRequest
     */
    '$id'?: string;
}
/**
 *
 * @export
 * @interface ScheduleUpdateRequestAllOf
 */
export interface ScheduleUpdateRequestAllOf {
    /**
     * The ID of the scheduled conversation to update
     * @type {string}
     * @memberof ScheduleUpdateRequestAllOf
     */
    '$id'?: string;
}
/**
 *
 * @export
 * @interface ScheduleUpdateResponse
 */
export interface ScheduleUpdateResponse {
    /**
     *
     * @type {boolean}
     * @memberof ScheduleUpdateResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof ScheduleUpdateResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof ScheduleUpdateResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface ScheduledConversation
 */
export interface ScheduledConversation {
    /**
     * Default agent assigned to the conversation(s)
     * @type {string}
     * @memberof ScheduledConversation
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ScheduledConversation
     */
    '$thread'?: string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ScheduledConversation
     */
    'initialContexts'?: Array<string>;
    /**
     *
     * @type {ConversationBaseEnvironmentProps}
     * @memberof ScheduledConversation
     */
    'environmentProps'?: ConversationBaseEnvironmentProps;
    /**
     * Customer this conversation is with
     * @type {string}
     * @memberof ScheduledConversation
     */
    '$customer': string;
    /**
     *
     * @type {ConversationEnvironment}
     * @memberof ScheduledConversation
     */
    'environment': ConversationEnvironment;
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof ScheduledConversation
     */
    'scheduled': string;
    /**
     * The initial message to send to the customer
     * @type {string}
     * @memberof ScheduledConversation
     */
    'initialMessage': string;
    /**
     * The initial message to send to the customer in HTML
     * @type {string}
     * @memberof ScheduledConversation
     */
    'initialMessageHtml'?: string | null;
    /**
     * Group this conversation is in
     * @type {string}
     * @memberof ScheduledConversation
     */
    '$group'?: string;
}
/**
 *
 * @export
 * @interface ScheduledConversationAllOf
 */
export interface ScheduledConversationAllOf {
    /**
     * Group this conversation is in
     * @type {string}
     * @memberof ScheduledConversationAllOf
     */
    '$group'?: string;
}
/**
 *
 * @export
 * @interface ScheduledConversationGroup
 */
export interface ScheduledConversationGroup {
    /**
     * Default agent assigned to the conversation(s)
     * @type {string}
     * @memberof ScheduledConversationGroup
     */
    '$agent': string;
    /**
     * Thread this conversation is in - this determines what context to pull when loading the conversation
     * @type {string}
     * @memberof ScheduledConversationGroup
     */
    '$thread'?: string;
    /**
     * Initial contexts to load when starting the conversation
     * @type {Array<string>}
     * @memberof ScheduledConversationGroup
     */
    'initialContexts'?: Array<string>;
    /**
     *
     * @type {ConversationBaseEnvironmentProps}
     * @memberof ScheduledConversationGroup
     */
    'environmentProps'?: ConversationBaseEnvironmentProps;
    /**
     * ISO 8601 datetime string
     * @type {string}
     * @memberof ScheduledConversationGroup
     */
    'scheduled': string;
    /**
     * The initial message to send to the customer
     * @type {string}
     * @memberof ScheduledConversationGroup
     */
    'initialMessage': string;
    /**
     * The initial message to send to the customer in HTML
     * @type {string}
     * @memberof ScheduledConversationGroup
     */
    'initialMessageHtml'?: string | null;
    /**
     * The delay in miliseconds between each customer, defaults to 15000 (15 seconds)
     * @type {number}
     * @memberof ScheduledConversationGroup
     */
    'delay'?: number;
    /**
     * Customers in this group
     * @type {Array<ScheduledConversationGroupAllOfCustomers>}
     * @memberof ScheduledConversationGroup
     */
    'customers': Array<ScheduledConversationGroupAllOfCustomers>;
}
/**
 *
 * @export
 * @interface ScheduledConversationGroupAllOf
 */
export interface ScheduledConversationGroupAllOf {
    /**
     * The delay in miliseconds between each customer, defaults to 15000 (15 seconds)
     * @type {number}
     * @memberof ScheduledConversationGroupAllOf
     */
    'delay'?: number;
    /**
     * Customers in this group
     * @type {Array<ScheduledConversationGroupAllOfCustomers>}
     * @memberof ScheduledConversationGroupAllOf
     */
    'customers': Array<ScheduledConversationGroupAllOfCustomers>;
}
/**
 *
 * @export
 * @interface ScheduledConversationGroupAllOfCustomers
 */
export interface ScheduledConversationGroupAllOfCustomers {
    /**
     *
     * @type {ConversationEnvironment}
     * @memberof ScheduledConversationGroupAllOfCustomers
     */
    'environment': ConversationEnvironment;
    /**
     * Customer ID
     * @type {string}
     * @memberof ScheduledConversationGroupAllOfCustomers
     */
    'id': string;
    /**
     * Overrides default $agent for this customer
     * @type {string}
     * @memberof ScheduledConversationGroupAllOfCustomers
     */
    '$agent'?: string;
}
/**
 *
 * @export
 * @interface UpdateAgentRequest
 */
export interface UpdateAgentRequest {
    /**
     * Agent first name
     * @type {string}
     * @memberof UpdateAgentRequest
     */
    'firstName': string;
    /**
     * Agent last name
     * @type {string}
     * @memberof UpdateAgentRequest
     */
    'lastName': string;
    /**
     * Agent is inactive
     * @type {boolean}
     * @memberof UpdateAgentRequest
     */
    'inactive'?: boolean;
    /**
     * Programmable phone number
     * @type {string}
     * @memberof UpdateAgentRequest
     */
    'programmablePhoneNumber'?: string;
    /**
     * Programmable phone number SID
     * @type {string}
     * @memberof UpdateAgentRequest
     */
    'programmablePhoneNumberSid'?: string;
    /**
     * Email address from Scout9 gmail subdomain
     * @type {string}
     * @memberof UpdateAgentRequest
     */
    'programmableEmail'?: string;
    /**
     * Forward email
     * @type {string}
     * @memberof UpdateAgentRequest
     */
    'forwardEmail'?: string;
    /**
     * Forward phone
     * @type {string}
     * @memberof UpdateAgentRequest
     */
    'forwardPhone': string;
    /**
     * Title of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof UpdateAgentRequest
     */
    'title'?: string;
    /**
     * Context of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof UpdateAgentRequest
     */
    'context'?: string;
    /**
     * Locations ids the agent is included in
     * @type {Array<string>}
     * @memberof UpdateAgentRequest
     */
    'includedLocations'?: Array<string>;
    /**
     * Locations id the agent is excluded from
     * @type {Array<string>}
     * @memberof UpdateAgentRequest
     */
    'excludedLocations'?: Array<string>;
    /**
     * Transcript of the agent
     * @type {string}
     * @memberof UpdateAgentRequest
     */
    'transcript'?: string;
    /**
     * The ID of the agent to update
     * @type {string}
     * @memberof UpdateAgentRequest
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface UpdateAgentRequestAllOf
 */
export interface UpdateAgentRequestAllOf {
    /**
     * The ID of the agent to update
     * @type {string}
     * @memberof UpdateAgentRequestAllOf
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface UpdateAgentResponse
 */
export interface UpdateAgentResponse {
    /**
     *
     * @type {boolean}
     * @memberof UpdateAgentResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof UpdateAgentResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof UpdateAgentResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface UpdateAgentsRequest
 */
export interface UpdateAgentsRequest {
    /**
     *
     * @type {Array<UpdateAgentsRequestCustomersInner>}
     * @memberof UpdateAgentsRequest
     */
    'customers'?: Array<UpdateAgentsRequestCustomersInner>;
}
/**
 *
 * @export
 * @interface UpdateAgentsRequestCustomersInner
 */
export interface UpdateAgentsRequestCustomersInner {
    /**
     * Agent first name
     * @type {string}
     * @memberof UpdateAgentsRequestCustomersInner
     */
    'firstName': string;
    /**
     * Agent last name
     * @type {string}
     * @memberof UpdateAgentsRequestCustomersInner
     */
    'lastName': string;
    /**
     * Agent is inactive
     * @type {boolean}
     * @memberof UpdateAgentsRequestCustomersInner
     */
    'inactive'?: boolean;
    /**
     * Programmable phone number
     * @type {string}
     * @memberof UpdateAgentsRequestCustomersInner
     */
    'programmablePhoneNumber'?: string;
    /**
     * Programmable phone number SID
     * @type {string}
     * @memberof UpdateAgentsRequestCustomersInner
     */
    'programmablePhoneNumberSid'?: string;
    /**
     * Email address from Scout9 gmail subdomain
     * @type {string}
     * @memberof UpdateAgentsRequestCustomersInner
     */
    'programmableEmail'?: string;
    /**
     * Forward email
     * @type {string}
     * @memberof UpdateAgentsRequestCustomersInner
     */
    'forwardEmail'?: string;
    /**
     * Forward phone
     * @type {string}
     * @memberof UpdateAgentsRequestCustomersInner
     */
    'forwardPhone': string;
    /**
     * Title of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof UpdateAgentsRequestCustomersInner
     */
    'title'?: string;
    /**
     * Context of the agent, defaults to \"Agent\"
     * @type {string}
     * @memberof UpdateAgentsRequestCustomersInner
     */
    'context'?: string;
    /**
     * Locations ids the agent is included in
     * @type {Array<string>}
     * @memberof UpdateAgentsRequestCustomersInner
     */
    'includedLocations'?: Array<string>;
    /**
     * Locations id the agent is excluded from
     * @type {Array<string>}
     * @memberof UpdateAgentsRequestCustomersInner
     */
    'excludedLocations'?: Array<string>;
    /**
     * Transcript of the agent
     * @type {string}
     * @memberof UpdateAgentsRequestCustomersInner
     */
    'transcript'?: string;
    /**
     * The ID of the agent
     * @type {string}
     * @memberof UpdateAgentsRequestCustomersInner
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface UpdateAgentsRequestCustomersInnerAllOf
 */
export interface UpdateAgentsRequestCustomersInnerAllOf {
    /**
     * The ID of the agent
     * @type {string}
     * @memberof UpdateAgentsRequestCustomersInnerAllOf
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface UpdateAgentsResponse
 */
export interface UpdateAgentsResponse {
    /**
     * ISO 8601 datetime string of when the operation was queued
     * @type {string}
     * @memberof UpdateAgentsResponse
     */
    'queued': string;
    /**
     * The operation id to view the operation end results
     * @type {string}
     * @memberof UpdateAgentsResponse
     */
    '$operation': string;
}
/**
 *
 * @export
 * @interface UpdateContextRequest
 */
export interface UpdateContextRequest {
    /**
     * The name of the context
     * @type {string}
     * @memberof UpdateContextRequest
     */
    'name': string;
    /**
     * Whether or not the context is modifiable
     * @type {boolean}
     * @memberof UpdateContextRequest
     */
    'modifiable': boolean;
    /**
     * The description of the context
     * @type {string}
     * @memberof UpdateContextRequest
     */
    'description'?: string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof UpdateContextRequest
     */
    'detection'?: ContextDetectionParams;
    /**
     * The ID column of the context
     * @type {string}
     * @memberof UpdateContextRequest
     */
    'idColumn': string;
    /**
     * The columns of the context
     * @type {Array<string>}
     * @memberof UpdateContextRequest
     */
    'columns': Array<string>;
    /**
     * The required columns of the context
     * @type {Array<string>}
     * @memberof UpdateContextRequest
     */
    'requiredColumns'?: Array<string>;
    /**
     * The ID of the context to update
     * @type {string}
     * @memberof UpdateContextRequest
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface UpdateContextRequestAllOf
 */
export interface UpdateContextRequestAllOf {
    /**
     * The ID of the context to update
     * @type {string}
     * @memberof UpdateContextRequestAllOf
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface UpdateContextResponse
 */
export interface UpdateContextResponse {
    /**
     *
     * @type {boolean}
     * @memberof UpdateContextResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof UpdateContextResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof UpdateContextResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface UpdateContextsRequest
 */
export interface UpdateContextsRequest {
    /**
     *
     * @type {Array<ListContextsResponseInner>}
     * @memberof UpdateContextsRequest
     */
    'customers'?: Array<ListContextsResponseInner>;
}
/**
 *
 * @export
 * @interface UpdateContextsResponse
 */
export interface UpdateContextsResponse {
    /**
     * ISO 8601 datetime string of when the operation was queued
     * @type {string}
     * @memberof UpdateContextsResponse
     */
    'queued': string;
    /**
     * The operation id to view the operation end results
     * @type {string}
     * @memberof UpdateContextsResponse
     */
    '$operation': string;
}
/**
 *
 * @export
 * @interface UpdateCustomerRequest
 */
export interface UpdateCustomerRequest {
    /**
     * The customers first name
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'firstName'?: string;
    /**
     * The customers last name
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'lastName'?: string;
    /**
     * The customers full name
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'name': string;
    /**
     * The customers email address
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'email'?: string | null;
    /**
     * The customers phone number
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'phone'?: string | null;
    /**
     * The customers profile image
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'img'?: string | null;
    /**
     * The customers neighborhood
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'neighborhood'?: string | null;
    /**
     * The customers city
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'city'?: string | null;
    /**
     * The customers 2-letter country code
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'country'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'line1'?: string | null;
    /**
     * The customers street address
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'line2'?: string | null;
    /**
     * The customers postal code
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'postal_code'?: string | null;
    /**
     * The customers state, county, province, or region
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'state'?: string | null;
    /**
     * The customers town (only used in Japan)
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'town'?: string | null;
    /**
     *
     * @type {BlockInfo}
     * @memberof UpdateCustomerRequest
     */
    'blocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof UpdateCustomerRequest
     */
    'phoneBlocked'?: BlockInfo;
    /**
     *
     * @type {BlockInfo}
     * @memberof UpdateCustomerRequest
     */
    'emailBlocked'?: BlockInfo;
    /**
     * The date the customer joined the business
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'joined'?: string | null;
    /**
     * The customers stripe ID
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'stripe'?: string | null;
    /**
     * The customers stripe ID in the dev environment
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    'stripeDev'?: string | null;
    /**
     * The ID of the customer
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface UpdateCustomerRequestAllOf
 */
export interface UpdateCustomerRequestAllOf {
    /**
     * The ID of the customer
     * @type {string}
     * @memberof UpdateCustomerRequestAllOf
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface UpdateCustomerResponse
 */
export interface UpdateCustomerResponse {
    /**
     *
     * @type {boolean}
     * @memberof UpdateCustomerResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof UpdateCustomerResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof UpdateCustomerResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface UpdateCustomersRequest
 */
export interface UpdateCustomersRequest {
    /**
     *
     * @type {Array<ListCustomersResponseInner>}
     * @memberof UpdateCustomersRequest
     */
    'customers'?: Array<ListCustomersResponseInner>;
}
/**
 *
 * @export
 * @interface UpdateCustomersResponse
 */
export interface UpdateCustomersResponse {
    /**
     * ISO 8601 datetime string of when the operation was queued
     * @type {string}
     * @memberof UpdateCustomersResponse
     */
    'queued': string;
    /**
     * The operation id to view the operation end results
     * @type {string}
     * @memberof UpdateCustomersResponse
     */
    '$operation': string;
}
/**
 *
 * @export
 * @interface UpdateWorkflowRequest
 */
export interface UpdateWorkflowRequest {
    /**
     * The name of the workflow
     * @type {string}
     * @memberof UpdateWorkflowRequest
     */
    'name': string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof UpdateWorkflowRequest
     */
    'initiators': ContextDetectionParams;
    /**
     * The fields of the workflow
     * @type {Array<ConversationContextField>}
     * @memberof UpdateWorkflowRequest
     */
    'fields': Array<ConversationContextField>;
    /**
     * About this conversation - used as initial context
     * @type {string}
     * @memberof UpdateWorkflowRequest
     */
    'context': string;
    /**
     * The webhook to call when a workflow is created
     * @type {string}
     * @memberof UpdateWorkflowRequest
     */
    'onCreated'?: string;
    /**
     * The webhook to call when a workflow is updated
     * @type {string}
     * @memberof UpdateWorkflowRequest
     */
    'onUpdated'?: string;
    /**
     * The webhook to call when a workflow is deleted
     * @type {string}
     * @memberof UpdateWorkflowRequest
     */
    'onDeleted'?: string;
    /**
     * The webhook to call when a workflow has an error
     * @type {string}
     * @memberof UpdateWorkflowRequest
     */
    'onError'?: string;
    /**
     * The ID of the workflow to update
     * @type {string}
     * @memberof UpdateWorkflowRequest
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface UpdateWorkflowRequestAllOf
 */
export interface UpdateWorkflowRequestAllOf {
    /**
     * The ID of the workflow to update
     * @type {string}
     * @memberof UpdateWorkflowRequestAllOf
     */
    '$id': string;
}
/**
 *
 * @export
 * @interface UpdateWorkflowResponse
 */
export interface UpdateWorkflowResponse {
    /**
     *
     * @type {boolean}
     * @memberof UpdateWorkflowResponse
     */
    'success': boolean;
    /**
     *
     * @type {Error}
     * @memberof UpdateWorkflowResponse
     */
    'error'?: Error;
    /**
     * The id of the document that was created, updated, or deleted
     * @type {string}
     * @memberof UpdateWorkflowResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface UpdateWorkflowsRequest
 */
export interface UpdateWorkflowsRequest {
    /**
     *
     * @type {Array<ListWorkflowsResponseInner>}
     * @memberof UpdateWorkflowsRequest
     */
    'customers'?: Array<ListWorkflowsResponseInner>;
}
/**
 *
 * @export
 * @interface UpdateWorkflowsResponse
 */
export interface UpdateWorkflowsResponse {
    /**
     * ISO 8601 datetime string of when the operation was queued
     * @type {string}
     * @memberof UpdateWorkflowsResponse
     */
    'queued': string;
    /**
     * The operation id to view the operation end results
     * @type {string}
     * @memberof UpdateWorkflowsResponse
     */
    '$operation': string;
}
/**
 *
 * @export
 * @interface Workflow
 */
export interface Workflow {
    /**
     * The name of the workflow
     * @type {string}
     * @memberof Workflow
     */
    'name': string;
    /**
     *
     * @type {ContextDetectionParams}
     * @memberof Workflow
     */
    'initiators': ContextDetectionParams;
    /**
     * The fields of the workflow
     * @type {Array<ConversationContextField>}
     * @memberof Workflow
     */
    'fields': Array<ConversationContextField>;
    /**
     * About this conversation - used as initial context
     * @type {string}
     * @memberof Workflow
     */
    'context': string;
    /**
     * The webhook to call when a workflow is created
     * @type {string}
     * @memberof Workflow
     */
    'onCreated'?: string;
    /**
     * The webhook to call when a workflow is updated
     * @type {string}
     * @memberof Workflow
     */
    'onUpdated'?: string;
    /**
     * The webhook to call when a workflow is deleted
     * @type {string}
     * @memberof Workflow
     */
    'onDeleted'?: string;
    /**
     * The webhook to call when a workflow has an error
     * @type {string}
     * @memberof Workflow
     */
    'onError'?: string;
}
/**
 * Scout9Api - axios parameter creator
 * @export
 */
export declare const Scout9ApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Gets a agent
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agent: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new agent
     * @param {CreateAgentRequest} createAgentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentCreate: (createAgentRequest: CreateAgentRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a agent
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentDelete: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a agent
     * @param {UpdateAgentRequest} updateAgentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentUpdate: (updateAgentRequest: UpdateAgentRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets all or specific set of agents
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agents: (q?: string, id?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates new agents
     * @param {CreateAgentsRequest} createAgentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentsCreate: (createAgentsRequest: CreateAgentsRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes multiple agents
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentsDelete: (id?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates multiple agents
     * @param {UpdateAgentsRequest} updateAgentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentsUpdate: (updateAgentsRequest: UpdateAgentsRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets a context
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    context: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new context
     * @param {CreateContextRequest} createContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextCreate: (createContextRequest: CreateContextRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextDelete: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a context
     * @param {UpdateContextRequest} updateContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextUpdate: (updateContextRequest: UpdateContextRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets all or specific set of contexts
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contexts: (q?: string, id?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates new contexts
     * @param {CreateContextsRequest} createContextsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextsCreate: (createContextsRequest: CreateContextsRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes multiple contexts
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextsDelete: (id?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates multiple contexts
     * @param {UpdateContextRequest} updateContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextsUpdate: (updateContextRequest: UpdateContextRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets a conversation
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conversation: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new conversation
     * @param {ConversationCreateRequest} conversationCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conversationCreate: (conversationCreateRequest: ConversationCreateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conversationDelete: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a conversation
     * @param {ConversationUpdateRequest} conversationUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conversationUpdate: (conversationUpdateRequest: ConversationUpdateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets a customer
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customer: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new customer
     * @param {CreateCustomerRequest} createCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customerCreate: (createCustomerRequest: CreateCustomerRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a customer
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customerDelete: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a customer
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customerUpdate: (updateCustomerRequest: UpdateCustomerRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets all or specific set of customers
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customers: (q?: string, id?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates new customers
     * @param {CreateCustomersRequest} createCustomersRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersCreate: (createCustomersRequest: CreateCustomersRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes multiple customers
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersDelete: (id?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates multiple customers
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersUpdate: (updateCustomerRequest: UpdateCustomerRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Generates a message in the agent\'s voice based on the state of the given conversation. This is useful for testing and debugging. The message will not be sent to the conversation, you must run .message() with the body of the generated message to send it to the conversation.
     * @summary Generate a message from conversation
     * @param {GenerateRequest} generateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generate: (generateRequest: GenerateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new message and sends it to the conversation. If the conversation is scheduled, the message will be scheduled as well. @TODO does not support the ability to mute or delay send
     * @summary Create and send message
     * @param {MessageCreateRequest} messageCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    message: (messageCreateRequest: MessageCreateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all messages from a conversation
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messages: (q?: string, id?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get the results of a bulk API operation
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    operation: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets all or specific set of bulk API operations
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    operations: (q?: string, id?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new scheduled conversation
     * @param {ScheduleCreateRequest} scheduleCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleCreate: (scheduleCreateRequest: ScheduleCreateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleDelete: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new schedule group
     * @param {ScheduleGroupCreateRequest} scheduleGroupCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleGroupCreate: (scheduleGroupCreateRequest: ScheduleGroupCreateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes and cancels a schedule group
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleGroupDelete: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets a schedule group
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleGroupRetrieve: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a schedule group
     * @param {ScheduleGroupUpdateRequest} scheduleGroupUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleGroupUpdate: (scheduleGroupUpdateRequest: ScheduleGroupUpdateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets a schedule
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleRetrieve: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a schedule
     * @param {ScheduleUpdateRequest} scheduleUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleUpdate: (scheduleUpdateRequest: ScheduleUpdateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets a workflow
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflow: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new workflow
     * @param {CreateWorkflowRequest} createWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowCreate: (createWorkflowRequest: CreateWorkflowRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a workflow
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowDelete: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a workflow
     * @param {UpdateWorkflowRequest} updateWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowUpdate: (updateWorkflowRequest: UpdateWorkflowRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets all or specific set of workflows
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflows: (q?: string, id?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates new workflows
     * @param {CreateWorkflowsRequest} createWorkflowsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowsCreate: (createWorkflowsRequest: CreateWorkflowsRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes multiple workflows
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowsDelete: (id?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates multiple workflows
     * @param {UpdateWorkflowRequest} updateWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowsUpdate: (updateWorkflowRequest: UpdateWorkflowRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * Scout9Api - functional programming interface
 * @export
 */
export declare const Scout9ApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Gets a agent
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agent(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAgentResponse>>;
    /**
     *
     * @summary Create a new agent
     * @param {CreateAgentRequest} createAgentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentCreate(createAgentRequest: CreateAgentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAgentResponse>>;
    /**
     *
     * @summary Deletes a agent
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAgentResponse>>;
    /**
     *
     * @summary Update a agent
     * @param {UpdateAgentRequest} updateAgentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentUpdate(updateAgentRequest: UpdateAgentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAgentResponse>>;
    /**
     *
     * @summary Gets all or specific set of agents
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agents(q?: string, id?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListAgentsResponseInner>>>;
    /**
     *
     * @summary Creates new agents
     * @param {CreateAgentsRequest} createAgentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentsCreate(createAgentsRequest: CreateAgentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAgentsResponse>>;
    /**
     *
     * @summary Deletes multiple agents
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentsDelete(id?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAgentsResponse>>;
    /**
     *
     * @summary Updates multiple agents
     * @param {UpdateAgentsRequest} updateAgentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentsUpdate(updateAgentsRequest: UpdateAgentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAgentsResponse>>;
    /**
     *
     * @summary Gets a context
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    context(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContextResponse>>;
    /**
     *
     * @summary Create a new context
     * @param {CreateContextRequest} createContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextCreate(createContextRequest: CreateContextRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateContextResponse>>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteContextResponse>>;
    /**
     *
     * @summary Update a context
     * @param {UpdateContextRequest} updateContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextUpdate(updateContextRequest: UpdateContextRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateContextResponse>>;
    /**
     *
     * @summary Gets all or specific set of contexts
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contexts(q?: string, id?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListContextsResponseInner>>>;
    /**
     *
     * @summary Creates new contexts
     * @param {CreateContextsRequest} createContextsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextsCreate(createContextsRequest: CreateContextsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateContextsResponse>>;
    /**
     *
     * @summary Deletes multiple contexts
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextsDelete(id?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteContextsResponse>>;
    /**
     *
     * @summary Updates multiple contexts
     * @param {UpdateContextRequest} updateContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextsUpdate(updateContextRequest: UpdateContextRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateContextsResponse>>;
    /**
     *
     * @summary Gets a conversation
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conversation(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationGetResponse>>;
    /**
     *
     * @summary Create a new conversation
     * @param {ConversationCreateRequest} conversationCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conversationCreate(conversationCreateRequest: ConversationCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationCreateResponse>>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conversationDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationRemoveResponse>>;
    /**
     *
     * @summary Update a conversation
     * @param {ConversationUpdateRequest} conversationUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conversationUpdate(conversationUpdateRequest: ConversationUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationUpdateResponse>>;
    /**
     *
     * @summary Gets a customer
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCustomerResponse>>;
    /**
     *
     * @summary Creates a new customer
     * @param {CreateCustomerRequest} createCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customerCreate(createCustomerRequest: CreateCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCustomerResponse>>;
    /**
     *
     * @summary Deletes a customer
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customerDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCustomerResponse>>;
    /**
     *
     * @summary Updates a customer
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customerUpdate(updateCustomerRequest: UpdateCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCustomerResponse>>;
    /**
     *
     * @summary Gets all or specific set of customers
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customers(q?: string, id?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListCustomersResponseInner>>>;
    /**
     *
     * @summary Creates new customers
     * @param {CreateCustomersRequest} createCustomersRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersCreate(createCustomersRequest: CreateCustomersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCustomersResponse>>;
    /**
     *
     * @summary Deletes multiple customers
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersDelete(id?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCustomersResponse>>;
    /**
     *
     * @summary Updates multiple customers
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersUpdate(updateCustomerRequest: UpdateCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCustomersResponse>>;
    /**
     * Generates a message in the agent\'s voice based on the state of the given conversation. This is useful for testing and debugging. The message will not be sent to the conversation, you must run .message() with the body of the generated message to send it to the conversation.
     * @summary Generate a message from conversation
     * @param {GenerateRequest} generateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generate(generateRequest: GenerateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateResponse>>;
    /**
     * Creates a new message and sends it to the conversation. If the conversation is scheduled, the message will be scheduled as well. @TODO does not support the ability to mute or delay send
     * @summary Create and send message
     * @param {MessageCreateRequest} messageCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    message(messageCreateRequest: MessageCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageCreateResponse>>;
    /**
     *
     * @summary Get all messages from a conversation
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messages(q?: string, id?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MessageGetResponseInner>>>;
    /**
     *
     * @summary Get the results of a bulk API operation
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    operation(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiOperationResponse>>;
    /**
     *
     * @summary Gets all or specific set of bulk API operations
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    operations(q?: string, id?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListApiOperationsResponseInner>>>;
    /**
     *
     * @summary Creates a new scheduled conversation
     * @param {ScheduleCreateRequest} scheduleCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleCreate(scheduleCreateRequest: ScheduleCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleCreateResponse>>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleRemoveResponse>>;
    /**
     *
     * @summary Creates a new schedule group
     * @param {ScheduleGroupCreateRequest} scheduleGroupCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleGroupCreate(scheduleGroupCreateRequest: ScheduleGroupCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleGroupCreateResponse>>;
    /**
     *
     * @summary Deletes and cancels a schedule group
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleGroupDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleGroupRemoveResponse>>;
    /**
     *
     * @summary Gets a schedule group
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleGroupRetrieve(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleGroupGetResponse>>;
    /**
     *
     * @summary Updates a schedule group
     * @param {ScheduleGroupUpdateRequest} scheduleGroupUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleGroupUpdate(scheduleGroupUpdateRequest: ScheduleGroupUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleGroupUpdateResponse>>;
    /**
     *
     * @summary Gets a schedule
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleRetrieve(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleCreateResponse>>;
    /**
     *
     * @summary Updates a schedule
     * @param {ScheduleUpdateRequest} scheduleUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleUpdate(scheduleUpdateRequest: ScheduleUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleUpdateResponse>>;
    /**
     *
     * @summary Gets a workflow
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflow(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWorkflowResponse>>;
    /**
     *
     * @summary Create a new workflow
     * @param {CreateWorkflowRequest} createWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowCreate(createWorkflowRequest: CreateWorkflowRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWorkflowResponse>>;
    /**
     *
     * @summary Deletes a workflow
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteWorkflowResponse>>;
    /**
     *
     * @summary Update a workflow
     * @param {UpdateWorkflowRequest} updateWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowUpdate(updateWorkflowRequest: UpdateWorkflowRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateWorkflowResponse>>;
    /**
     *
     * @summary Gets all or specific set of workflows
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflows(q?: string, id?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListWorkflowsResponseInner>>>;
    /**
     *
     * @summary Creates new workflows
     * @param {CreateWorkflowsRequest} createWorkflowsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowsCreate(createWorkflowsRequest: CreateWorkflowsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWorkflowsResponse>>;
    /**
     *
     * @summary Deletes multiple workflows
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowsDelete(id?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteWorkflowsResponse>>;
    /**
     *
     * @summary Updates multiple workflows
     * @param {UpdateWorkflowRequest} updateWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowsUpdate(updateWorkflowRequest: UpdateWorkflowRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateWorkflowsResponse>>;
};
/**
 * Scout9Api - factory interface
 * @export
 */
export declare const Scout9ApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Gets a agent
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agent(id: string, options?: any): AxiosPromise<GetAgentResponse>;
    /**
     *
     * @summary Create a new agent
     * @param {CreateAgentRequest} createAgentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentCreate(createAgentRequest: CreateAgentRequest, options?: any): AxiosPromise<CreateAgentResponse>;
    /**
     *
     * @summary Deletes a agent
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentDelete(id: string, options?: any): AxiosPromise<DeleteAgentResponse>;
    /**
     *
     * @summary Update a agent
     * @param {UpdateAgentRequest} updateAgentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentUpdate(updateAgentRequest: UpdateAgentRequest, options?: any): AxiosPromise<UpdateAgentResponse>;
    /**
     *
     * @summary Gets all or specific set of agents
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agents(q?: string, id?: Array<string>, options?: any): AxiosPromise<Array<ListAgentsResponseInner>>;
    /**
     *
     * @summary Creates new agents
     * @param {CreateAgentsRequest} createAgentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentsCreate(createAgentsRequest: CreateAgentsRequest, options?: any): AxiosPromise<CreateAgentsResponse>;
    /**
     *
     * @summary Deletes multiple agents
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentsDelete(id?: Array<string>, options?: any): AxiosPromise<DeleteAgentsResponse>;
    /**
     *
     * @summary Updates multiple agents
     * @param {UpdateAgentsRequest} updateAgentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentsUpdate(updateAgentsRequest: UpdateAgentsRequest, options?: any): AxiosPromise<UpdateAgentsResponse>;
    /**
     *
     * @summary Gets a context
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    context(id: string, options?: any): AxiosPromise<GetContextResponse>;
    /**
     *
     * @summary Create a new context
     * @param {CreateContextRequest} createContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextCreate(createContextRequest: CreateContextRequest, options?: any): AxiosPromise<CreateContextResponse>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextDelete(id: string, options?: any): AxiosPromise<DeleteContextResponse>;
    /**
     *
     * @summary Update a context
     * @param {UpdateContextRequest} updateContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextUpdate(updateContextRequest: UpdateContextRequest, options?: any): AxiosPromise<UpdateContextResponse>;
    /**
     *
     * @summary Gets all or specific set of contexts
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contexts(q?: string, id?: Array<string>, options?: any): AxiosPromise<Array<ListContextsResponseInner>>;
    /**
     *
     * @summary Creates new contexts
     * @param {CreateContextsRequest} createContextsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextsCreate(createContextsRequest: CreateContextsRequest, options?: any): AxiosPromise<CreateContextsResponse>;
    /**
     *
     * @summary Deletes multiple contexts
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextsDelete(id?: Array<string>, options?: any): AxiosPromise<DeleteContextsResponse>;
    /**
     *
     * @summary Updates multiple contexts
     * @param {UpdateContextRequest} updateContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextsUpdate(updateContextRequest: UpdateContextRequest, options?: any): AxiosPromise<UpdateContextsResponse>;
    /**
     *
     * @summary Gets a conversation
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conversation(id: string, options?: any): AxiosPromise<ConversationGetResponse>;
    /**
     *
     * @summary Create a new conversation
     * @param {ConversationCreateRequest} conversationCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conversationCreate(conversationCreateRequest: ConversationCreateRequest, options?: any): AxiosPromise<ConversationCreateResponse>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conversationDelete(id: string, options?: any): AxiosPromise<ConversationRemoveResponse>;
    /**
     *
     * @summary Update a conversation
     * @param {ConversationUpdateRequest} conversationUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conversationUpdate(conversationUpdateRequest: ConversationUpdateRequest, options?: any): AxiosPromise<ConversationUpdateResponse>;
    /**
     *
     * @summary Gets a customer
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customer(id: string, options?: any): AxiosPromise<GetCustomerResponse>;
    /**
     *
     * @summary Creates a new customer
     * @param {CreateCustomerRequest} createCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customerCreate(createCustomerRequest: CreateCustomerRequest, options?: any): AxiosPromise<CreateCustomerResponse>;
    /**
     *
     * @summary Deletes a customer
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customerDelete(id: string, options?: any): AxiosPromise<DeleteCustomerResponse>;
    /**
     *
     * @summary Updates a customer
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customerUpdate(updateCustomerRequest: UpdateCustomerRequest, options?: any): AxiosPromise<UpdateCustomerResponse>;
    /**
     *
     * @summary Gets all or specific set of customers
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customers(q?: string, id?: Array<string>, options?: any): AxiosPromise<Array<ListCustomersResponseInner>>;
    /**
     *
     * @summary Creates new customers
     * @param {CreateCustomersRequest} createCustomersRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersCreate(createCustomersRequest: CreateCustomersRequest, options?: any): AxiosPromise<CreateCustomersResponse>;
    /**
     *
     * @summary Deletes multiple customers
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersDelete(id?: Array<string>, options?: any): AxiosPromise<DeleteCustomersResponse>;
    /**
     *
     * @summary Updates multiple customers
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersUpdate(updateCustomerRequest: UpdateCustomerRequest, options?: any): AxiosPromise<UpdateCustomersResponse>;
    /**
     * Generates a message in the agent\'s voice based on the state of the given conversation. This is useful for testing and debugging. The message will not be sent to the conversation, you must run .message() with the body of the generated message to send it to the conversation.
     * @summary Generate a message from conversation
     * @param {GenerateRequest} generateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generate(generateRequest: GenerateRequest, options?: any): AxiosPromise<GenerateResponse>;
    /**
     * Creates a new message and sends it to the conversation. If the conversation is scheduled, the message will be scheduled as well. @TODO does not support the ability to mute or delay send
     * @summary Create and send message
     * @param {MessageCreateRequest} messageCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    message(messageCreateRequest: MessageCreateRequest, options?: any): AxiosPromise<MessageCreateResponse>;
    /**
     *
     * @summary Get all messages from a conversation
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messages(q?: string, id?: Array<string>, options?: any): AxiosPromise<Array<MessageGetResponseInner>>;
    /**
     *
     * @summary Get the results of a bulk API operation
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    operation(id: string, options?: any): AxiosPromise<GetApiOperationResponse>;
    /**
     *
     * @summary Gets all or specific set of bulk API operations
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    operations(q?: string, id?: Array<string>, options?: any): AxiosPromise<Array<ListApiOperationsResponseInner>>;
    /**
     *
     * @summary Creates a new scheduled conversation
     * @param {ScheduleCreateRequest} scheduleCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleCreate(scheduleCreateRequest: ScheduleCreateRequest, options?: any): AxiosPromise<ScheduleCreateResponse>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleDelete(id: string, options?: any): AxiosPromise<ScheduleRemoveResponse>;
    /**
     *
     * @summary Creates a new schedule group
     * @param {ScheduleGroupCreateRequest} scheduleGroupCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleGroupCreate(scheduleGroupCreateRequest: ScheduleGroupCreateRequest, options?: any): AxiosPromise<ScheduleGroupCreateResponse>;
    /**
     *
     * @summary Deletes and cancels a schedule group
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleGroupDelete(id: string, options?: any): AxiosPromise<ScheduleGroupRemoveResponse>;
    /**
     *
     * @summary Gets a schedule group
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleGroupRetrieve(id: string, options?: any): AxiosPromise<ScheduleGroupGetResponse>;
    /**
     *
     * @summary Updates a schedule group
     * @param {ScheduleGroupUpdateRequest} scheduleGroupUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleGroupUpdate(scheduleGroupUpdateRequest: ScheduleGroupUpdateRequest, options?: any): AxiosPromise<ScheduleGroupUpdateResponse>;
    /**
     *
     * @summary Gets a schedule
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleRetrieve(id: string, options?: any): AxiosPromise<ScheduleCreateResponse>;
    /**
     *
     * @summary Updates a schedule
     * @param {ScheduleUpdateRequest} scheduleUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scheduleUpdate(scheduleUpdateRequest: ScheduleUpdateRequest, options?: any): AxiosPromise<ScheduleUpdateResponse>;
    /**
     *
     * @summary Gets a workflow
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflow(id: string, options?: any): AxiosPromise<GetWorkflowResponse>;
    /**
     *
     * @summary Create a new workflow
     * @param {CreateWorkflowRequest} createWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowCreate(createWorkflowRequest: CreateWorkflowRequest, options?: any): AxiosPromise<CreateWorkflowResponse>;
    /**
     *
     * @summary Deletes a workflow
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowDelete(id: string, options?: any): AxiosPromise<DeleteWorkflowResponse>;
    /**
     *
     * @summary Update a workflow
     * @param {UpdateWorkflowRequest} updateWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowUpdate(updateWorkflowRequest: UpdateWorkflowRequest, options?: any): AxiosPromise<UpdateWorkflowResponse>;
    /**
     *
     * @summary Gets all or specific set of workflows
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflows(q?: string, id?: Array<string>, options?: any): AxiosPromise<Array<ListWorkflowsResponseInner>>;
    /**
     *
     * @summary Creates new workflows
     * @param {CreateWorkflowsRequest} createWorkflowsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowsCreate(createWorkflowsRequest: CreateWorkflowsRequest, options?: any): AxiosPromise<CreateWorkflowsResponse>;
    /**
     *
     * @summary Deletes multiple workflows
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowsDelete(id?: Array<string>, options?: any): AxiosPromise<DeleteWorkflowsResponse>;
    /**
     *
     * @summary Updates multiple workflows
     * @param {UpdateWorkflowRequest} updateWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowsUpdate(updateWorkflowRequest: UpdateWorkflowRequest, options?: any): AxiosPromise<UpdateWorkflowsResponse>;
};
/**
 * Scout9Api - object-oriented interface
 * @export
 * @class Scout9Api
 * @extends {BaseAPI}
 */
export declare class Scout9Api extends BaseAPI {
    /**
     *
     * @summary Gets a agent
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    agent(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetAgentResponse, any>>;
    /**
     *
     * @summary Create a new agent
     * @param {CreateAgentRequest} createAgentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    agentCreate(createAgentRequest: CreateAgentRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateAgentResponse, any>>;
    /**
     *
     * @summary Deletes a agent
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    agentDelete(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteAgentResponse, any>>;
    /**
     *
     * @summary Update a agent
     * @param {UpdateAgentRequest} updateAgentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    agentUpdate(updateAgentRequest: UpdateAgentRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateAgentResponse, any>>;
    /**
     *
     * @summary Gets all or specific set of agents
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    agents(q?: string, id?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListAgentsResponseInner[], any>>;
    /**
     *
     * @summary Creates new agents
     * @param {CreateAgentsRequest} createAgentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    agentsCreate(createAgentsRequest: CreateAgentsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateAgentsResponse, any>>;
    /**
     *
     * @summary Deletes multiple agents
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    agentsDelete(id?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteAgentsResponse, any>>;
    /**
     *
     * @summary Updates multiple agents
     * @param {UpdateAgentsRequest} updateAgentsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    agentsUpdate(updateAgentsRequest: UpdateAgentsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateAgentsResponse, any>>;
    /**
     *
     * @summary Gets a context
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    context(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetContextResponse, any>>;
    /**
     *
     * @summary Create a new context
     * @param {CreateContextRequest} createContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    contextCreate(createContextRequest: CreateContextRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateContextResponse, any>>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    contextDelete(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteContextResponse, any>>;
    /**
     *
     * @summary Update a context
     * @param {UpdateContextRequest} updateContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    contextUpdate(updateContextRequest: UpdateContextRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateContextResponse, any>>;
    /**
     *
     * @summary Gets all or specific set of contexts
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    contexts(q?: string, id?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListContextsResponseInner[], any>>;
    /**
     *
     * @summary Creates new contexts
     * @param {CreateContextsRequest} createContextsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    contextsCreate(createContextsRequest: CreateContextsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateContextsResponse, any>>;
    /**
     *
     * @summary Deletes multiple contexts
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    contextsDelete(id?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteContextsResponse, any>>;
    /**
     *
     * @summary Updates multiple contexts
     * @param {UpdateContextRequest} updateContextRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    contextsUpdate(updateContextRequest: UpdateContextRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateContextsResponse, any>>;
    /**
     *
     * @summary Gets a conversation
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    conversation(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConversationGetResponse, any>>;
    /**
     *
     * @summary Create a new conversation
     * @param {ConversationCreateRequest} conversationCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    conversationCreate(conversationCreateRequest: ConversationCreateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConversationCreateResponse, any>>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    conversationDelete(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConversationRemoveResponse, any>>;
    /**
     *
     * @summary Update a conversation
     * @param {ConversationUpdateRequest} conversationUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    conversationUpdate(conversationUpdateRequest: ConversationUpdateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConversationUpdateResponse, any>>;
    /**
     *
     * @summary Gets a customer
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    customer(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetCustomerResponse, any>>;
    /**
     *
     * @summary Creates a new customer
     * @param {CreateCustomerRequest} createCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    customerCreate(createCustomerRequest: CreateCustomerRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateCustomerResponse, any>>;
    /**
     *
     * @summary Deletes a customer
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    customerDelete(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteCustomerResponse, any>>;
    /**
     *
     * @summary Updates a customer
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    customerUpdate(updateCustomerRequest: UpdateCustomerRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateCustomerResponse, any>>;
    /**
     *
     * @summary Gets all or specific set of customers
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    customers(q?: string, id?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListCustomersResponseInner[], any>>;
    /**
     *
     * @summary Creates new customers
     * @param {CreateCustomersRequest} createCustomersRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    customersCreate(createCustomersRequest: CreateCustomersRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateCustomersResponse, any>>;
    /**
     *
     * @summary Deletes multiple customers
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    customersDelete(id?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteCustomersResponse, any>>;
    /**
     *
     * @summary Updates multiple customers
     * @param {UpdateCustomerRequest} updateCustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    customersUpdate(updateCustomerRequest: UpdateCustomerRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateCustomersResponse, any>>;
    /**
     * Generates a message in the agent\'s voice based on the state of the given conversation. This is useful for testing and debugging. The message will not be sent to the conversation, you must run .message() with the body of the generated message to send it to the conversation.
     * @summary Generate a message from conversation
     * @param {GenerateRequest} generateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    generate(generateRequest: GenerateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GenerateResponse, any>>;
    /**
     * Creates a new message and sends it to the conversation. If the conversation is scheduled, the message will be scheduled as well. @TODO does not support the ability to mute or delay send
     * @summary Create and send message
     * @param {MessageCreateRequest} messageCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    message(messageCreateRequest: MessageCreateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MessageCreateResponse, any>>;
    /**
     *
     * @summary Get all messages from a conversation
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    messages(q?: string, id?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MessageGetResponseInner[], any>>;
    /**
     *
     * @summary Get the results of a bulk API operation
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    operation(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetApiOperationResponse, any>>;
    /**
     *
     * @summary Gets all or specific set of bulk API operations
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    operations(q?: string, id?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListApiOperationsResponseInner[], any>>;
    /**
     *
     * @summary Creates a new scheduled conversation
     * @param {ScheduleCreateRequest} scheduleCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    scheduleCreate(scheduleCreateRequest: ScheduleCreateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleCreateResponse, any>>;
    /**
     *
     * @summary Deletes a schedule
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    scheduleDelete(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleRemoveResponse, any>>;
    /**
     *
     * @summary Creates a new schedule group
     * @param {ScheduleGroupCreateRequest} scheduleGroupCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    scheduleGroupCreate(scheduleGroupCreateRequest: ScheduleGroupCreateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleGroupCreateResponse, any>>;
    /**
     *
     * @summary Deletes and cancels a schedule group
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    scheduleGroupDelete(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleGroupRemoveResponse, any>>;
    /**
     *
     * @summary Gets a schedule group
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    scheduleGroupRetrieve(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleGroupGetResponse, any>>;
    /**
     *
     * @summary Updates a schedule group
     * @param {ScheduleGroupUpdateRequest} scheduleGroupUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    scheduleGroupUpdate(scheduleGroupUpdateRequest: ScheduleGroupUpdateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleGroupUpdateResponse, any>>;
    /**
     *
     * @summary Gets a schedule
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    scheduleRetrieve(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleCreateResponse, any>>;
    /**
     *
     * @summary Updates a schedule
     * @param {ScheduleUpdateRequest} scheduleUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    scheduleUpdate(scheduleUpdateRequest: ScheduleUpdateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleUpdateResponse, any>>;
    /**
     *
     * @summary Gets a workflow
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    workflow(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetWorkflowResponse, any>>;
    /**
     *
     * @summary Create a new workflow
     * @param {CreateWorkflowRequest} createWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    workflowCreate(createWorkflowRequest: CreateWorkflowRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateWorkflowResponse, any>>;
    /**
     *
     * @summary Deletes a workflow
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    workflowDelete(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteWorkflowResponse, any>>;
    /**
     *
     * @summary Update a workflow
     * @param {UpdateWorkflowRequest} updateWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    workflowUpdate(updateWorkflowRequest: UpdateWorkflowRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateWorkflowResponse, any>>;
    /**
     *
     * @summary Gets all or specific set of workflows
     * @param {string} [q] Query search string to filter results ({field},{operator},{value}) (example firstName,equals,Patrick)
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    workflows(q?: string, id?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListWorkflowsResponseInner[], any>>;
    /**
     *
     * @summary Creates new workflows
     * @param {CreateWorkflowsRequest} createWorkflowsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    workflowsCreate(createWorkflowsRequest: CreateWorkflowsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateWorkflowsResponse, any>>;
    /**
     *
     * @summary Deletes multiple workflows
     * @param {Array<string>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    workflowsDelete(id?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteWorkflowsResponse, any>>;
    /**
     *
     * @summary Updates multiple workflows
     * @param {UpdateWorkflowRequest} updateWorkflowRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Scout9Api
     */
    workflowsUpdate(updateWorkflowRequest: UpdateWorkflowRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateWorkflowsResponse, any>>;
}
